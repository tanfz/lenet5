-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_top is
generic (
    C_M_AXI_DATA_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA3_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA3_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA3_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA3_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA3_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA3_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA3_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA3_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_DATA_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA1_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_DATA1_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA2_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_DATA2_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA2_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA3_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_DATA3_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA3_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA3_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_data_AWVALID : OUT STD_LOGIC;
    m_axi_data_AWREADY : IN STD_LOGIC;
    m_axi_data_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ADDR_WIDTH-1 downto 0);
    m_axi_data_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_AWUSER_WIDTH-1 downto 0);
    m_axi_data_WVALID : OUT STD_LOGIC;
    m_axi_data_WREADY : IN STD_LOGIC;
    m_axi_data_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_DATA_WIDTH-1 downto 0);
    m_axi_data_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_DATA_WIDTH/8-1 downto 0);
    m_axi_data_WLAST : OUT STD_LOGIC;
    m_axi_data_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WUSER_WIDTH-1 downto 0);
    m_axi_data_ARVALID : OUT STD_LOGIC;
    m_axi_data_ARREADY : IN STD_LOGIC;
    m_axi_data_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ADDR_WIDTH-1 downto 0);
    m_axi_data_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ARUSER_WIDTH-1 downto 0);
    m_axi_data_RVALID : IN STD_LOGIC;
    m_axi_data_RREADY : OUT STD_LOGIC;
    m_axi_data_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_DATA_WIDTH-1 downto 0);
    m_axi_data_RLAST : IN STD_LOGIC;
    m_axi_data_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_RUSER_WIDTH-1 downto 0);
    m_axi_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_BVALID : IN STD_LOGIC;
    m_axi_data_BREADY : OUT STD_LOGIC;
    m_axi_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_BUSER_WIDTH-1 downto 0);
    m_axi_data1_AWVALID : OUT STD_LOGIC;
    m_axi_data1_AWREADY : IN STD_LOGIC;
    m_axi_data1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ADDR_WIDTH-1 downto 0);
    m_axi_data1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ID_WIDTH-1 downto 0);
    m_axi_data1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_AWUSER_WIDTH-1 downto 0);
    m_axi_data1_WVALID : OUT STD_LOGIC;
    m_axi_data1_WREADY : IN STD_LOGIC;
    m_axi_data1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_DATA_WIDTH-1 downto 0);
    m_axi_data1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_DATA_WIDTH/8-1 downto 0);
    m_axi_data1_WLAST : OUT STD_LOGIC;
    m_axi_data1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ID_WIDTH-1 downto 0);
    m_axi_data1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_WUSER_WIDTH-1 downto 0);
    m_axi_data1_ARVALID : OUT STD_LOGIC;
    m_axi_data1_ARREADY : IN STD_LOGIC;
    m_axi_data1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ADDR_WIDTH-1 downto 0);
    m_axi_data1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ID_WIDTH-1 downto 0);
    m_axi_data1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ARUSER_WIDTH-1 downto 0);
    m_axi_data1_RVALID : IN STD_LOGIC;
    m_axi_data1_RREADY : OUT STD_LOGIC;
    m_axi_data1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA1_DATA_WIDTH-1 downto 0);
    m_axi_data1_RLAST : IN STD_LOGIC;
    m_axi_data1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA1_ID_WIDTH-1 downto 0);
    m_axi_data1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA1_RUSER_WIDTH-1 downto 0);
    m_axi_data1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_BVALID : IN STD_LOGIC;
    m_axi_data1_BREADY : OUT STD_LOGIC;
    m_axi_data1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA1_ID_WIDTH-1 downto 0);
    m_axi_data1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA1_BUSER_WIDTH-1 downto 0);
    m_axi_data2_AWVALID : OUT STD_LOGIC;
    m_axi_data2_AWREADY : IN STD_LOGIC;
    m_axi_data2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ADDR_WIDTH-1 downto 0);
    m_axi_data2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ID_WIDTH-1 downto 0);
    m_axi_data2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_AWUSER_WIDTH-1 downto 0);
    m_axi_data2_WVALID : OUT STD_LOGIC;
    m_axi_data2_WREADY : IN STD_LOGIC;
    m_axi_data2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_DATA_WIDTH-1 downto 0);
    m_axi_data2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_DATA_WIDTH/8-1 downto 0);
    m_axi_data2_WLAST : OUT STD_LOGIC;
    m_axi_data2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ID_WIDTH-1 downto 0);
    m_axi_data2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_WUSER_WIDTH-1 downto 0);
    m_axi_data2_ARVALID : OUT STD_LOGIC;
    m_axi_data2_ARREADY : IN STD_LOGIC;
    m_axi_data2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ADDR_WIDTH-1 downto 0);
    m_axi_data2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ID_WIDTH-1 downto 0);
    m_axi_data2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ARUSER_WIDTH-1 downto 0);
    m_axi_data2_RVALID : IN STD_LOGIC;
    m_axi_data2_RREADY : OUT STD_LOGIC;
    m_axi_data2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA2_DATA_WIDTH-1 downto 0);
    m_axi_data2_RLAST : IN STD_LOGIC;
    m_axi_data2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA2_ID_WIDTH-1 downto 0);
    m_axi_data2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA2_RUSER_WIDTH-1 downto 0);
    m_axi_data2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_BVALID : IN STD_LOGIC;
    m_axi_data2_BREADY : OUT STD_LOGIC;
    m_axi_data2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA2_ID_WIDTH-1 downto 0);
    m_axi_data2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA2_BUSER_WIDTH-1 downto 0);
    m_axi_data3_AWVALID : OUT STD_LOGIC;
    m_axi_data3_AWREADY : IN STD_LOGIC;
    m_axi_data3_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_ADDR_WIDTH-1 downto 0);
    m_axi_data3_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_ID_WIDTH-1 downto 0);
    m_axi_data3_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data3_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_AWUSER_WIDTH-1 downto 0);
    m_axi_data3_WVALID : OUT STD_LOGIC;
    m_axi_data3_WREADY : IN STD_LOGIC;
    m_axi_data3_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_DATA_WIDTH-1 downto 0);
    m_axi_data3_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_DATA_WIDTH/8-1 downto 0);
    m_axi_data3_WLAST : OUT STD_LOGIC;
    m_axi_data3_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_ID_WIDTH-1 downto 0);
    m_axi_data3_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_WUSER_WIDTH-1 downto 0);
    m_axi_data3_ARVALID : OUT STD_LOGIC;
    m_axi_data3_ARREADY : IN STD_LOGIC;
    m_axi_data3_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_ADDR_WIDTH-1 downto 0);
    m_axi_data3_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_ID_WIDTH-1 downto 0);
    m_axi_data3_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data3_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_ARUSER_WIDTH-1 downto 0);
    m_axi_data3_RVALID : IN STD_LOGIC;
    m_axi_data3_RREADY : OUT STD_LOGIC;
    m_axi_data3_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA3_DATA_WIDTH-1 downto 0);
    m_axi_data3_RLAST : IN STD_LOGIC;
    m_axi_data3_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA3_ID_WIDTH-1 downto 0);
    m_axi_data3_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA3_RUSER_WIDTH-1 downto 0);
    m_axi_data3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data3_BVALID : IN STD_LOGIC;
    m_axi_data3_BREADY : OUT STD_LOGIC;
    m_axi_data3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data3_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA3_ID_WIDTH-1 downto 0);
    m_axi_data3_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA3_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of conv_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_top,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=2927173,HLS_SYN_TPT=none,HLS_SYN_MEM=60,HLS_SYN_DSP=14,HLS_SYN_FF=15232,HLS_SYN_LUT=17306,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_out1_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_out1_0_ce0 : STD_LOGIC;
    signal conv_out1_0_we0 : STD_LOGIC;
    signal conv_out1_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_out1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_out1_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_out1_1_ce0 : STD_LOGIC;
    signal conv_out1_1_we0 : STD_LOGIC;
    signal conv_out1_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_out1_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_out1_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_out1_2_ce0 : STD_LOGIC;
    signal conv_out1_2_we0 : STD_LOGIC;
    signal conv_out1_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_out1_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_out1_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_out1_3_ce0 : STD_LOGIC;
    signal conv_out1_3_we0 : STD_LOGIC;
    signal conv_out1_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_out1_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_out1_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_out1_4_ce0 : STD_LOGIC;
    signal conv_out1_4_we0 : STD_LOGIC;
    signal conv_out1_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_out1_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_out1_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_out1_5_ce0 : STD_LOGIC;
    signal conv_out1_5_we0 : STD_LOGIC;
    signal conv_out1_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_out1_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_AWVALID : STD_LOGIC;
    signal data_AWREADY : STD_LOGIC;
    signal data_WVALID : STD_LOGIC;
    signal data_WREADY : STD_LOGIC;
    signal data_ARVALID : STD_LOGIC;
    signal data_ARREADY : STD_LOGIC;
    signal data_RVALID : STD_LOGIC;
    signal data_RREADY : STD_LOGIC;
    signal data_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal data_RLAST : STD_LOGIC;
    signal data_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data_BVALID : STD_LOGIC;
    signal data_BREADY : STD_LOGIC;
    signal data_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data1_AWVALID : STD_LOGIC;
    signal data1_AWREADY : STD_LOGIC;
    signal data1_WVALID : STD_LOGIC;
    signal data1_WREADY : STD_LOGIC;
    signal data1_ARVALID : STD_LOGIC;
    signal data1_ARREADY : STD_LOGIC;
    signal data1_RVALID : STD_LOGIC;
    signal data1_RREADY : STD_LOGIC;
    signal data1_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal data1_RLAST : STD_LOGIC;
    signal data1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data1_BVALID : STD_LOGIC;
    signal data1_BREADY : STD_LOGIC;
    signal data1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data2_AWREADY : STD_LOGIC;
    signal data2_WREADY : STD_LOGIC;
    signal data2_ARVALID : STD_LOGIC;
    signal data2_ARREADY : STD_LOGIC;
    signal data2_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal data2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal data2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal data2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal data2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal data2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal data2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal data2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal data2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal data2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal data2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data2_RVALID : STD_LOGIC;
    signal data2_RREADY : STD_LOGIC;
    signal data2_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal data2_RLAST : STD_LOGIC;
    signal data2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data2_BVALID : STD_LOGIC;
    signal data2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data3_AWREADY : STD_LOGIC;
    signal data3_WREADY : STD_LOGIC;
    signal data3_ARVALID : STD_LOGIC;
    signal data3_ARREADY : STD_LOGIC;
    signal data3_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal data3_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal data3_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal data3_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal data3_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal data3_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal data3_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal data3_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal data3_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal data3_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal data3_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data3_RVALID : STD_LOGIC;
    signal data3_RREADY : STD_LOGIC;
    signal data3_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal data3_RLAST : STD_LOGIC;
    signal data3_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data3_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data3_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data3_BVALID : STD_LOGIC;
    signal data3_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data3_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data3_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_370_ap_start : STD_LOGIC;
    signal grp_conv2_fu_370_ap_done : STD_LOGIC;
    signal grp_conv2_fu_370_ap_idle : STD_LOGIC;
    signal grp_conv2_fu_370_ap_ready : STD_LOGIC;
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWVALID : STD_LOGIC;
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_WVALID : STD_LOGIC;
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_WLAST : STD_LOGIC;
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_ARVALID : STD_LOGIC;
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_RREADY : STD_LOGIC;
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_BREADY : STD_LOGIC;
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_AWVALID : STD_LOGIC;
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_WVALID : STD_LOGIC;
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_WLAST : STD_LOGIC;
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARVALID : STD_LOGIC;
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_RREADY : STD_LOGIC;
    signal grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_BREADY : STD_LOGIC;
    signal grp_conv2_fu_370_m_axi_WEIGHT_AWVALID : STD_LOGIC;
    signal grp_conv2_fu_370_m_axi_WEIGHT_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_370_m_axi_WEIGHT_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_370_m_axi_WEIGHT_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_370_m_axi_WEIGHT_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_370_m_axi_WEIGHT_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_370_m_axi_WEIGHT_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_370_m_axi_WEIGHT_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_WEIGHT_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_370_m_axi_WEIGHT_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_WEIGHT_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_WEIGHT_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_370_m_axi_WEIGHT_WVALID : STD_LOGIC;
    signal grp_conv2_fu_370_m_axi_WEIGHT_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_370_m_axi_WEIGHT_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_WEIGHT_WLAST : STD_LOGIC;
    signal grp_conv2_fu_370_m_axi_WEIGHT_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_370_m_axi_WEIGHT_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_370_m_axi_WEIGHT_ARVALID : STD_LOGIC;
    signal grp_conv2_fu_370_m_axi_WEIGHT_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_370_m_axi_WEIGHT_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_370_m_axi_WEIGHT_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_370_m_axi_WEIGHT_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_370_m_axi_WEIGHT_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_370_m_axi_WEIGHT_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_370_m_axi_WEIGHT_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_WEIGHT_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_370_m_axi_WEIGHT_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_WEIGHT_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_WEIGHT_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_370_m_axi_WEIGHT_RREADY : STD_LOGIC;
    signal grp_conv2_fu_370_m_axi_WEIGHT_BREADY : STD_LOGIC;
    signal grp_conv2_fu_370_m_axi_BIAS_AWVALID : STD_LOGIC;
    signal grp_conv2_fu_370_m_axi_BIAS_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_370_m_axi_BIAS_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_370_m_axi_BIAS_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_370_m_axi_BIAS_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_370_m_axi_BIAS_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_370_m_axi_BIAS_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_370_m_axi_BIAS_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_BIAS_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_370_m_axi_BIAS_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_BIAS_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_BIAS_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_370_m_axi_BIAS_WVALID : STD_LOGIC;
    signal grp_conv2_fu_370_m_axi_BIAS_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_370_m_axi_BIAS_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_BIAS_WLAST : STD_LOGIC;
    signal grp_conv2_fu_370_m_axi_BIAS_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_370_m_axi_BIAS_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_370_m_axi_BIAS_ARVALID : STD_LOGIC;
    signal grp_conv2_fu_370_m_axi_BIAS_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_370_m_axi_BIAS_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_370_m_axi_BIAS_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_370_m_axi_BIAS_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_370_m_axi_BIAS_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_370_m_axi_BIAS_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_370_m_axi_BIAS_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_BIAS_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_370_m_axi_BIAS_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_BIAS_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_370_m_axi_BIAS_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_370_m_axi_BIAS_RREADY : STD_LOGIC;
    signal grp_conv2_fu_370_m_axi_BIAS_BREADY : STD_LOGIC;
    signal grp_conv2_fu_370_conv_out1_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv2_fu_370_conv_out1_0_ce0 : STD_LOGIC;
    signal grp_conv2_fu_370_conv_out1_0_we0 : STD_LOGIC;
    signal grp_conv2_fu_370_conv_out1_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_370_conv_out1_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv2_fu_370_conv_out1_1_ce0 : STD_LOGIC;
    signal grp_conv2_fu_370_conv_out1_1_we0 : STD_LOGIC;
    signal grp_conv2_fu_370_conv_out1_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_370_conv_out1_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv2_fu_370_conv_out1_2_ce0 : STD_LOGIC;
    signal grp_conv2_fu_370_conv_out1_2_we0 : STD_LOGIC;
    signal grp_conv2_fu_370_conv_out1_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_370_conv_out1_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv2_fu_370_conv_out1_3_ce0 : STD_LOGIC;
    signal grp_conv2_fu_370_conv_out1_3_we0 : STD_LOGIC;
    signal grp_conv2_fu_370_conv_out1_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_370_conv_out1_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv2_fu_370_conv_out1_4_ce0 : STD_LOGIC;
    signal grp_conv2_fu_370_conv_out1_4_we0 : STD_LOGIC;
    signal grp_conv2_fu_370_conv_out1_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_370_conv_out1_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv2_fu_370_conv_out1_5_ce0 : STD_LOGIC;
    signal grp_conv2_fu_370_conv_out1_5_we0 : STD_LOGIC;
    signal grp_conv2_fu_370_conv_out1_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_682_ap_start : STD_LOGIC;
    signal grp_conv1_fu_682_ap_done : STD_LOGIC;
    signal grp_conv1_fu_682_ap_idle : STD_LOGIC;
    signal grp_conv1_fu_682_ap_ready : STD_LOGIC;
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_AWVALID : STD_LOGIC;
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_WVALID : STD_LOGIC;
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_WLAST : STD_LOGIC;
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARVALID : STD_LOGIC;
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_RREADY : STD_LOGIC;
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_BREADY : STD_LOGIC;
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWVALID : STD_LOGIC;
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_WVALID : STD_LOGIC;
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_WLAST : STD_LOGIC;
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_ARVALID : STD_LOGIC;
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_RREADY : STD_LOGIC;
    signal grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_BREADY : STD_LOGIC;
    signal grp_conv1_fu_682_m_axi_WEIGHT_AWVALID : STD_LOGIC;
    signal grp_conv1_fu_682_m_axi_WEIGHT_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_682_m_axi_WEIGHT_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_682_m_axi_WEIGHT_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_682_m_axi_WEIGHT_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_682_m_axi_WEIGHT_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_682_m_axi_WEIGHT_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_682_m_axi_WEIGHT_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_WEIGHT_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_682_m_axi_WEIGHT_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_WEIGHT_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_WEIGHT_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_682_m_axi_WEIGHT_WVALID : STD_LOGIC;
    signal grp_conv1_fu_682_m_axi_WEIGHT_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_682_m_axi_WEIGHT_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_WEIGHT_WLAST : STD_LOGIC;
    signal grp_conv1_fu_682_m_axi_WEIGHT_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_682_m_axi_WEIGHT_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_682_m_axi_WEIGHT_ARVALID : STD_LOGIC;
    signal grp_conv1_fu_682_m_axi_WEIGHT_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_682_m_axi_WEIGHT_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_682_m_axi_WEIGHT_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_682_m_axi_WEIGHT_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_682_m_axi_WEIGHT_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_682_m_axi_WEIGHT_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_682_m_axi_WEIGHT_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_WEIGHT_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_682_m_axi_WEIGHT_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_WEIGHT_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_WEIGHT_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_682_m_axi_WEIGHT_RREADY : STD_LOGIC;
    signal grp_conv1_fu_682_m_axi_WEIGHT_BREADY : STD_LOGIC;
    signal grp_conv1_fu_682_m_axi_BIAS_AWVALID : STD_LOGIC;
    signal grp_conv1_fu_682_m_axi_BIAS_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_682_m_axi_BIAS_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_682_m_axi_BIAS_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_682_m_axi_BIAS_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_682_m_axi_BIAS_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_682_m_axi_BIAS_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_682_m_axi_BIAS_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_BIAS_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_682_m_axi_BIAS_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_BIAS_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_BIAS_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_682_m_axi_BIAS_WVALID : STD_LOGIC;
    signal grp_conv1_fu_682_m_axi_BIAS_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_682_m_axi_BIAS_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_BIAS_WLAST : STD_LOGIC;
    signal grp_conv1_fu_682_m_axi_BIAS_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_682_m_axi_BIAS_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_682_m_axi_BIAS_ARVALID : STD_LOGIC;
    signal grp_conv1_fu_682_m_axi_BIAS_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_682_m_axi_BIAS_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_682_m_axi_BIAS_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_682_m_axi_BIAS_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_682_m_axi_BIAS_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_682_m_axi_BIAS_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_682_m_axi_BIAS_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_BIAS_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_682_m_axi_BIAS_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_BIAS_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_682_m_axi_BIAS_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_682_m_axi_BIAS_RREADY : STD_LOGIC;
    signal grp_conv1_fu_682_m_axi_BIAS_BREADY : STD_LOGIC;
    signal grp_conv1_fu_682_conv_out1_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv1_fu_682_conv_out1_0_ce0 : STD_LOGIC;
    signal grp_conv1_fu_682_conv_out1_0_we0 : STD_LOGIC;
    signal grp_conv1_fu_682_conv_out1_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_682_conv_out1_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv1_fu_682_conv_out1_1_ce0 : STD_LOGIC;
    signal grp_conv1_fu_682_conv_out1_1_we0 : STD_LOGIC;
    signal grp_conv1_fu_682_conv_out1_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_682_conv_out1_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv1_fu_682_conv_out1_2_ce0 : STD_LOGIC;
    signal grp_conv1_fu_682_conv_out1_2_we0 : STD_LOGIC;
    signal grp_conv1_fu_682_conv_out1_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_682_conv_out1_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv1_fu_682_conv_out1_3_ce0 : STD_LOGIC;
    signal grp_conv1_fu_682_conv_out1_3_we0 : STD_LOGIC;
    signal grp_conv1_fu_682_conv_out1_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_682_conv_out1_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv1_fu_682_conv_out1_4_ce0 : STD_LOGIC;
    signal grp_conv1_fu_682_conv_out1_4_we0 : STD_LOGIC;
    signal grp_conv1_fu_682_conv_out1_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_682_conv_out1_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv1_fu_682_conv_out1_5_ce0 : STD_LOGIC;
    signal grp_conv1_fu_682_conv_out1_5_we0 : STD_LOGIC;
    signal grp_conv1_fu_682_conv_out1_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_370_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_conv1_fu_682_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component conv2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_FM_DDR_BUFF1_AWVALID : OUT STD_LOGIC;
        m_axi_FM_DDR_BUFF1_AWREADY : IN STD_LOGIC;
        m_axi_FM_DDR_BUFF1_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FM_DDR_BUFF1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FM_DDR_BUFF1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_FM_DDR_BUFF1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FM_DDR_BUFF1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FM_DDR_BUFF1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_FM_DDR_BUFF1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF1_WVALID : OUT STD_LOGIC;
        m_axi_FM_DDR_BUFF1_WREADY : IN STD_LOGIC;
        m_axi_FM_DDR_BUFF1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FM_DDR_BUFF1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF1_WLAST : OUT STD_LOGIC;
        m_axi_FM_DDR_BUFF1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF1_ARVALID : OUT STD_LOGIC;
        m_axi_FM_DDR_BUFF1_ARREADY : IN STD_LOGIC;
        m_axi_FM_DDR_BUFF1_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FM_DDR_BUFF1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FM_DDR_BUFF1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_FM_DDR_BUFF1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FM_DDR_BUFF1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FM_DDR_BUFF1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_FM_DDR_BUFF1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF1_RVALID : IN STD_LOGIC;
        m_axi_FM_DDR_BUFF1_RREADY : OUT STD_LOGIC;
        m_axi_FM_DDR_BUFF1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FM_DDR_BUFF1_RLAST : IN STD_LOGIC;
        m_axi_FM_DDR_BUFF1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FM_DDR_BUFF1_BVALID : IN STD_LOGIC;
        m_axi_FM_DDR_BUFF1_BREADY : OUT STD_LOGIC;
        m_axi_FM_DDR_BUFF1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FM_DDR_BUFF1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF2_AWVALID : OUT STD_LOGIC;
        m_axi_FM_DDR_BUFF2_AWREADY : IN STD_LOGIC;
        m_axi_FM_DDR_BUFF2_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FM_DDR_BUFF2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FM_DDR_BUFF2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_FM_DDR_BUFF2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FM_DDR_BUFF2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FM_DDR_BUFF2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_FM_DDR_BUFF2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF2_WVALID : OUT STD_LOGIC;
        m_axi_FM_DDR_BUFF2_WREADY : IN STD_LOGIC;
        m_axi_FM_DDR_BUFF2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FM_DDR_BUFF2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF2_WLAST : OUT STD_LOGIC;
        m_axi_FM_DDR_BUFF2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF2_ARVALID : OUT STD_LOGIC;
        m_axi_FM_DDR_BUFF2_ARREADY : IN STD_LOGIC;
        m_axi_FM_DDR_BUFF2_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FM_DDR_BUFF2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FM_DDR_BUFF2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_FM_DDR_BUFF2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FM_DDR_BUFF2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FM_DDR_BUFF2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_FM_DDR_BUFF2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF2_RVALID : IN STD_LOGIC;
        m_axi_FM_DDR_BUFF2_RREADY : OUT STD_LOGIC;
        m_axi_FM_DDR_BUFF2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FM_DDR_BUFF2_RLAST : IN STD_LOGIC;
        m_axi_FM_DDR_BUFF2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FM_DDR_BUFF2_BVALID : IN STD_LOGIC;
        m_axi_FM_DDR_BUFF2_BREADY : OUT STD_LOGIC;
        m_axi_FM_DDR_BUFF2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FM_DDR_BUFF2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHT_AWVALID : OUT STD_LOGIC;
        m_axi_WEIGHT_AWREADY : IN STD_LOGIC;
        m_axi_WEIGHT_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_WEIGHT_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHT_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_WEIGHT_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_WEIGHT_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_WEIGHT_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_WEIGHT_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHT_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_WEIGHT_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHT_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHT_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHT_WVALID : OUT STD_LOGIC;
        m_axi_WEIGHT_WREADY : IN STD_LOGIC;
        m_axi_WEIGHT_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_WEIGHT_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHT_WLAST : OUT STD_LOGIC;
        m_axi_WEIGHT_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHT_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHT_ARVALID : OUT STD_LOGIC;
        m_axi_WEIGHT_ARREADY : IN STD_LOGIC;
        m_axi_WEIGHT_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_WEIGHT_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHT_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_WEIGHT_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_WEIGHT_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_WEIGHT_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_WEIGHT_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHT_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_WEIGHT_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHT_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHT_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHT_RVALID : IN STD_LOGIC;
        m_axi_WEIGHT_RREADY : OUT STD_LOGIC;
        m_axi_WEIGHT_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_WEIGHT_RLAST : IN STD_LOGIC;
        m_axi_WEIGHT_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHT_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHT_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_WEIGHT_BVALID : IN STD_LOGIC;
        m_axi_WEIGHT_BREADY : OUT STD_LOGIC;
        m_axi_WEIGHT_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_WEIGHT_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHT_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BIAS_AWVALID : OUT STD_LOGIC;
        m_axi_BIAS_AWREADY : IN STD_LOGIC;
        m_axi_BIAS_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_BIAS_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BIAS_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_BIAS_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_BIAS_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_BIAS_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_BIAS_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_BIAS_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_BIAS_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_BIAS_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_BIAS_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BIAS_WVALID : OUT STD_LOGIC;
        m_axi_BIAS_WREADY : IN STD_LOGIC;
        m_axi_BIAS_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_BIAS_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_BIAS_WLAST : OUT STD_LOGIC;
        m_axi_BIAS_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BIAS_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BIAS_ARVALID : OUT STD_LOGIC;
        m_axi_BIAS_ARREADY : IN STD_LOGIC;
        m_axi_BIAS_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_BIAS_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BIAS_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_BIAS_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_BIAS_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_BIAS_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_BIAS_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_BIAS_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_BIAS_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_BIAS_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_BIAS_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BIAS_RVALID : IN STD_LOGIC;
        m_axi_BIAS_RREADY : OUT STD_LOGIC;
        m_axi_BIAS_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_BIAS_RLAST : IN STD_LOGIC;
        m_axi_BIAS_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BIAS_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BIAS_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_BIAS_BVALID : IN STD_LOGIC;
        m_axi_BIAS_BREADY : OUT STD_LOGIC;
        m_axi_BIAS_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_BIAS_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BIAS_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        conv_out1_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        conv_out1_0_ce0 : OUT STD_LOGIC;
        conv_out1_0_we0 : OUT STD_LOGIC;
        conv_out1_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_out1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_out1_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        conv_out1_1_ce0 : OUT STD_LOGIC;
        conv_out1_1_we0 : OUT STD_LOGIC;
        conv_out1_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_out1_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_out1_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        conv_out1_2_ce0 : OUT STD_LOGIC;
        conv_out1_2_we0 : OUT STD_LOGIC;
        conv_out1_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_out1_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_out1_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        conv_out1_3_ce0 : OUT STD_LOGIC;
        conv_out1_3_we0 : OUT STD_LOGIC;
        conv_out1_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_out1_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_out1_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        conv_out1_4_ce0 : OUT STD_LOGIC;
        conv_out1_4_we0 : OUT STD_LOGIC;
        conv_out1_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_out1_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_out1_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        conv_out1_5_ce0 : OUT STD_LOGIC;
        conv_out1_5_we0 : OUT STD_LOGIC;
        conv_out1_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_out1_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_FM_DDR_BUFF1_AWVALID : OUT STD_LOGIC;
        m_axi_FM_DDR_BUFF1_AWREADY : IN STD_LOGIC;
        m_axi_FM_DDR_BUFF1_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FM_DDR_BUFF1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FM_DDR_BUFF1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_FM_DDR_BUFF1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FM_DDR_BUFF1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FM_DDR_BUFF1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_FM_DDR_BUFF1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF1_WVALID : OUT STD_LOGIC;
        m_axi_FM_DDR_BUFF1_WREADY : IN STD_LOGIC;
        m_axi_FM_DDR_BUFF1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FM_DDR_BUFF1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF1_WLAST : OUT STD_LOGIC;
        m_axi_FM_DDR_BUFF1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF1_ARVALID : OUT STD_LOGIC;
        m_axi_FM_DDR_BUFF1_ARREADY : IN STD_LOGIC;
        m_axi_FM_DDR_BUFF1_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FM_DDR_BUFF1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FM_DDR_BUFF1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_FM_DDR_BUFF1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FM_DDR_BUFF1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FM_DDR_BUFF1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_FM_DDR_BUFF1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF1_RVALID : IN STD_LOGIC;
        m_axi_FM_DDR_BUFF1_RREADY : OUT STD_LOGIC;
        m_axi_FM_DDR_BUFF1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FM_DDR_BUFF1_RLAST : IN STD_LOGIC;
        m_axi_FM_DDR_BUFF1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FM_DDR_BUFF1_BVALID : IN STD_LOGIC;
        m_axi_FM_DDR_BUFF1_BREADY : OUT STD_LOGIC;
        m_axi_FM_DDR_BUFF1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FM_DDR_BUFF1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF2_AWVALID : OUT STD_LOGIC;
        m_axi_FM_DDR_BUFF2_AWREADY : IN STD_LOGIC;
        m_axi_FM_DDR_BUFF2_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FM_DDR_BUFF2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FM_DDR_BUFF2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_FM_DDR_BUFF2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FM_DDR_BUFF2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FM_DDR_BUFF2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_FM_DDR_BUFF2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF2_WVALID : OUT STD_LOGIC;
        m_axi_FM_DDR_BUFF2_WREADY : IN STD_LOGIC;
        m_axi_FM_DDR_BUFF2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FM_DDR_BUFF2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF2_WLAST : OUT STD_LOGIC;
        m_axi_FM_DDR_BUFF2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF2_ARVALID : OUT STD_LOGIC;
        m_axi_FM_DDR_BUFF2_ARREADY : IN STD_LOGIC;
        m_axi_FM_DDR_BUFF2_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FM_DDR_BUFF2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FM_DDR_BUFF2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_FM_DDR_BUFF2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FM_DDR_BUFF2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FM_DDR_BUFF2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_FM_DDR_BUFF2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FM_DDR_BUFF2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF2_RVALID : IN STD_LOGIC;
        m_axi_FM_DDR_BUFF2_RREADY : OUT STD_LOGIC;
        m_axi_FM_DDR_BUFF2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FM_DDR_BUFF2_RLAST : IN STD_LOGIC;
        m_axi_FM_DDR_BUFF2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FM_DDR_BUFF2_BVALID : IN STD_LOGIC;
        m_axi_FM_DDR_BUFF2_BREADY : OUT STD_LOGIC;
        m_axi_FM_DDR_BUFF2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FM_DDR_BUFF2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FM_DDR_BUFF2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHT_AWVALID : OUT STD_LOGIC;
        m_axi_WEIGHT_AWREADY : IN STD_LOGIC;
        m_axi_WEIGHT_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_WEIGHT_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHT_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_WEIGHT_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_WEIGHT_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_WEIGHT_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_WEIGHT_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHT_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_WEIGHT_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHT_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHT_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHT_WVALID : OUT STD_LOGIC;
        m_axi_WEIGHT_WREADY : IN STD_LOGIC;
        m_axi_WEIGHT_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_WEIGHT_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHT_WLAST : OUT STD_LOGIC;
        m_axi_WEIGHT_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHT_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHT_ARVALID : OUT STD_LOGIC;
        m_axi_WEIGHT_ARREADY : IN STD_LOGIC;
        m_axi_WEIGHT_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_WEIGHT_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHT_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_WEIGHT_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_WEIGHT_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_WEIGHT_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_WEIGHT_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHT_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_WEIGHT_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHT_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHT_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHT_RVALID : IN STD_LOGIC;
        m_axi_WEIGHT_RREADY : OUT STD_LOGIC;
        m_axi_WEIGHT_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_WEIGHT_RLAST : IN STD_LOGIC;
        m_axi_WEIGHT_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHT_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHT_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_WEIGHT_BVALID : IN STD_LOGIC;
        m_axi_WEIGHT_BREADY : OUT STD_LOGIC;
        m_axi_WEIGHT_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_WEIGHT_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHT_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BIAS_AWVALID : OUT STD_LOGIC;
        m_axi_BIAS_AWREADY : IN STD_LOGIC;
        m_axi_BIAS_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_BIAS_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BIAS_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_BIAS_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_BIAS_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_BIAS_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_BIAS_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_BIAS_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_BIAS_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_BIAS_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_BIAS_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BIAS_WVALID : OUT STD_LOGIC;
        m_axi_BIAS_WREADY : IN STD_LOGIC;
        m_axi_BIAS_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_BIAS_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_BIAS_WLAST : OUT STD_LOGIC;
        m_axi_BIAS_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BIAS_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BIAS_ARVALID : OUT STD_LOGIC;
        m_axi_BIAS_ARREADY : IN STD_LOGIC;
        m_axi_BIAS_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_BIAS_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BIAS_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_BIAS_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_BIAS_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_BIAS_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_BIAS_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_BIAS_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_BIAS_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_BIAS_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_BIAS_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BIAS_RVALID : IN STD_LOGIC;
        m_axi_BIAS_RREADY : OUT STD_LOGIC;
        m_axi_BIAS_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_BIAS_RLAST : IN STD_LOGIC;
        m_axi_BIAS_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BIAS_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BIAS_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_BIAS_BVALID : IN STD_LOGIC;
        m_axi_BIAS_BREADY : OUT STD_LOGIC;
        m_axi_BIAS_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_BIAS_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BIAS_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        conv_out1_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        conv_out1_0_ce0 : OUT STD_LOGIC;
        conv_out1_0_we0 : OUT STD_LOGIC;
        conv_out1_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_out1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_out1_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        conv_out1_1_ce0 : OUT STD_LOGIC;
        conv_out1_1_we0 : OUT STD_LOGIC;
        conv_out1_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_out1_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_out1_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        conv_out1_2_ce0 : OUT STD_LOGIC;
        conv_out1_2_we0 : OUT STD_LOGIC;
        conv_out1_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_out1_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_out1_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        conv_out1_3_ce0 : OUT STD_LOGIC;
        conv_out1_3_we0 : OUT STD_LOGIC;
        conv_out1_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_out1_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_out1_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        conv_out1_4_ce0 : OUT STD_LOGIC;
        conv_out1_4_we0 : OUT STD_LOGIC;
        conv_out1_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_out1_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_out1_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        conv_out1_5_ce0 : OUT STD_LOGIC;
        conv_out1_5_we0 : OUT STD_LOGIC;
        conv_out1_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_out1_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_top_conv_outibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_top_data_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_top_data1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_top_data2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_top_data3_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    conv_out1_0_U : component conv_top_conv_outibs
    generic map (
        DataWidth => 32,
        AddressRange => 196,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv_out1_0_address0,
        ce0 => conv_out1_0_ce0,
        we0 => conv_out1_0_we0,
        d0 => conv_out1_0_d0,
        q0 => conv_out1_0_q0);

    conv_out1_1_U : component conv_top_conv_outibs
    generic map (
        DataWidth => 32,
        AddressRange => 196,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv_out1_1_address0,
        ce0 => conv_out1_1_ce0,
        we0 => conv_out1_1_we0,
        d0 => conv_out1_1_d0,
        q0 => conv_out1_1_q0);

    conv_out1_2_U : component conv_top_conv_outibs
    generic map (
        DataWidth => 32,
        AddressRange => 196,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv_out1_2_address0,
        ce0 => conv_out1_2_ce0,
        we0 => conv_out1_2_we0,
        d0 => conv_out1_2_d0,
        q0 => conv_out1_2_q0);

    conv_out1_3_U : component conv_top_conv_outibs
    generic map (
        DataWidth => 32,
        AddressRange => 196,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv_out1_3_address0,
        ce0 => conv_out1_3_ce0,
        we0 => conv_out1_3_we0,
        d0 => conv_out1_3_d0,
        q0 => conv_out1_3_q0);

    conv_out1_4_U : component conv_top_conv_outibs
    generic map (
        DataWidth => 32,
        AddressRange => 196,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv_out1_4_address0,
        ce0 => conv_out1_4_ce0,
        we0 => conv_out1_4_we0,
        d0 => conv_out1_4_d0,
        q0 => conv_out1_4_q0);

    conv_out1_5_U : component conv_top_conv_outibs
    generic map (
        DataWidth => 32,
        AddressRange => 196,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv_out1_5_address0,
        ce0 => conv_out1_5_ce0,
        we0 => conv_out1_5_we0,
        d0 => conv_out1_5_d0,
        q0 => conv_out1_5_q0);

    conv_top_data_m_axi_U : component conv_top_data_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_DATA_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_DATA_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data_AWVALID,
        AWREADY => m_axi_data_AWREADY,
        AWADDR => m_axi_data_AWADDR,
        AWID => m_axi_data_AWID,
        AWLEN => m_axi_data_AWLEN,
        AWSIZE => m_axi_data_AWSIZE,
        AWBURST => m_axi_data_AWBURST,
        AWLOCK => m_axi_data_AWLOCK,
        AWCACHE => m_axi_data_AWCACHE,
        AWPROT => m_axi_data_AWPROT,
        AWQOS => m_axi_data_AWQOS,
        AWREGION => m_axi_data_AWREGION,
        AWUSER => m_axi_data_AWUSER,
        WVALID => m_axi_data_WVALID,
        WREADY => m_axi_data_WREADY,
        WDATA => m_axi_data_WDATA,
        WSTRB => m_axi_data_WSTRB,
        WLAST => m_axi_data_WLAST,
        WID => m_axi_data_WID,
        WUSER => m_axi_data_WUSER,
        ARVALID => m_axi_data_ARVALID,
        ARREADY => m_axi_data_ARREADY,
        ARADDR => m_axi_data_ARADDR,
        ARID => m_axi_data_ARID,
        ARLEN => m_axi_data_ARLEN,
        ARSIZE => m_axi_data_ARSIZE,
        ARBURST => m_axi_data_ARBURST,
        ARLOCK => m_axi_data_ARLOCK,
        ARCACHE => m_axi_data_ARCACHE,
        ARPROT => m_axi_data_ARPROT,
        ARQOS => m_axi_data_ARQOS,
        ARREGION => m_axi_data_ARREGION,
        ARUSER => m_axi_data_ARUSER,
        RVALID => m_axi_data_RVALID,
        RREADY => m_axi_data_RREADY,
        RDATA => m_axi_data_RDATA,
        RLAST => m_axi_data_RLAST,
        RID => m_axi_data_RID,
        RUSER => m_axi_data_RUSER,
        RRESP => m_axi_data_RRESP,
        BVALID => m_axi_data_BVALID,
        BREADY => m_axi_data_BREADY,
        BRESP => m_axi_data_BRESP,
        BID => m_axi_data_BID,
        BUSER => m_axi_data_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => data_ARVALID,
        I_ARREADY => data_ARREADY,
        I_ARADDR => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARADDR,
        I_ARID => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARID,
        I_ARLEN => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARLEN,
        I_ARSIZE => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARSIZE,
        I_ARLOCK => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARLOCK,
        I_ARCACHE => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARCACHE,
        I_ARQOS => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARQOS,
        I_ARPROT => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARPROT,
        I_ARUSER => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARUSER,
        I_ARBURST => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARBURST,
        I_ARREGION => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARREGION,
        I_RVALID => data_RVALID,
        I_RREADY => data_RREADY,
        I_RDATA => data_RDATA,
        I_RID => data_RID,
        I_RUSER => data_RUSER,
        I_RRESP => data_RRESP,
        I_RLAST => data_RLAST,
        I_AWVALID => data_AWVALID,
        I_AWREADY => data_AWREADY,
        I_AWADDR => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWADDR,
        I_AWID => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWID,
        I_AWLEN => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWLEN,
        I_AWSIZE => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWSIZE,
        I_AWLOCK => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWLOCK,
        I_AWCACHE => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWCACHE,
        I_AWQOS => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWQOS,
        I_AWPROT => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWPROT,
        I_AWUSER => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWUSER,
        I_AWBURST => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWBURST,
        I_AWREGION => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWREGION,
        I_WVALID => data_WVALID,
        I_WREADY => data_WREADY,
        I_WDATA => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_WDATA,
        I_WID => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_WID,
        I_WUSER => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_WUSER,
        I_WLAST => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_WLAST,
        I_WSTRB => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_WSTRB,
        I_BVALID => data_BVALID,
        I_BREADY => data_BREADY,
        I_BRESP => data_BRESP,
        I_BID => data_BID,
        I_BUSER => data_BUSER);

    conv_top_data1_m_axi_U : component conv_top_data1_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA1_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_DATA1_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_DATA1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data1_AWVALID,
        AWREADY => m_axi_data1_AWREADY,
        AWADDR => m_axi_data1_AWADDR,
        AWID => m_axi_data1_AWID,
        AWLEN => m_axi_data1_AWLEN,
        AWSIZE => m_axi_data1_AWSIZE,
        AWBURST => m_axi_data1_AWBURST,
        AWLOCK => m_axi_data1_AWLOCK,
        AWCACHE => m_axi_data1_AWCACHE,
        AWPROT => m_axi_data1_AWPROT,
        AWQOS => m_axi_data1_AWQOS,
        AWREGION => m_axi_data1_AWREGION,
        AWUSER => m_axi_data1_AWUSER,
        WVALID => m_axi_data1_WVALID,
        WREADY => m_axi_data1_WREADY,
        WDATA => m_axi_data1_WDATA,
        WSTRB => m_axi_data1_WSTRB,
        WLAST => m_axi_data1_WLAST,
        WID => m_axi_data1_WID,
        WUSER => m_axi_data1_WUSER,
        ARVALID => m_axi_data1_ARVALID,
        ARREADY => m_axi_data1_ARREADY,
        ARADDR => m_axi_data1_ARADDR,
        ARID => m_axi_data1_ARID,
        ARLEN => m_axi_data1_ARLEN,
        ARSIZE => m_axi_data1_ARSIZE,
        ARBURST => m_axi_data1_ARBURST,
        ARLOCK => m_axi_data1_ARLOCK,
        ARCACHE => m_axi_data1_ARCACHE,
        ARPROT => m_axi_data1_ARPROT,
        ARQOS => m_axi_data1_ARQOS,
        ARREGION => m_axi_data1_ARREGION,
        ARUSER => m_axi_data1_ARUSER,
        RVALID => m_axi_data1_RVALID,
        RREADY => m_axi_data1_RREADY,
        RDATA => m_axi_data1_RDATA,
        RLAST => m_axi_data1_RLAST,
        RID => m_axi_data1_RID,
        RUSER => m_axi_data1_RUSER,
        RRESP => m_axi_data1_RRESP,
        BVALID => m_axi_data1_BVALID,
        BREADY => m_axi_data1_BREADY,
        BRESP => m_axi_data1_BRESP,
        BID => m_axi_data1_BID,
        BUSER => m_axi_data1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => data1_ARVALID,
        I_ARREADY => data1_ARREADY,
        I_ARADDR => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARADDR,
        I_ARID => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARID,
        I_ARLEN => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARLEN,
        I_ARSIZE => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARSIZE,
        I_ARLOCK => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARLOCK,
        I_ARCACHE => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARCACHE,
        I_ARQOS => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARQOS,
        I_ARPROT => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARPROT,
        I_ARUSER => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARUSER,
        I_ARBURST => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARBURST,
        I_ARREGION => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARREGION,
        I_RVALID => data1_RVALID,
        I_RREADY => data1_RREADY,
        I_RDATA => data1_RDATA,
        I_RID => data1_RID,
        I_RUSER => data1_RUSER,
        I_RRESP => data1_RRESP,
        I_RLAST => data1_RLAST,
        I_AWVALID => data1_AWVALID,
        I_AWREADY => data1_AWREADY,
        I_AWADDR => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWADDR,
        I_AWID => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWID,
        I_AWLEN => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWLEN,
        I_AWSIZE => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWSIZE,
        I_AWLOCK => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWLOCK,
        I_AWCACHE => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWCACHE,
        I_AWQOS => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWQOS,
        I_AWPROT => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWPROT,
        I_AWUSER => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWUSER,
        I_AWBURST => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWBURST,
        I_AWREGION => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWREGION,
        I_WVALID => data1_WVALID,
        I_WREADY => data1_WREADY,
        I_WDATA => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_WDATA,
        I_WID => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_WID,
        I_WUSER => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_WUSER,
        I_WLAST => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_WLAST,
        I_WSTRB => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_WSTRB,
        I_BVALID => data1_BVALID,
        I_BREADY => data1_BREADY,
        I_BRESP => data1_BRESP,
        I_BID => data1_BID,
        I_BUSER => data1_BUSER);

    conv_top_data2_m_axi_U : component conv_top_data2_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA2_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_DATA2_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_DATA2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data2_AWVALID,
        AWREADY => m_axi_data2_AWREADY,
        AWADDR => m_axi_data2_AWADDR,
        AWID => m_axi_data2_AWID,
        AWLEN => m_axi_data2_AWLEN,
        AWSIZE => m_axi_data2_AWSIZE,
        AWBURST => m_axi_data2_AWBURST,
        AWLOCK => m_axi_data2_AWLOCK,
        AWCACHE => m_axi_data2_AWCACHE,
        AWPROT => m_axi_data2_AWPROT,
        AWQOS => m_axi_data2_AWQOS,
        AWREGION => m_axi_data2_AWREGION,
        AWUSER => m_axi_data2_AWUSER,
        WVALID => m_axi_data2_WVALID,
        WREADY => m_axi_data2_WREADY,
        WDATA => m_axi_data2_WDATA,
        WSTRB => m_axi_data2_WSTRB,
        WLAST => m_axi_data2_WLAST,
        WID => m_axi_data2_WID,
        WUSER => m_axi_data2_WUSER,
        ARVALID => m_axi_data2_ARVALID,
        ARREADY => m_axi_data2_ARREADY,
        ARADDR => m_axi_data2_ARADDR,
        ARID => m_axi_data2_ARID,
        ARLEN => m_axi_data2_ARLEN,
        ARSIZE => m_axi_data2_ARSIZE,
        ARBURST => m_axi_data2_ARBURST,
        ARLOCK => m_axi_data2_ARLOCK,
        ARCACHE => m_axi_data2_ARCACHE,
        ARPROT => m_axi_data2_ARPROT,
        ARQOS => m_axi_data2_ARQOS,
        ARREGION => m_axi_data2_ARREGION,
        ARUSER => m_axi_data2_ARUSER,
        RVALID => m_axi_data2_RVALID,
        RREADY => m_axi_data2_RREADY,
        RDATA => m_axi_data2_RDATA,
        RLAST => m_axi_data2_RLAST,
        RID => m_axi_data2_RID,
        RUSER => m_axi_data2_RUSER,
        RRESP => m_axi_data2_RRESP,
        BVALID => m_axi_data2_BVALID,
        BREADY => m_axi_data2_BREADY,
        BRESP => m_axi_data2_BRESP,
        BID => m_axi_data2_BID,
        BUSER => m_axi_data2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => data2_ARVALID,
        I_ARREADY => data2_ARREADY,
        I_ARADDR => data2_ARADDR,
        I_ARID => data2_ARID,
        I_ARLEN => data2_ARLEN,
        I_ARSIZE => data2_ARSIZE,
        I_ARLOCK => data2_ARLOCK,
        I_ARCACHE => data2_ARCACHE,
        I_ARQOS => data2_ARQOS,
        I_ARPROT => data2_ARPROT,
        I_ARUSER => data2_ARUSER,
        I_ARBURST => data2_ARBURST,
        I_ARREGION => data2_ARREGION,
        I_RVALID => data2_RVALID,
        I_RREADY => data2_RREADY,
        I_RDATA => data2_RDATA,
        I_RID => data2_RID,
        I_RUSER => data2_RUSER,
        I_RRESP => data2_RRESP,
        I_RLAST => data2_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data2_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data2_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => data2_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data2_BRESP,
        I_BID => data2_BID,
        I_BUSER => data2_BUSER);

    conv_top_data3_m_axi_U : component conv_top_data3_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA3_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA3_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA3_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA3_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA3_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA3_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA3_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA3_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_DATA3_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_DATA3_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA3_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA3_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data3_AWVALID,
        AWREADY => m_axi_data3_AWREADY,
        AWADDR => m_axi_data3_AWADDR,
        AWID => m_axi_data3_AWID,
        AWLEN => m_axi_data3_AWLEN,
        AWSIZE => m_axi_data3_AWSIZE,
        AWBURST => m_axi_data3_AWBURST,
        AWLOCK => m_axi_data3_AWLOCK,
        AWCACHE => m_axi_data3_AWCACHE,
        AWPROT => m_axi_data3_AWPROT,
        AWQOS => m_axi_data3_AWQOS,
        AWREGION => m_axi_data3_AWREGION,
        AWUSER => m_axi_data3_AWUSER,
        WVALID => m_axi_data3_WVALID,
        WREADY => m_axi_data3_WREADY,
        WDATA => m_axi_data3_WDATA,
        WSTRB => m_axi_data3_WSTRB,
        WLAST => m_axi_data3_WLAST,
        WID => m_axi_data3_WID,
        WUSER => m_axi_data3_WUSER,
        ARVALID => m_axi_data3_ARVALID,
        ARREADY => m_axi_data3_ARREADY,
        ARADDR => m_axi_data3_ARADDR,
        ARID => m_axi_data3_ARID,
        ARLEN => m_axi_data3_ARLEN,
        ARSIZE => m_axi_data3_ARSIZE,
        ARBURST => m_axi_data3_ARBURST,
        ARLOCK => m_axi_data3_ARLOCK,
        ARCACHE => m_axi_data3_ARCACHE,
        ARPROT => m_axi_data3_ARPROT,
        ARQOS => m_axi_data3_ARQOS,
        ARREGION => m_axi_data3_ARREGION,
        ARUSER => m_axi_data3_ARUSER,
        RVALID => m_axi_data3_RVALID,
        RREADY => m_axi_data3_RREADY,
        RDATA => m_axi_data3_RDATA,
        RLAST => m_axi_data3_RLAST,
        RID => m_axi_data3_RID,
        RUSER => m_axi_data3_RUSER,
        RRESP => m_axi_data3_RRESP,
        BVALID => m_axi_data3_BVALID,
        BREADY => m_axi_data3_BREADY,
        BRESP => m_axi_data3_BRESP,
        BID => m_axi_data3_BID,
        BUSER => m_axi_data3_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => data3_ARVALID,
        I_ARREADY => data3_ARREADY,
        I_ARADDR => data3_ARADDR,
        I_ARID => data3_ARID,
        I_ARLEN => data3_ARLEN,
        I_ARSIZE => data3_ARSIZE,
        I_ARLOCK => data3_ARLOCK,
        I_ARCACHE => data3_ARCACHE,
        I_ARQOS => data3_ARQOS,
        I_ARPROT => data3_ARPROT,
        I_ARUSER => data3_ARUSER,
        I_ARBURST => data3_ARBURST,
        I_ARREGION => data3_ARREGION,
        I_RVALID => data3_RVALID,
        I_RREADY => data3_RREADY,
        I_RDATA => data3_RDATA,
        I_RID => data3_RID,
        I_RUSER => data3_RUSER,
        I_RRESP => data3_RRESP,
        I_RLAST => data3_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data3_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data3_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => data3_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data3_BRESP,
        I_BID => data3_BID,
        I_BUSER => data3_BUSER);

    grp_conv2_fu_370 : component conv2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv2_fu_370_ap_start,
        ap_done => grp_conv2_fu_370_ap_done,
        ap_idle => grp_conv2_fu_370_ap_idle,
        ap_ready => grp_conv2_fu_370_ap_ready,
        m_axi_FM_DDR_BUFF1_AWVALID => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWVALID,
        m_axi_FM_DDR_BUFF1_AWREADY => data_AWREADY,
        m_axi_FM_DDR_BUFF1_AWADDR => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWADDR,
        m_axi_FM_DDR_BUFF1_AWID => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWID,
        m_axi_FM_DDR_BUFF1_AWLEN => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWLEN,
        m_axi_FM_DDR_BUFF1_AWSIZE => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWSIZE,
        m_axi_FM_DDR_BUFF1_AWBURST => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWBURST,
        m_axi_FM_DDR_BUFF1_AWLOCK => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWLOCK,
        m_axi_FM_DDR_BUFF1_AWCACHE => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWCACHE,
        m_axi_FM_DDR_BUFF1_AWPROT => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWPROT,
        m_axi_FM_DDR_BUFF1_AWQOS => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWQOS,
        m_axi_FM_DDR_BUFF1_AWREGION => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWREGION,
        m_axi_FM_DDR_BUFF1_AWUSER => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWUSER,
        m_axi_FM_DDR_BUFF1_WVALID => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_WVALID,
        m_axi_FM_DDR_BUFF1_WREADY => data_WREADY,
        m_axi_FM_DDR_BUFF1_WDATA => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_WDATA,
        m_axi_FM_DDR_BUFF1_WSTRB => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_WSTRB,
        m_axi_FM_DDR_BUFF1_WLAST => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_WLAST,
        m_axi_FM_DDR_BUFF1_WID => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_WID,
        m_axi_FM_DDR_BUFF1_WUSER => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_WUSER,
        m_axi_FM_DDR_BUFF1_ARVALID => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_ARVALID,
        m_axi_FM_DDR_BUFF1_ARREADY => ap_const_logic_0,
        m_axi_FM_DDR_BUFF1_ARADDR => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_ARADDR,
        m_axi_FM_DDR_BUFF1_ARID => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_ARID,
        m_axi_FM_DDR_BUFF1_ARLEN => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_ARLEN,
        m_axi_FM_DDR_BUFF1_ARSIZE => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_ARSIZE,
        m_axi_FM_DDR_BUFF1_ARBURST => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_ARBURST,
        m_axi_FM_DDR_BUFF1_ARLOCK => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_ARLOCK,
        m_axi_FM_DDR_BUFF1_ARCACHE => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_ARCACHE,
        m_axi_FM_DDR_BUFF1_ARPROT => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_ARPROT,
        m_axi_FM_DDR_BUFF1_ARQOS => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_ARQOS,
        m_axi_FM_DDR_BUFF1_ARREGION => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_ARREGION,
        m_axi_FM_DDR_BUFF1_ARUSER => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_ARUSER,
        m_axi_FM_DDR_BUFF1_RVALID => ap_const_logic_0,
        m_axi_FM_DDR_BUFF1_RREADY => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_RREADY,
        m_axi_FM_DDR_BUFF1_RDATA => ap_const_lv32_0,
        m_axi_FM_DDR_BUFF1_RLAST => ap_const_logic_0,
        m_axi_FM_DDR_BUFF1_RID => ap_const_lv1_0,
        m_axi_FM_DDR_BUFF1_RUSER => ap_const_lv1_0,
        m_axi_FM_DDR_BUFF1_RRESP => ap_const_lv2_0,
        m_axi_FM_DDR_BUFF1_BVALID => data_BVALID,
        m_axi_FM_DDR_BUFF1_BREADY => grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_BREADY,
        m_axi_FM_DDR_BUFF1_BRESP => data_BRESP,
        m_axi_FM_DDR_BUFF1_BID => data_BID,
        m_axi_FM_DDR_BUFF1_BUSER => data_BUSER,
        m_axi_FM_DDR_BUFF2_AWVALID => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_AWVALID,
        m_axi_FM_DDR_BUFF2_AWREADY => ap_const_logic_0,
        m_axi_FM_DDR_BUFF2_AWADDR => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_AWADDR,
        m_axi_FM_DDR_BUFF2_AWID => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_AWID,
        m_axi_FM_DDR_BUFF2_AWLEN => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_AWLEN,
        m_axi_FM_DDR_BUFF2_AWSIZE => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_AWSIZE,
        m_axi_FM_DDR_BUFF2_AWBURST => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_AWBURST,
        m_axi_FM_DDR_BUFF2_AWLOCK => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_AWLOCK,
        m_axi_FM_DDR_BUFF2_AWCACHE => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_AWCACHE,
        m_axi_FM_DDR_BUFF2_AWPROT => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_AWPROT,
        m_axi_FM_DDR_BUFF2_AWQOS => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_AWQOS,
        m_axi_FM_DDR_BUFF2_AWREGION => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_AWREGION,
        m_axi_FM_DDR_BUFF2_AWUSER => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_AWUSER,
        m_axi_FM_DDR_BUFF2_WVALID => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_WVALID,
        m_axi_FM_DDR_BUFF2_WREADY => ap_const_logic_0,
        m_axi_FM_DDR_BUFF2_WDATA => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_WDATA,
        m_axi_FM_DDR_BUFF2_WSTRB => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_WSTRB,
        m_axi_FM_DDR_BUFF2_WLAST => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_WLAST,
        m_axi_FM_DDR_BUFF2_WID => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_WID,
        m_axi_FM_DDR_BUFF2_WUSER => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_WUSER,
        m_axi_FM_DDR_BUFF2_ARVALID => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARVALID,
        m_axi_FM_DDR_BUFF2_ARREADY => data1_ARREADY,
        m_axi_FM_DDR_BUFF2_ARADDR => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARADDR,
        m_axi_FM_DDR_BUFF2_ARID => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARID,
        m_axi_FM_DDR_BUFF2_ARLEN => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARLEN,
        m_axi_FM_DDR_BUFF2_ARSIZE => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARSIZE,
        m_axi_FM_DDR_BUFF2_ARBURST => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARBURST,
        m_axi_FM_DDR_BUFF2_ARLOCK => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARLOCK,
        m_axi_FM_DDR_BUFF2_ARCACHE => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARCACHE,
        m_axi_FM_DDR_BUFF2_ARPROT => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARPROT,
        m_axi_FM_DDR_BUFF2_ARQOS => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARQOS,
        m_axi_FM_DDR_BUFF2_ARREGION => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARREGION,
        m_axi_FM_DDR_BUFF2_ARUSER => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARUSER,
        m_axi_FM_DDR_BUFF2_RVALID => data1_RVALID,
        m_axi_FM_DDR_BUFF2_RREADY => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_RREADY,
        m_axi_FM_DDR_BUFF2_RDATA => data1_RDATA,
        m_axi_FM_DDR_BUFF2_RLAST => data1_RLAST,
        m_axi_FM_DDR_BUFF2_RID => data1_RID,
        m_axi_FM_DDR_BUFF2_RUSER => data1_RUSER,
        m_axi_FM_DDR_BUFF2_RRESP => data1_RRESP,
        m_axi_FM_DDR_BUFF2_BVALID => ap_const_logic_0,
        m_axi_FM_DDR_BUFF2_BREADY => grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_BREADY,
        m_axi_FM_DDR_BUFF2_BRESP => ap_const_lv2_0,
        m_axi_FM_DDR_BUFF2_BID => ap_const_lv1_0,
        m_axi_FM_DDR_BUFF2_BUSER => ap_const_lv1_0,
        m_axi_WEIGHT_AWVALID => grp_conv2_fu_370_m_axi_WEIGHT_AWVALID,
        m_axi_WEIGHT_AWREADY => ap_const_logic_0,
        m_axi_WEIGHT_AWADDR => grp_conv2_fu_370_m_axi_WEIGHT_AWADDR,
        m_axi_WEIGHT_AWID => grp_conv2_fu_370_m_axi_WEIGHT_AWID,
        m_axi_WEIGHT_AWLEN => grp_conv2_fu_370_m_axi_WEIGHT_AWLEN,
        m_axi_WEIGHT_AWSIZE => grp_conv2_fu_370_m_axi_WEIGHT_AWSIZE,
        m_axi_WEIGHT_AWBURST => grp_conv2_fu_370_m_axi_WEIGHT_AWBURST,
        m_axi_WEIGHT_AWLOCK => grp_conv2_fu_370_m_axi_WEIGHT_AWLOCK,
        m_axi_WEIGHT_AWCACHE => grp_conv2_fu_370_m_axi_WEIGHT_AWCACHE,
        m_axi_WEIGHT_AWPROT => grp_conv2_fu_370_m_axi_WEIGHT_AWPROT,
        m_axi_WEIGHT_AWQOS => grp_conv2_fu_370_m_axi_WEIGHT_AWQOS,
        m_axi_WEIGHT_AWREGION => grp_conv2_fu_370_m_axi_WEIGHT_AWREGION,
        m_axi_WEIGHT_AWUSER => grp_conv2_fu_370_m_axi_WEIGHT_AWUSER,
        m_axi_WEIGHT_WVALID => grp_conv2_fu_370_m_axi_WEIGHT_WVALID,
        m_axi_WEIGHT_WREADY => ap_const_logic_0,
        m_axi_WEIGHT_WDATA => grp_conv2_fu_370_m_axi_WEIGHT_WDATA,
        m_axi_WEIGHT_WSTRB => grp_conv2_fu_370_m_axi_WEIGHT_WSTRB,
        m_axi_WEIGHT_WLAST => grp_conv2_fu_370_m_axi_WEIGHT_WLAST,
        m_axi_WEIGHT_WID => grp_conv2_fu_370_m_axi_WEIGHT_WID,
        m_axi_WEIGHT_WUSER => grp_conv2_fu_370_m_axi_WEIGHT_WUSER,
        m_axi_WEIGHT_ARVALID => grp_conv2_fu_370_m_axi_WEIGHT_ARVALID,
        m_axi_WEIGHT_ARREADY => data2_ARREADY,
        m_axi_WEIGHT_ARADDR => grp_conv2_fu_370_m_axi_WEIGHT_ARADDR,
        m_axi_WEIGHT_ARID => grp_conv2_fu_370_m_axi_WEIGHT_ARID,
        m_axi_WEIGHT_ARLEN => grp_conv2_fu_370_m_axi_WEIGHT_ARLEN,
        m_axi_WEIGHT_ARSIZE => grp_conv2_fu_370_m_axi_WEIGHT_ARSIZE,
        m_axi_WEIGHT_ARBURST => grp_conv2_fu_370_m_axi_WEIGHT_ARBURST,
        m_axi_WEIGHT_ARLOCK => grp_conv2_fu_370_m_axi_WEIGHT_ARLOCK,
        m_axi_WEIGHT_ARCACHE => grp_conv2_fu_370_m_axi_WEIGHT_ARCACHE,
        m_axi_WEIGHT_ARPROT => grp_conv2_fu_370_m_axi_WEIGHT_ARPROT,
        m_axi_WEIGHT_ARQOS => grp_conv2_fu_370_m_axi_WEIGHT_ARQOS,
        m_axi_WEIGHT_ARREGION => grp_conv2_fu_370_m_axi_WEIGHT_ARREGION,
        m_axi_WEIGHT_ARUSER => grp_conv2_fu_370_m_axi_WEIGHT_ARUSER,
        m_axi_WEIGHT_RVALID => data2_RVALID,
        m_axi_WEIGHT_RREADY => grp_conv2_fu_370_m_axi_WEIGHT_RREADY,
        m_axi_WEIGHT_RDATA => data2_RDATA,
        m_axi_WEIGHT_RLAST => data2_RLAST,
        m_axi_WEIGHT_RID => data2_RID,
        m_axi_WEIGHT_RUSER => data2_RUSER,
        m_axi_WEIGHT_RRESP => data2_RRESP,
        m_axi_WEIGHT_BVALID => ap_const_logic_0,
        m_axi_WEIGHT_BREADY => grp_conv2_fu_370_m_axi_WEIGHT_BREADY,
        m_axi_WEIGHT_BRESP => ap_const_lv2_0,
        m_axi_WEIGHT_BID => ap_const_lv1_0,
        m_axi_WEIGHT_BUSER => ap_const_lv1_0,
        m_axi_BIAS_AWVALID => grp_conv2_fu_370_m_axi_BIAS_AWVALID,
        m_axi_BIAS_AWREADY => ap_const_logic_0,
        m_axi_BIAS_AWADDR => grp_conv2_fu_370_m_axi_BIAS_AWADDR,
        m_axi_BIAS_AWID => grp_conv2_fu_370_m_axi_BIAS_AWID,
        m_axi_BIAS_AWLEN => grp_conv2_fu_370_m_axi_BIAS_AWLEN,
        m_axi_BIAS_AWSIZE => grp_conv2_fu_370_m_axi_BIAS_AWSIZE,
        m_axi_BIAS_AWBURST => grp_conv2_fu_370_m_axi_BIAS_AWBURST,
        m_axi_BIAS_AWLOCK => grp_conv2_fu_370_m_axi_BIAS_AWLOCK,
        m_axi_BIAS_AWCACHE => grp_conv2_fu_370_m_axi_BIAS_AWCACHE,
        m_axi_BIAS_AWPROT => grp_conv2_fu_370_m_axi_BIAS_AWPROT,
        m_axi_BIAS_AWQOS => grp_conv2_fu_370_m_axi_BIAS_AWQOS,
        m_axi_BIAS_AWREGION => grp_conv2_fu_370_m_axi_BIAS_AWREGION,
        m_axi_BIAS_AWUSER => grp_conv2_fu_370_m_axi_BIAS_AWUSER,
        m_axi_BIAS_WVALID => grp_conv2_fu_370_m_axi_BIAS_WVALID,
        m_axi_BIAS_WREADY => ap_const_logic_0,
        m_axi_BIAS_WDATA => grp_conv2_fu_370_m_axi_BIAS_WDATA,
        m_axi_BIAS_WSTRB => grp_conv2_fu_370_m_axi_BIAS_WSTRB,
        m_axi_BIAS_WLAST => grp_conv2_fu_370_m_axi_BIAS_WLAST,
        m_axi_BIAS_WID => grp_conv2_fu_370_m_axi_BIAS_WID,
        m_axi_BIAS_WUSER => grp_conv2_fu_370_m_axi_BIAS_WUSER,
        m_axi_BIAS_ARVALID => grp_conv2_fu_370_m_axi_BIAS_ARVALID,
        m_axi_BIAS_ARREADY => data3_ARREADY,
        m_axi_BIAS_ARADDR => grp_conv2_fu_370_m_axi_BIAS_ARADDR,
        m_axi_BIAS_ARID => grp_conv2_fu_370_m_axi_BIAS_ARID,
        m_axi_BIAS_ARLEN => grp_conv2_fu_370_m_axi_BIAS_ARLEN,
        m_axi_BIAS_ARSIZE => grp_conv2_fu_370_m_axi_BIAS_ARSIZE,
        m_axi_BIAS_ARBURST => grp_conv2_fu_370_m_axi_BIAS_ARBURST,
        m_axi_BIAS_ARLOCK => grp_conv2_fu_370_m_axi_BIAS_ARLOCK,
        m_axi_BIAS_ARCACHE => grp_conv2_fu_370_m_axi_BIAS_ARCACHE,
        m_axi_BIAS_ARPROT => grp_conv2_fu_370_m_axi_BIAS_ARPROT,
        m_axi_BIAS_ARQOS => grp_conv2_fu_370_m_axi_BIAS_ARQOS,
        m_axi_BIAS_ARREGION => grp_conv2_fu_370_m_axi_BIAS_ARREGION,
        m_axi_BIAS_ARUSER => grp_conv2_fu_370_m_axi_BIAS_ARUSER,
        m_axi_BIAS_RVALID => data3_RVALID,
        m_axi_BIAS_RREADY => grp_conv2_fu_370_m_axi_BIAS_RREADY,
        m_axi_BIAS_RDATA => data3_RDATA,
        m_axi_BIAS_RLAST => data3_RLAST,
        m_axi_BIAS_RID => data3_RID,
        m_axi_BIAS_RUSER => data3_RUSER,
        m_axi_BIAS_RRESP => data3_RRESP,
        m_axi_BIAS_BVALID => ap_const_logic_0,
        m_axi_BIAS_BREADY => grp_conv2_fu_370_m_axi_BIAS_BREADY,
        m_axi_BIAS_BRESP => ap_const_lv2_0,
        m_axi_BIAS_BID => ap_const_lv1_0,
        m_axi_BIAS_BUSER => ap_const_lv1_0,
        conv_out1_0_address0 => grp_conv2_fu_370_conv_out1_0_address0,
        conv_out1_0_ce0 => grp_conv2_fu_370_conv_out1_0_ce0,
        conv_out1_0_we0 => grp_conv2_fu_370_conv_out1_0_we0,
        conv_out1_0_d0 => grp_conv2_fu_370_conv_out1_0_d0,
        conv_out1_0_q0 => conv_out1_0_q0,
        conv_out1_1_address0 => grp_conv2_fu_370_conv_out1_1_address0,
        conv_out1_1_ce0 => grp_conv2_fu_370_conv_out1_1_ce0,
        conv_out1_1_we0 => grp_conv2_fu_370_conv_out1_1_we0,
        conv_out1_1_d0 => grp_conv2_fu_370_conv_out1_1_d0,
        conv_out1_1_q0 => conv_out1_1_q0,
        conv_out1_2_address0 => grp_conv2_fu_370_conv_out1_2_address0,
        conv_out1_2_ce0 => grp_conv2_fu_370_conv_out1_2_ce0,
        conv_out1_2_we0 => grp_conv2_fu_370_conv_out1_2_we0,
        conv_out1_2_d0 => grp_conv2_fu_370_conv_out1_2_d0,
        conv_out1_2_q0 => conv_out1_2_q0,
        conv_out1_3_address0 => grp_conv2_fu_370_conv_out1_3_address0,
        conv_out1_3_ce0 => grp_conv2_fu_370_conv_out1_3_ce0,
        conv_out1_3_we0 => grp_conv2_fu_370_conv_out1_3_we0,
        conv_out1_3_d0 => grp_conv2_fu_370_conv_out1_3_d0,
        conv_out1_3_q0 => conv_out1_3_q0,
        conv_out1_4_address0 => grp_conv2_fu_370_conv_out1_4_address0,
        conv_out1_4_ce0 => grp_conv2_fu_370_conv_out1_4_ce0,
        conv_out1_4_we0 => grp_conv2_fu_370_conv_out1_4_we0,
        conv_out1_4_d0 => grp_conv2_fu_370_conv_out1_4_d0,
        conv_out1_4_q0 => conv_out1_4_q0,
        conv_out1_5_address0 => grp_conv2_fu_370_conv_out1_5_address0,
        conv_out1_5_ce0 => grp_conv2_fu_370_conv_out1_5_ce0,
        conv_out1_5_we0 => grp_conv2_fu_370_conv_out1_5_we0,
        conv_out1_5_d0 => grp_conv2_fu_370_conv_out1_5_d0,
        conv_out1_5_q0 => conv_out1_5_q0);

    grp_conv1_fu_682 : component conv1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv1_fu_682_ap_start,
        ap_done => grp_conv1_fu_682_ap_done,
        ap_idle => grp_conv1_fu_682_ap_idle,
        ap_ready => grp_conv1_fu_682_ap_ready,
        m_axi_FM_DDR_BUFF1_AWVALID => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_AWVALID,
        m_axi_FM_DDR_BUFF1_AWREADY => ap_const_logic_0,
        m_axi_FM_DDR_BUFF1_AWADDR => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_AWADDR,
        m_axi_FM_DDR_BUFF1_AWID => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_AWID,
        m_axi_FM_DDR_BUFF1_AWLEN => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_AWLEN,
        m_axi_FM_DDR_BUFF1_AWSIZE => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_AWSIZE,
        m_axi_FM_DDR_BUFF1_AWBURST => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_AWBURST,
        m_axi_FM_DDR_BUFF1_AWLOCK => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_AWLOCK,
        m_axi_FM_DDR_BUFF1_AWCACHE => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_AWCACHE,
        m_axi_FM_DDR_BUFF1_AWPROT => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_AWPROT,
        m_axi_FM_DDR_BUFF1_AWQOS => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_AWQOS,
        m_axi_FM_DDR_BUFF1_AWREGION => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_AWREGION,
        m_axi_FM_DDR_BUFF1_AWUSER => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_AWUSER,
        m_axi_FM_DDR_BUFF1_WVALID => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_WVALID,
        m_axi_FM_DDR_BUFF1_WREADY => ap_const_logic_0,
        m_axi_FM_DDR_BUFF1_WDATA => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_WDATA,
        m_axi_FM_DDR_BUFF1_WSTRB => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_WSTRB,
        m_axi_FM_DDR_BUFF1_WLAST => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_WLAST,
        m_axi_FM_DDR_BUFF1_WID => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_WID,
        m_axi_FM_DDR_BUFF1_WUSER => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_WUSER,
        m_axi_FM_DDR_BUFF1_ARVALID => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARVALID,
        m_axi_FM_DDR_BUFF1_ARREADY => data_ARREADY,
        m_axi_FM_DDR_BUFF1_ARADDR => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARADDR,
        m_axi_FM_DDR_BUFF1_ARID => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARID,
        m_axi_FM_DDR_BUFF1_ARLEN => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARLEN,
        m_axi_FM_DDR_BUFF1_ARSIZE => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARSIZE,
        m_axi_FM_DDR_BUFF1_ARBURST => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARBURST,
        m_axi_FM_DDR_BUFF1_ARLOCK => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARLOCK,
        m_axi_FM_DDR_BUFF1_ARCACHE => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARCACHE,
        m_axi_FM_DDR_BUFF1_ARPROT => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARPROT,
        m_axi_FM_DDR_BUFF1_ARQOS => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARQOS,
        m_axi_FM_DDR_BUFF1_ARREGION => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARREGION,
        m_axi_FM_DDR_BUFF1_ARUSER => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARUSER,
        m_axi_FM_DDR_BUFF1_RVALID => data_RVALID,
        m_axi_FM_DDR_BUFF1_RREADY => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_RREADY,
        m_axi_FM_DDR_BUFF1_RDATA => data_RDATA,
        m_axi_FM_DDR_BUFF1_RLAST => data_RLAST,
        m_axi_FM_DDR_BUFF1_RID => data_RID,
        m_axi_FM_DDR_BUFF1_RUSER => data_RUSER,
        m_axi_FM_DDR_BUFF1_RRESP => data_RRESP,
        m_axi_FM_DDR_BUFF1_BVALID => ap_const_logic_0,
        m_axi_FM_DDR_BUFF1_BREADY => grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_BREADY,
        m_axi_FM_DDR_BUFF1_BRESP => ap_const_lv2_0,
        m_axi_FM_DDR_BUFF1_BID => ap_const_lv1_0,
        m_axi_FM_DDR_BUFF1_BUSER => ap_const_lv1_0,
        m_axi_FM_DDR_BUFF2_AWVALID => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWVALID,
        m_axi_FM_DDR_BUFF2_AWREADY => data1_AWREADY,
        m_axi_FM_DDR_BUFF2_AWADDR => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWADDR,
        m_axi_FM_DDR_BUFF2_AWID => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWID,
        m_axi_FM_DDR_BUFF2_AWLEN => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWLEN,
        m_axi_FM_DDR_BUFF2_AWSIZE => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWSIZE,
        m_axi_FM_DDR_BUFF2_AWBURST => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWBURST,
        m_axi_FM_DDR_BUFF2_AWLOCK => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWLOCK,
        m_axi_FM_DDR_BUFF2_AWCACHE => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWCACHE,
        m_axi_FM_DDR_BUFF2_AWPROT => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWPROT,
        m_axi_FM_DDR_BUFF2_AWQOS => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWQOS,
        m_axi_FM_DDR_BUFF2_AWREGION => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWREGION,
        m_axi_FM_DDR_BUFF2_AWUSER => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWUSER,
        m_axi_FM_DDR_BUFF2_WVALID => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_WVALID,
        m_axi_FM_DDR_BUFF2_WREADY => data1_WREADY,
        m_axi_FM_DDR_BUFF2_WDATA => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_WDATA,
        m_axi_FM_DDR_BUFF2_WSTRB => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_WSTRB,
        m_axi_FM_DDR_BUFF2_WLAST => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_WLAST,
        m_axi_FM_DDR_BUFF2_WID => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_WID,
        m_axi_FM_DDR_BUFF2_WUSER => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_WUSER,
        m_axi_FM_DDR_BUFF2_ARVALID => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_ARVALID,
        m_axi_FM_DDR_BUFF2_ARREADY => ap_const_logic_0,
        m_axi_FM_DDR_BUFF2_ARADDR => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_ARADDR,
        m_axi_FM_DDR_BUFF2_ARID => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_ARID,
        m_axi_FM_DDR_BUFF2_ARLEN => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_ARLEN,
        m_axi_FM_DDR_BUFF2_ARSIZE => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_ARSIZE,
        m_axi_FM_DDR_BUFF2_ARBURST => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_ARBURST,
        m_axi_FM_DDR_BUFF2_ARLOCK => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_ARLOCK,
        m_axi_FM_DDR_BUFF2_ARCACHE => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_ARCACHE,
        m_axi_FM_DDR_BUFF2_ARPROT => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_ARPROT,
        m_axi_FM_DDR_BUFF2_ARQOS => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_ARQOS,
        m_axi_FM_DDR_BUFF2_ARREGION => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_ARREGION,
        m_axi_FM_DDR_BUFF2_ARUSER => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_ARUSER,
        m_axi_FM_DDR_BUFF2_RVALID => ap_const_logic_0,
        m_axi_FM_DDR_BUFF2_RREADY => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_RREADY,
        m_axi_FM_DDR_BUFF2_RDATA => ap_const_lv32_0,
        m_axi_FM_DDR_BUFF2_RLAST => ap_const_logic_0,
        m_axi_FM_DDR_BUFF2_RID => ap_const_lv1_0,
        m_axi_FM_DDR_BUFF2_RUSER => ap_const_lv1_0,
        m_axi_FM_DDR_BUFF2_RRESP => ap_const_lv2_0,
        m_axi_FM_DDR_BUFF2_BVALID => data1_BVALID,
        m_axi_FM_DDR_BUFF2_BREADY => grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_BREADY,
        m_axi_FM_DDR_BUFF2_BRESP => data1_BRESP,
        m_axi_FM_DDR_BUFF2_BID => data1_BID,
        m_axi_FM_DDR_BUFF2_BUSER => data1_BUSER,
        m_axi_WEIGHT_AWVALID => grp_conv1_fu_682_m_axi_WEIGHT_AWVALID,
        m_axi_WEIGHT_AWREADY => ap_const_logic_0,
        m_axi_WEIGHT_AWADDR => grp_conv1_fu_682_m_axi_WEIGHT_AWADDR,
        m_axi_WEIGHT_AWID => grp_conv1_fu_682_m_axi_WEIGHT_AWID,
        m_axi_WEIGHT_AWLEN => grp_conv1_fu_682_m_axi_WEIGHT_AWLEN,
        m_axi_WEIGHT_AWSIZE => grp_conv1_fu_682_m_axi_WEIGHT_AWSIZE,
        m_axi_WEIGHT_AWBURST => grp_conv1_fu_682_m_axi_WEIGHT_AWBURST,
        m_axi_WEIGHT_AWLOCK => grp_conv1_fu_682_m_axi_WEIGHT_AWLOCK,
        m_axi_WEIGHT_AWCACHE => grp_conv1_fu_682_m_axi_WEIGHT_AWCACHE,
        m_axi_WEIGHT_AWPROT => grp_conv1_fu_682_m_axi_WEIGHT_AWPROT,
        m_axi_WEIGHT_AWQOS => grp_conv1_fu_682_m_axi_WEIGHT_AWQOS,
        m_axi_WEIGHT_AWREGION => grp_conv1_fu_682_m_axi_WEIGHT_AWREGION,
        m_axi_WEIGHT_AWUSER => grp_conv1_fu_682_m_axi_WEIGHT_AWUSER,
        m_axi_WEIGHT_WVALID => grp_conv1_fu_682_m_axi_WEIGHT_WVALID,
        m_axi_WEIGHT_WREADY => ap_const_logic_0,
        m_axi_WEIGHT_WDATA => grp_conv1_fu_682_m_axi_WEIGHT_WDATA,
        m_axi_WEIGHT_WSTRB => grp_conv1_fu_682_m_axi_WEIGHT_WSTRB,
        m_axi_WEIGHT_WLAST => grp_conv1_fu_682_m_axi_WEIGHT_WLAST,
        m_axi_WEIGHT_WID => grp_conv1_fu_682_m_axi_WEIGHT_WID,
        m_axi_WEIGHT_WUSER => grp_conv1_fu_682_m_axi_WEIGHT_WUSER,
        m_axi_WEIGHT_ARVALID => grp_conv1_fu_682_m_axi_WEIGHT_ARVALID,
        m_axi_WEIGHT_ARREADY => data2_ARREADY,
        m_axi_WEIGHT_ARADDR => grp_conv1_fu_682_m_axi_WEIGHT_ARADDR,
        m_axi_WEIGHT_ARID => grp_conv1_fu_682_m_axi_WEIGHT_ARID,
        m_axi_WEIGHT_ARLEN => grp_conv1_fu_682_m_axi_WEIGHT_ARLEN,
        m_axi_WEIGHT_ARSIZE => grp_conv1_fu_682_m_axi_WEIGHT_ARSIZE,
        m_axi_WEIGHT_ARBURST => grp_conv1_fu_682_m_axi_WEIGHT_ARBURST,
        m_axi_WEIGHT_ARLOCK => grp_conv1_fu_682_m_axi_WEIGHT_ARLOCK,
        m_axi_WEIGHT_ARCACHE => grp_conv1_fu_682_m_axi_WEIGHT_ARCACHE,
        m_axi_WEIGHT_ARPROT => grp_conv1_fu_682_m_axi_WEIGHT_ARPROT,
        m_axi_WEIGHT_ARQOS => grp_conv1_fu_682_m_axi_WEIGHT_ARQOS,
        m_axi_WEIGHT_ARREGION => grp_conv1_fu_682_m_axi_WEIGHT_ARREGION,
        m_axi_WEIGHT_ARUSER => grp_conv1_fu_682_m_axi_WEIGHT_ARUSER,
        m_axi_WEIGHT_RVALID => data2_RVALID,
        m_axi_WEIGHT_RREADY => grp_conv1_fu_682_m_axi_WEIGHT_RREADY,
        m_axi_WEIGHT_RDATA => data2_RDATA,
        m_axi_WEIGHT_RLAST => data2_RLAST,
        m_axi_WEIGHT_RID => data2_RID,
        m_axi_WEIGHT_RUSER => data2_RUSER,
        m_axi_WEIGHT_RRESP => data2_RRESP,
        m_axi_WEIGHT_BVALID => ap_const_logic_0,
        m_axi_WEIGHT_BREADY => grp_conv1_fu_682_m_axi_WEIGHT_BREADY,
        m_axi_WEIGHT_BRESP => ap_const_lv2_0,
        m_axi_WEIGHT_BID => ap_const_lv1_0,
        m_axi_WEIGHT_BUSER => ap_const_lv1_0,
        m_axi_BIAS_AWVALID => grp_conv1_fu_682_m_axi_BIAS_AWVALID,
        m_axi_BIAS_AWREADY => ap_const_logic_0,
        m_axi_BIAS_AWADDR => grp_conv1_fu_682_m_axi_BIAS_AWADDR,
        m_axi_BIAS_AWID => grp_conv1_fu_682_m_axi_BIAS_AWID,
        m_axi_BIAS_AWLEN => grp_conv1_fu_682_m_axi_BIAS_AWLEN,
        m_axi_BIAS_AWSIZE => grp_conv1_fu_682_m_axi_BIAS_AWSIZE,
        m_axi_BIAS_AWBURST => grp_conv1_fu_682_m_axi_BIAS_AWBURST,
        m_axi_BIAS_AWLOCK => grp_conv1_fu_682_m_axi_BIAS_AWLOCK,
        m_axi_BIAS_AWCACHE => grp_conv1_fu_682_m_axi_BIAS_AWCACHE,
        m_axi_BIAS_AWPROT => grp_conv1_fu_682_m_axi_BIAS_AWPROT,
        m_axi_BIAS_AWQOS => grp_conv1_fu_682_m_axi_BIAS_AWQOS,
        m_axi_BIAS_AWREGION => grp_conv1_fu_682_m_axi_BIAS_AWREGION,
        m_axi_BIAS_AWUSER => grp_conv1_fu_682_m_axi_BIAS_AWUSER,
        m_axi_BIAS_WVALID => grp_conv1_fu_682_m_axi_BIAS_WVALID,
        m_axi_BIAS_WREADY => ap_const_logic_0,
        m_axi_BIAS_WDATA => grp_conv1_fu_682_m_axi_BIAS_WDATA,
        m_axi_BIAS_WSTRB => grp_conv1_fu_682_m_axi_BIAS_WSTRB,
        m_axi_BIAS_WLAST => grp_conv1_fu_682_m_axi_BIAS_WLAST,
        m_axi_BIAS_WID => grp_conv1_fu_682_m_axi_BIAS_WID,
        m_axi_BIAS_WUSER => grp_conv1_fu_682_m_axi_BIAS_WUSER,
        m_axi_BIAS_ARVALID => grp_conv1_fu_682_m_axi_BIAS_ARVALID,
        m_axi_BIAS_ARREADY => data3_ARREADY,
        m_axi_BIAS_ARADDR => grp_conv1_fu_682_m_axi_BIAS_ARADDR,
        m_axi_BIAS_ARID => grp_conv1_fu_682_m_axi_BIAS_ARID,
        m_axi_BIAS_ARLEN => grp_conv1_fu_682_m_axi_BIAS_ARLEN,
        m_axi_BIAS_ARSIZE => grp_conv1_fu_682_m_axi_BIAS_ARSIZE,
        m_axi_BIAS_ARBURST => grp_conv1_fu_682_m_axi_BIAS_ARBURST,
        m_axi_BIAS_ARLOCK => grp_conv1_fu_682_m_axi_BIAS_ARLOCK,
        m_axi_BIAS_ARCACHE => grp_conv1_fu_682_m_axi_BIAS_ARCACHE,
        m_axi_BIAS_ARPROT => grp_conv1_fu_682_m_axi_BIAS_ARPROT,
        m_axi_BIAS_ARQOS => grp_conv1_fu_682_m_axi_BIAS_ARQOS,
        m_axi_BIAS_ARREGION => grp_conv1_fu_682_m_axi_BIAS_ARREGION,
        m_axi_BIAS_ARUSER => grp_conv1_fu_682_m_axi_BIAS_ARUSER,
        m_axi_BIAS_RVALID => data3_RVALID,
        m_axi_BIAS_RREADY => grp_conv1_fu_682_m_axi_BIAS_RREADY,
        m_axi_BIAS_RDATA => data3_RDATA,
        m_axi_BIAS_RLAST => data3_RLAST,
        m_axi_BIAS_RID => data3_RID,
        m_axi_BIAS_RUSER => data3_RUSER,
        m_axi_BIAS_RRESP => data3_RRESP,
        m_axi_BIAS_BVALID => ap_const_logic_0,
        m_axi_BIAS_BREADY => grp_conv1_fu_682_m_axi_BIAS_BREADY,
        m_axi_BIAS_BRESP => ap_const_lv2_0,
        m_axi_BIAS_BID => ap_const_lv1_0,
        m_axi_BIAS_BUSER => ap_const_lv1_0,
        conv_out1_0_address0 => grp_conv1_fu_682_conv_out1_0_address0,
        conv_out1_0_ce0 => grp_conv1_fu_682_conv_out1_0_ce0,
        conv_out1_0_we0 => grp_conv1_fu_682_conv_out1_0_we0,
        conv_out1_0_d0 => grp_conv1_fu_682_conv_out1_0_d0,
        conv_out1_0_q0 => conv_out1_0_q0,
        conv_out1_1_address0 => grp_conv1_fu_682_conv_out1_1_address0,
        conv_out1_1_ce0 => grp_conv1_fu_682_conv_out1_1_ce0,
        conv_out1_1_we0 => grp_conv1_fu_682_conv_out1_1_we0,
        conv_out1_1_d0 => grp_conv1_fu_682_conv_out1_1_d0,
        conv_out1_1_q0 => conv_out1_1_q0,
        conv_out1_2_address0 => grp_conv1_fu_682_conv_out1_2_address0,
        conv_out1_2_ce0 => grp_conv1_fu_682_conv_out1_2_ce0,
        conv_out1_2_we0 => grp_conv1_fu_682_conv_out1_2_we0,
        conv_out1_2_d0 => grp_conv1_fu_682_conv_out1_2_d0,
        conv_out1_2_q0 => conv_out1_2_q0,
        conv_out1_3_address0 => grp_conv1_fu_682_conv_out1_3_address0,
        conv_out1_3_ce0 => grp_conv1_fu_682_conv_out1_3_ce0,
        conv_out1_3_we0 => grp_conv1_fu_682_conv_out1_3_we0,
        conv_out1_3_d0 => grp_conv1_fu_682_conv_out1_3_d0,
        conv_out1_3_q0 => conv_out1_3_q0,
        conv_out1_4_address0 => grp_conv1_fu_682_conv_out1_4_address0,
        conv_out1_4_ce0 => grp_conv1_fu_682_conv_out1_4_ce0,
        conv_out1_4_we0 => grp_conv1_fu_682_conv_out1_4_we0,
        conv_out1_4_d0 => grp_conv1_fu_682_conv_out1_4_d0,
        conv_out1_4_q0 => conv_out1_4_q0,
        conv_out1_5_address0 => grp_conv1_fu_682_conv_out1_5_address0,
        conv_out1_5_ce0 => grp_conv1_fu_682_conv_out1_5_ce0,
        conv_out1_5_we0 => grp_conv1_fu_682_conv_out1_5_we0,
        conv_out1_5_d0 => grp_conv1_fu_682_conv_out1_5_d0,
        conv_out1_5_q0 => conv_out1_5_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_conv1_fu_682_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv1_fu_682_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_conv1_fu_682_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv1_fu_682_ap_ready = ap_const_logic_1)) then 
                    grp_conv1_fu_682_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv2_fu_370_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv2_fu_370_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_conv2_fu_370_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv2_fu_370_ap_ready = ap_const_logic_1)) then 
                    grp_conv2_fu_370_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_conv2_fu_370_ap_done, grp_conv1_fu_682_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_conv1_fu_682_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_conv2_fu_370_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(grp_conv2_fu_370_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_conv2_fu_370_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_conv2_fu_370_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_conv2_fu_370_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    conv_out1_0_address0_assign_proc : process(grp_conv2_fu_370_conv_out1_0_address0, grp_conv1_fu_682_conv_out1_0_address0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out1_0_address0 <= grp_conv1_fu_682_conv_out1_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out1_0_address0 <= grp_conv2_fu_370_conv_out1_0_address0;
        else 
            conv_out1_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    conv_out1_0_ce0_assign_proc : process(grp_conv2_fu_370_conv_out1_0_ce0, grp_conv1_fu_682_conv_out1_0_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out1_0_ce0 <= grp_conv1_fu_682_conv_out1_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out1_0_ce0 <= grp_conv2_fu_370_conv_out1_0_ce0;
        else 
            conv_out1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out1_0_d0_assign_proc : process(grp_conv2_fu_370_conv_out1_0_d0, grp_conv1_fu_682_conv_out1_0_d0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out1_0_d0 <= grp_conv1_fu_682_conv_out1_0_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out1_0_d0 <= grp_conv2_fu_370_conv_out1_0_d0;
        else 
            conv_out1_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_out1_0_we0_assign_proc : process(grp_conv2_fu_370_conv_out1_0_we0, grp_conv1_fu_682_conv_out1_0_we0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out1_0_we0 <= grp_conv1_fu_682_conv_out1_0_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out1_0_we0 <= grp_conv2_fu_370_conv_out1_0_we0;
        else 
            conv_out1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out1_1_address0_assign_proc : process(grp_conv2_fu_370_conv_out1_1_address0, grp_conv1_fu_682_conv_out1_1_address0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out1_1_address0 <= grp_conv1_fu_682_conv_out1_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out1_1_address0 <= grp_conv2_fu_370_conv_out1_1_address0;
        else 
            conv_out1_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    conv_out1_1_ce0_assign_proc : process(grp_conv2_fu_370_conv_out1_1_ce0, grp_conv1_fu_682_conv_out1_1_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out1_1_ce0 <= grp_conv1_fu_682_conv_out1_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out1_1_ce0 <= grp_conv2_fu_370_conv_out1_1_ce0;
        else 
            conv_out1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out1_1_d0_assign_proc : process(grp_conv2_fu_370_conv_out1_1_d0, grp_conv1_fu_682_conv_out1_1_d0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out1_1_d0 <= grp_conv1_fu_682_conv_out1_1_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out1_1_d0 <= grp_conv2_fu_370_conv_out1_1_d0;
        else 
            conv_out1_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_out1_1_we0_assign_proc : process(grp_conv2_fu_370_conv_out1_1_we0, grp_conv1_fu_682_conv_out1_1_we0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out1_1_we0 <= grp_conv1_fu_682_conv_out1_1_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out1_1_we0 <= grp_conv2_fu_370_conv_out1_1_we0;
        else 
            conv_out1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out1_2_address0_assign_proc : process(grp_conv2_fu_370_conv_out1_2_address0, grp_conv1_fu_682_conv_out1_2_address0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out1_2_address0 <= grp_conv1_fu_682_conv_out1_2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out1_2_address0 <= grp_conv2_fu_370_conv_out1_2_address0;
        else 
            conv_out1_2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    conv_out1_2_ce0_assign_proc : process(grp_conv2_fu_370_conv_out1_2_ce0, grp_conv1_fu_682_conv_out1_2_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out1_2_ce0 <= grp_conv1_fu_682_conv_out1_2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out1_2_ce0 <= grp_conv2_fu_370_conv_out1_2_ce0;
        else 
            conv_out1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out1_2_d0_assign_proc : process(grp_conv2_fu_370_conv_out1_2_d0, grp_conv1_fu_682_conv_out1_2_d0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out1_2_d0 <= grp_conv1_fu_682_conv_out1_2_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out1_2_d0 <= grp_conv2_fu_370_conv_out1_2_d0;
        else 
            conv_out1_2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_out1_2_we0_assign_proc : process(grp_conv2_fu_370_conv_out1_2_we0, grp_conv1_fu_682_conv_out1_2_we0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out1_2_we0 <= grp_conv1_fu_682_conv_out1_2_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out1_2_we0 <= grp_conv2_fu_370_conv_out1_2_we0;
        else 
            conv_out1_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out1_3_address0_assign_proc : process(grp_conv2_fu_370_conv_out1_3_address0, grp_conv1_fu_682_conv_out1_3_address0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out1_3_address0 <= grp_conv1_fu_682_conv_out1_3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out1_3_address0 <= grp_conv2_fu_370_conv_out1_3_address0;
        else 
            conv_out1_3_address0 <= "XXXXXXXX";
        end if; 
    end process;


    conv_out1_3_ce0_assign_proc : process(grp_conv2_fu_370_conv_out1_3_ce0, grp_conv1_fu_682_conv_out1_3_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out1_3_ce0 <= grp_conv1_fu_682_conv_out1_3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out1_3_ce0 <= grp_conv2_fu_370_conv_out1_3_ce0;
        else 
            conv_out1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out1_3_d0_assign_proc : process(grp_conv2_fu_370_conv_out1_3_d0, grp_conv1_fu_682_conv_out1_3_d0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out1_3_d0 <= grp_conv1_fu_682_conv_out1_3_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out1_3_d0 <= grp_conv2_fu_370_conv_out1_3_d0;
        else 
            conv_out1_3_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_out1_3_we0_assign_proc : process(grp_conv2_fu_370_conv_out1_3_we0, grp_conv1_fu_682_conv_out1_3_we0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out1_3_we0 <= grp_conv1_fu_682_conv_out1_3_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out1_3_we0 <= grp_conv2_fu_370_conv_out1_3_we0;
        else 
            conv_out1_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out1_4_address0_assign_proc : process(grp_conv2_fu_370_conv_out1_4_address0, grp_conv1_fu_682_conv_out1_4_address0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out1_4_address0 <= grp_conv1_fu_682_conv_out1_4_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out1_4_address0 <= grp_conv2_fu_370_conv_out1_4_address0;
        else 
            conv_out1_4_address0 <= "XXXXXXXX";
        end if; 
    end process;


    conv_out1_4_ce0_assign_proc : process(grp_conv2_fu_370_conv_out1_4_ce0, grp_conv1_fu_682_conv_out1_4_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out1_4_ce0 <= grp_conv1_fu_682_conv_out1_4_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out1_4_ce0 <= grp_conv2_fu_370_conv_out1_4_ce0;
        else 
            conv_out1_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out1_4_d0_assign_proc : process(grp_conv2_fu_370_conv_out1_4_d0, grp_conv1_fu_682_conv_out1_4_d0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out1_4_d0 <= grp_conv1_fu_682_conv_out1_4_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out1_4_d0 <= grp_conv2_fu_370_conv_out1_4_d0;
        else 
            conv_out1_4_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_out1_4_we0_assign_proc : process(grp_conv2_fu_370_conv_out1_4_we0, grp_conv1_fu_682_conv_out1_4_we0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out1_4_we0 <= grp_conv1_fu_682_conv_out1_4_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out1_4_we0 <= grp_conv2_fu_370_conv_out1_4_we0;
        else 
            conv_out1_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out1_5_address0_assign_proc : process(grp_conv2_fu_370_conv_out1_5_address0, grp_conv1_fu_682_conv_out1_5_address0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out1_5_address0 <= grp_conv1_fu_682_conv_out1_5_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out1_5_address0 <= grp_conv2_fu_370_conv_out1_5_address0;
        else 
            conv_out1_5_address0 <= "XXXXXXXX";
        end if; 
    end process;


    conv_out1_5_ce0_assign_proc : process(grp_conv2_fu_370_conv_out1_5_ce0, grp_conv1_fu_682_conv_out1_5_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out1_5_ce0 <= grp_conv1_fu_682_conv_out1_5_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out1_5_ce0 <= grp_conv2_fu_370_conv_out1_5_ce0;
        else 
            conv_out1_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out1_5_d0_assign_proc : process(grp_conv2_fu_370_conv_out1_5_d0, grp_conv1_fu_682_conv_out1_5_d0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out1_5_d0 <= grp_conv1_fu_682_conv_out1_5_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out1_5_d0 <= grp_conv2_fu_370_conv_out1_5_d0;
        else 
            conv_out1_5_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_out1_5_we0_assign_proc : process(grp_conv2_fu_370_conv_out1_5_we0, grp_conv1_fu_682_conv_out1_5_we0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out1_5_we0 <= grp_conv1_fu_682_conv_out1_5_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out1_5_we0 <= grp_conv2_fu_370_conv_out1_5_we0;
        else 
            conv_out1_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data1_ARVALID_assign_proc : process(grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARVALID, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data1_ARVALID <= grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_ARVALID;
        else 
            data1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    data1_AWVALID_assign_proc : process(ap_CS_fsm_state1, grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data1_AWVALID <= grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_AWVALID;
        else 
            data1_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    data1_BREADY_assign_proc : process(ap_CS_fsm_state1, grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_BREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data1_BREADY <= grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_BREADY;
        else 
            data1_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    data1_RREADY_assign_proc : process(grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_RREADY, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data1_RREADY <= grp_conv2_fu_370_m_axi_FM_DDR_BUFF2_RREADY;
        else 
            data1_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    data1_WVALID_assign_proc : process(ap_CS_fsm_state1, grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_WVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data1_WVALID <= grp_conv1_fu_682_m_axi_FM_DDR_BUFF2_WVALID;
        else 
            data1_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    data2_ARADDR_assign_proc : process(ap_CS_fsm_state1, grp_conv2_fu_370_m_axi_WEIGHT_ARADDR, grp_conv1_fu_682_m_axi_WEIGHT_ARADDR, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data2_ARADDR <= grp_conv1_fu_682_m_axi_WEIGHT_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data2_ARADDR <= grp_conv2_fu_370_m_axi_WEIGHT_ARADDR;
        else 
            data2_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data2_ARBURST_assign_proc : process(ap_CS_fsm_state1, grp_conv2_fu_370_m_axi_WEIGHT_ARBURST, grp_conv1_fu_682_m_axi_WEIGHT_ARBURST, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data2_ARBURST <= grp_conv1_fu_682_m_axi_WEIGHT_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data2_ARBURST <= grp_conv2_fu_370_m_axi_WEIGHT_ARBURST;
        else 
            data2_ARBURST <= "XX";
        end if; 
    end process;


    data2_ARCACHE_assign_proc : process(ap_CS_fsm_state1, grp_conv2_fu_370_m_axi_WEIGHT_ARCACHE, grp_conv1_fu_682_m_axi_WEIGHT_ARCACHE, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data2_ARCACHE <= grp_conv1_fu_682_m_axi_WEIGHT_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data2_ARCACHE <= grp_conv2_fu_370_m_axi_WEIGHT_ARCACHE;
        else 
            data2_ARCACHE <= "XXXX";
        end if; 
    end process;


    data2_ARID_assign_proc : process(ap_CS_fsm_state1, grp_conv2_fu_370_m_axi_WEIGHT_ARID, grp_conv1_fu_682_m_axi_WEIGHT_ARID, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data2_ARID <= grp_conv1_fu_682_m_axi_WEIGHT_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data2_ARID <= grp_conv2_fu_370_m_axi_WEIGHT_ARID;
        else 
            data2_ARID <= "X";
        end if; 
    end process;


    data2_ARLEN_assign_proc : process(ap_CS_fsm_state1, grp_conv2_fu_370_m_axi_WEIGHT_ARLEN, grp_conv1_fu_682_m_axi_WEIGHT_ARLEN, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data2_ARLEN <= grp_conv1_fu_682_m_axi_WEIGHT_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data2_ARLEN <= grp_conv2_fu_370_m_axi_WEIGHT_ARLEN;
        else 
            data2_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data2_ARLOCK_assign_proc : process(ap_CS_fsm_state1, grp_conv2_fu_370_m_axi_WEIGHT_ARLOCK, grp_conv1_fu_682_m_axi_WEIGHT_ARLOCK, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data2_ARLOCK <= grp_conv1_fu_682_m_axi_WEIGHT_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data2_ARLOCK <= grp_conv2_fu_370_m_axi_WEIGHT_ARLOCK;
        else 
            data2_ARLOCK <= "XX";
        end if; 
    end process;


    data2_ARPROT_assign_proc : process(ap_CS_fsm_state1, grp_conv2_fu_370_m_axi_WEIGHT_ARPROT, grp_conv1_fu_682_m_axi_WEIGHT_ARPROT, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data2_ARPROT <= grp_conv1_fu_682_m_axi_WEIGHT_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data2_ARPROT <= grp_conv2_fu_370_m_axi_WEIGHT_ARPROT;
        else 
            data2_ARPROT <= "XXX";
        end if; 
    end process;


    data2_ARQOS_assign_proc : process(ap_CS_fsm_state1, grp_conv2_fu_370_m_axi_WEIGHT_ARQOS, grp_conv1_fu_682_m_axi_WEIGHT_ARQOS, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data2_ARQOS <= grp_conv1_fu_682_m_axi_WEIGHT_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data2_ARQOS <= grp_conv2_fu_370_m_axi_WEIGHT_ARQOS;
        else 
            data2_ARQOS <= "XXXX";
        end if; 
    end process;


    data2_ARREGION_assign_proc : process(ap_CS_fsm_state1, grp_conv2_fu_370_m_axi_WEIGHT_ARREGION, grp_conv1_fu_682_m_axi_WEIGHT_ARREGION, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data2_ARREGION <= grp_conv1_fu_682_m_axi_WEIGHT_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data2_ARREGION <= grp_conv2_fu_370_m_axi_WEIGHT_ARREGION;
        else 
            data2_ARREGION <= "XXXX";
        end if; 
    end process;


    data2_ARSIZE_assign_proc : process(ap_CS_fsm_state1, grp_conv2_fu_370_m_axi_WEIGHT_ARSIZE, grp_conv1_fu_682_m_axi_WEIGHT_ARSIZE, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data2_ARSIZE <= grp_conv1_fu_682_m_axi_WEIGHT_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data2_ARSIZE <= grp_conv2_fu_370_m_axi_WEIGHT_ARSIZE;
        else 
            data2_ARSIZE <= "XXX";
        end if; 
    end process;


    data2_ARUSER_assign_proc : process(ap_CS_fsm_state1, grp_conv2_fu_370_m_axi_WEIGHT_ARUSER, grp_conv1_fu_682_m_axi_WEIGHT_ARUSER, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data2_ARUSER <= grp_conv1_fu_682_m_axi_WEIGHT_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data2_ARUSER <= grp_conv2_fu_370_m_axi_WEIGHT_ARUSER;
        else 
            data2_ARUSER <= "X";
        end if; 
    end process;


    data2_ARVALID_assign_proc : process(ap_CS_fsm_state1, grp_conv2_fu_370_m_axi_WEIGHT_ARVALID, grp_conv1_fu_682_m_axi_WEIGHT_ARVALID, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data2_ARVALID <= grp_conv1_fu_682_m_axi_WEIGHT_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data2_ARVALID <= grp_conv2_fu_370_m_axi_WEIGHT_ARVALID;
        else 
            data2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    data2_RREADY_assign_proc : process(ap_CS_fsm_state1, grp_conv2_fu_370_m_axi_WEIGHT_RREADY, grp_conv1_fu_682_m_axi_WEIGHT_RREADY, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data2_RREADY <= grp_conv1_fu_682_m_axi_WEIGHT_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data2_RREADY <= grp_conv2_fu_370_m_axi_WEIGHT_RREADY;
        else 
            data2_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    data3_ARADDR_assign_proc : process(ap_CS_fsm_state1, grp_conv2_fu_370_m_axi_BIAS_ARADDR, grp_conv1_fu_682_m_axi_BIAS_ARADDR, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data3_ARADDR <= grp_conv1_fu_682_m_axi_BIAS_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data3_ARADDR <= grp_conv2_fu_370_m_axi_BIAS_ARADDR;
        else 
            data3_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data3_ARBURST_assign_proc : process(ap_CS_fsm_state1, grp_conv2_fu_370_m_axi_BIAS_ARBURST, grp_conv1_fu_682_m_axi_BIAS_ARBURST, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data3_ARBURST <= grp_conv1_fu_682_m_axi_BIAS_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data3_ARBURST <= grp_conv2_fu_370_m_axi_BIAS_ARBURST;
        else 
            data3_ARBURST <= "XX";
        end if; 
    end process;


    data3_ARCACHE_assign_proc : process(ap_CS_fsm_state1, grp_conv2_fu_370_m_axi_BIAS_ARCACHE, grp_conv1_fu_682_m_axi_BIAS_ARCACHE, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data3_ARCACHE <= grp_conv1_fu_682_m_axi_BIAS_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data3_ARCACHE <= grp_conv2_fu_370_m_axi_BIAS_ARCACHE;
        else 
            data3_ARCACHE <= "XXXX";
        end if; 
    end process;


    data3_ARID_assign_proc : process(ap_CS_fsm_state1, grp_conv2_fu_370_m_axi_BIAS_ARID, grp_conv1_fu_682_m_axi_BIAS_ARID, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data3_ARID <= grp_conv1_fu_682_m_axi_BIAS_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data3_ARID <= grp_conv2_fu_370_m_axi_BIAS_ARID;
        else 
            data3_ARID <= "X";
        end if; 
    end process;


    data3_ARLEN_assign_proc : process(ap_CS_fsm_state1, grp_conv2_fu_370_m_axi_BIAS_ARLEN, grp_conv1_fu_682_m_axi_BIAS_ARLEN, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data3_ARLEN <= grp_conv1_fu_682_m_axi_BIAS_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data3_ARLEN <= grp_conv2_fu_370_m_axi_BIAS_ARLEN;
        else 
            data3_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data3_ARLOCK_assign_proc : process(ap_CS_fsm_state1, grp_conv2_fu_370_m_axi_BIAS_ARLOCK, grp_conv1_fu_682_m_axi_BIAS_ARLOCK, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data3_ARLOCK <= grp_conv1_fu_682_m_axi_BIAS_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data3_ARLOCK <= grp_conv2_fu_370_m_axi_BIAS_ARLOCK;
        else 
            data3_ARLOCK <= "XX";
        end if; 
    end process;


    data3_ARPROT_assign_proc : process(ap_CS_fsm_state1, grp_conv2_fu_370_m_axi_BIAS_ARPROT, grp_conv1_fu_682_m_axi_BIAS_ARPROT, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data3_ARPROT <= grp_conv1_fu_682_m_axi_BIAS_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data3_ARPROT <= grp_conv2_fu_370_m_axi_BIAS_ARPROT;
        else 
            data3_ARPROT <= "XXX";
        end if; 
    end process;


    data3_ARQOS_assign_proc : process(ap_CS_fsm_state1, grp_conv2_fu_370_m_axi_BIAS_ARQOS, grp_conv1_fu_682_m_axi_BIAS_ARQOS, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data3_ARQOS <= grp_conv1_fu_682_m_axi_BIAS_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data3_ARQOS <= grp_conv2_fu_370_m_axi_BIAS_ARQOS;
        else 
            data3_ARQOS <= "XXXX";
        end if; 
    end process;


    data3_ARREGION_assign_proc : process(ap_CS_fsm_state1, grp_conv2_fu_370_m_axi_BIAS_ARREGION, grp_conv1_fu_682_m_axi_BIAS_ARREGION, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data3_ARREGION <= grp_conv1_fu_682_m_axi_BIAS_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data3_ARREGION <= grp_conv2_fu_370_m_axi_BIAS_ARREGION;
        else 
            data3_ARREGION <= "XXXX";
        end if; 
    end process;


    data3_ARSIZE_assign_proc : process(ap_CS_fsm_state1, grp_conv2_fu_370_m_axi_BIAS_ARSIZE, grp_conv1_fu_682_m_axi_BIAS_ARSIZE, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data3_ARSIZE <= grp_conv1_fu_682_m_axi_BIAS_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data3_ARSIZE <= grp_conv2_fu_370_m_axi_BIAS_ARSIZE;
        else 
            data3_ARSIZE <= "XXX";
        end if; 
    end process;


    data3_ARUSER_assign_proc : process(ap_CS_fsm_state1, grp_conv2_fu_370_m_axi_BIAS_ARUSER, grp_conv1_fu_682_m_axi_BIAS_ARUSER, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data3_ARUSER <= grp_conv1_fu_682_m_axi_BIAS_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data3_ARUSER <= grp_conv2_fu_370_m_axi_BIAS_ARUSER;
        else 
            data3_ARUSER <= "X";
        end if; 
    end process;


    data3_ARVALID_assign_proc : process(ap_CS_fsm_state1, grp_conv2_fu_370_m_axi_BIAS_ARVALID, grp_conv1_fu_682_m_axi_BIAS_ARVALID, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data3_ARVALID <= grp_conv1_fu_682_m_axi_BIAS_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data3_ARVALID <= grp_conv2_fu_370_m_axi_BIAS_ARVALID;
        else 
            data3_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    data3_RREADY_assign_proc : process(ap_CS_fsm_state1, grp_conv2_fu_370_m_axi_BIAS_RREADY, grp_conv1_fu_682_m_axi_BIAS_RREADY, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data3_RREADY <= grp_conv1_fu_682_m_axi_BIAS_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data3_RREADY <= grp_conv2_fu_370_m_axi_BIAS_RREADY;
        else 
            data3_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_ARVALID_assign_proc : process(ap_CS_fsm_state1, grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_ARVALID <= grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_ARVALID;
        else 
            data_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    data_AWVALID_assign_proc : process(grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWVALID, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data_AWVALID <= grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_AWVALID;
        else 
            data_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    data_BREADY_assign_proc : process(grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_BREADY, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data_BREADY <= grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_BREADY;
        else 
            data_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_RREADY_assign_proc : process(ap_CS_fsm_state1, grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_RREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_RREADY <= grp_conv1_fu_682_m_axi_FM_DDR_BUFF1_RREADY;
        else 
            data_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_WVALID_assign_proc : process(grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_WVALID, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data_WVALID <= grp_conv2_fu_370_m_axi_FM_DDR_BUFF1_WVALID;
        else 
            data_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    grp_conv1_fu_682_ap_start <= grp_conv1_fu_682_ap_start_reg;
    grp_conv2_fu_370_ap_start <= grp_conv2_fu_370_ap_start_reg;
end behav;
