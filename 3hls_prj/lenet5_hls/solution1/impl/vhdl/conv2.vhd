-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_FM_DDR_BUFF1_AWVALID : OUT STD_LOGIC;
    m_axi_FM_DDR_BUFF1_AWREADY : IN STD_LOGIC;
    m_axi_FM_DDR_BUFF1_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_FM_DDR_BUFF1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_FM_DDR_BUFF1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_FM_DDR_BUFF1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FM_DDR_BUFF1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FM_DDR_BUFF1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_FM_DDR_BUFF1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF1_WVALID : OUT STD_LOGIC;
    m_axi_FM_DDR_BUFF1_WREADY : IN STD_LOGIC;
    m_axi_FM_DDR_BUFF1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_FM_DDR_BUFF1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF1_WLAST : OUT STD_LOGIC;
    m_axi_FM_DDR_BUFF1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF1_ARVALID : OUT STD_LOGIC;
    m_axi_FM_DDR_BUFF1_ARREADY : IN STD_LOGIC;
    m_axi_FM_DDR_BUFF1_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_FM_DDR_BUFF1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_FM_DDR_BUFF1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_FM_DDR_BUFF1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FM_DDR_BUFF1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FM_DDR_BUFF1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_FM_DDR_BUFF1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF1_RVALID : IN STD_LOGIC;
    m_axi_FM_DDR_BUFF1_RREADY : OUT STD_LOGIC;
    m_axi_FM_DDR_BUFF1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_FM_DDR_BUFF1_RLAST : IN STD_LOGIC;
    m_axi_FM_DDR_BUFF1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FM_DDR_BUFF1_BVALID : IN STD_LOGIC;
    m_axi_FM_DDR_BUFF1_BREADY : OUT STD_LOGIC;
    m_axi_FM_DDR_BUFF1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FM_DDR_BUFF1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF2_AWVALID : OUT STD_LOGIC;
    m_axi_FM_DDR_BUFF2_AWREADY : IN STD_LOGIC;
    m_axi_FM_DDR_BUFF2_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_FM_DDR_BUFF2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_FM_DDR_BUFF2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_FM_DDR_BUFF2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FM_DDR_BUFF2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FM_DDR_BUFF2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_FM_DDR_BUFF2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF2_WVALID : OUT STD_LOGIC;
    m_axi_FM_DDR_BUFF2_WREADY : IN STD_LOGIC;
    m_axi_FM_DDR_BUFF2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_FM_DDR_BUFF2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF2_WLAST : OUT STD_LOGIC;
    m_axi_FM_DDR_BUFF2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF2_ARVALID : OUT STD_LOGIC;
    m_axi_FM_DDR_BUFF2_ARREADY : IN STD_LOGIC;
    m_axi_FM_DDR_BUFF2_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_FM_DDR_BUFF2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_FM_DDR_BUFF2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_FM_DDR_BUFF2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FM_DDR_BUFF2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FM_DDR_BUFF2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_FM_DDR_BUFF2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF2_RVALID : IN STD_LOGIC;
    m_axi_FM_DDR_BUFF2_RREADY : OUT STD_LOGIC;
    m_axi_FM_DDR_BUFF2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_FM_DDR_BUFF2_RLAST : IN STD_LOGIC;
    m_axi_FM_DDR_BUFF2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FM_DDR_BUFF2_BVALID : IN STD_LOGIC;
    m_axi_FM_DDR_BUFF2_BREADY : OUT STD_LOGIC;
    m_axi_FM_DDR_BUFF2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FM_DDR_BUFF2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHT_AWVALID : OUT STD_LOGIC;
    m_axi_WEIGHT_AWREADY : IN STD_LOGIC;
    m_axi_WEIGHT_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_WEIGHT_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHT_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_WEIGHT_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_WEIGHT_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHT_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHT_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHT_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_WEIGHT_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHT_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHT_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHT_WVALID : OUT STD_LOGIC;
    m_axi_WEIGHT_WREADY : IN STD_LOGIC;
    m_axi_WEIGHT_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_WEIGHT_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHT_WLAST : OUT STD_LOGIC;
    m_axi_WEIGHT_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHT_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHT_ARVALID : OUT STD_LOGIC;
    m_axi_WEIGHT_ARREADY : IN STD_LOGIC;
    m_axi_WEIGHT_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_WEIGHT_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHT_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_WEIGHT_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_WEIGHT_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHT_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHT_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHT_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_WEIGHT_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHT_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHT_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHT_RVALID : IN STD_LOGIC;
    m_axi_WEIGHT_RREADY : OUT STD_LOGIC;
    m_axi_WEIGHT_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_WEIGHT_RLAST : IN STD_LOGIC;
    m_axi_WEIGHT_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHT_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHT_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHT_BVALID : IN STD_LOGIC;
    m_axi_WEIGHT_BREADY : OUT STD_LOGIC;
    m_axi_WEIGHT_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHT_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHT_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_BIAS_AWVALID : OUT STD_LOGIC;
    m_axi_BIAS_AWREADY : IN STD_LOGIC;
    m_axi_BIAS_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_BIAS_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_BIAS_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_BIAS_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BIAS_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BIAS_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BIAS_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BIAS_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BIAS_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BIAS_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BIAS_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_BIAS_WVALID : OUT STD_LOGIC;
    m_axi_BIAS_WREADY : IN STD_LOGIC;
    m_axi_BIAS_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_BIAS_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BIAS_WLAST : OUT STD_LOGIC;
    m_axi_BIAS_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_BIAS_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_BIAS_ARVALID : OUT STD_LOGIC;
    m_axi_BIAS_ARREADY : IN STD_LOGIC;
    m_axi_BIAS_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_BIAS_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_BIAS_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_BIAS_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BIAS_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BIAS_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BIAS_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BIAS_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BIAS_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BIAS_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BIAS_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_BIAS_RVALID : IN STD_LOGIC;
    m_axi_BIAS_RREADY : OUT STD_LOGIC;
    m_axi_BIAS_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_BIAS_RLAST : IN STD_LOGIC;
    m_axi_BIAS_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_BIAS_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_BIAS_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BIAS_BVALID : IN STD_LOGIC;
    m_axi_BIAS_BREADY : OUT STD_LOGIC;
    m_axi_BIAS_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BIAS_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_BIAS_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_out1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out1_ce0 : OUT STD_LOGIC;
    conv_out1_we0 : OUT STD_LOGIC;
    conv_out1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_out1_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (85 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (85 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (85 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (85 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (85 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (85 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (85 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (85 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (85 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (85 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (85 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_96 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010010110";
    constant ap_const_lv32_498 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010010011000";
    constant ap_const_lv32_960 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100101100000";
    constant ap_const_lv32_190 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_3E800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111110100000000000000000000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv11_498 : STD_LOGIC_VECTOR (10 downto 0) := "10010011000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv12_960 : STD_LOGIC_VECTOR (11 downto 0) := "100101100000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal B_CONV2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_CONV2_ce0 : STD_LOGIC;
    signal B_CONV2_we0 : STD_LOGIC;
    signal B_CONV2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_CONV2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal W_CONV2_ce0 : STD_LOGIC;
    signal W_CONV2_we0 : STD_LOGIC;
    signal W_CONV2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_buff_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv2_buff_ce0 : STD_LOGIC;
    signal conv2_buff_we0 : STD_LOGIC;
    signal conv2_buff_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_buff_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_buff_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv2_buff_ce1 : STD_LOGIC;
    signal conv2_buff_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_out2_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_out2_ce0 : STD_LOGIC;
    signal conv_out2_we0 : STD_LOGIC;
    signal conv_out2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal FM_DDR_BUFF1_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal tmp_7_fu_1176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal FM_DDR_BUFF1_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal exitcond13_reg_1815 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond13_reg_1815_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal FM_DDR_BUFF1_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal FM_DDR_BUFF2_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal FM_DDR_BUFF2_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond11_reg_1485 : STD_LOGIC_VECTOR (0 downto 0);
    signal WEIGHT_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal WEIGHT_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal exitcond12_reg_1505 : STD_LOGIC_VECTOR (0 downto 0);
    signal BIAS_blk_n_AR : STD_LOGIC;
    signal BIAS_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond10_reg_1471 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_reg_385 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_reg_385_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state8_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar1_reg_397 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar1_reg_397_pp1_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state18_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal indvar4_reg_409 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar4_reg_409_pp2_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state28_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state29_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state30_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal indvar6_reg_556 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_571_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_581 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal reg_587 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal grp_fu_567_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_594 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_sig_ioackin_m_axi_BIAS_ARREADY : STD_LOGIC;
    signal exitcond10_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond10_reg_1471_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_615_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_next_reg_1475 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal BIAS_addr_read_reg_1480 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond11_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond11_reg_1485_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next1_fu_632_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_next1_reg_1489 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal FM_DDR_BUFF2_read_reg_1494 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_m_axi_WEIGHT_ARREADY : STD_LOGIC;
    signal exitcond12_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond12_reg_1505_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next2_fu_656_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar_next2_reg_1509 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal WEIGHT_addr_read_reg_1514 : STD_LOGIC_VECTOR (31 downto 0);
    signal kr_cast_fu_667_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal kr_cast_reg_1519 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal kr_1_fu_677_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal kr_1_reg_1527 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_683_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_1532 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond9_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kc_cast_fu_687_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal kc_cast_reg_1537 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal kc_1_fu_697_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal kc_1_reg_1545 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_cast_fu_703_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_cast_reg_1550 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond8_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_3_fu_713_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_3_reg_1558 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal tmp_12_cast_fu_724_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_cast_reg_1563 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond7_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_cast_fu_728_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_cast_reg_1568 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_3_fu_738_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_3_reg_1576 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal tmp_26_cast_fu_749_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_26_cast_reg_1581 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond6_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_cast_fu_753_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_27_cast_reg_1586 : STD_LOGIC_VECTOR (11 downto 0);
    signal chl_out_1_fu_763_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal chl_out_1_reg_1594 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal tmp_71_cast_fu_799_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_71_cast_reg_1599 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond5_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv2_buff_addr_5_reg_1604 : STD_LOGIC_VECTOR (10 downto 0);
    signal chl_in_1_fu_856_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal chl_in_1_reg_1612 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal tmp_60_fu_898_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_60_reg_1617 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond4_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_fu_902_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_61_reg_1622 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_71_fu_975_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_71_reg_1627 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal conv_out1_load_reg_1642 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal W_CONV2_load_reg_1647 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_1_fu_1012_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_1_reg_1655 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal tmp_4_cast_fu_1018_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_cast_reg_1660 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond3_fu_1006_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_1_fu_1028_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_1_reg_1668 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal tmp_10_cast_fu_1034_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_10_cast_reg_1673 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond2_fu_1022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal chl_1_fu_1044_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal chl_1_reg_1681 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal conv2_buff_addr_reg_1686 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond1_fu_1038_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal B_CONV2_load_reg_1696 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_1168_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_reg_1701 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_sig_ioackin_m_axi_FM_DDR_BUFF1_AWREADY : STD_LOGIC;
    signal ap_block_state62_io : BOOLEAN;
    signal tmp_8_cast_fu_1182_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_cast_reg_1710 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_fu_1192_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_reg_1715 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_cast_fu_1206_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_cast_reg_1720 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_cast_fu_1216_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_15_cast_reg_1728 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal tmp_2_fu_1210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_cast_fu_1226_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_17_cast_reg_1734 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_19_cast_fu_1240_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_19_cast_reg_1740 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_2_fu_1244_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal chl_2_fu_1256_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal chl_2_reg_1753 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal tmp_27_fu_1296_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_27_reg_1758 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_1250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_1301_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_38_reg_1764 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_47_fu_1347_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_47_reg_1770 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_2_fu_1352_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal tmp_41_fu_1426_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_41_reg_1790 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_42_fu_1431_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_42_reg_1795 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv2_buff_load_2_reg_1800 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal exitcond13_fu_1448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state87_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state88_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state89_pp3_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_FM_DDR_BUFF1_WREADY : STD_LOGIC;
    signal ap_block_state89_io : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal indvar_next3_fu_1454_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal conv_out2_load_reg_1829 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state18 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state28 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state87 : STD_LOGIC;
    signal ap_phi_mux_indvar_phi_fu_389_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar1_phi_fu_401_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_mux_indvar4_phi_fu_413_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal kr_reg_421 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal kc_reg_432 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_reg_443 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_454 : STD_LOGIC_VECTOR (3 downto 0);
    signal chl_out_reg_465 : STD_LOGIC_VECTOR (4 downto 0);
    signal chl_in_reg_476 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal r1_reg_487 : STD_LOGIC_VECTOR (3 downto 0);
    signal c2_reg_498 : STD_LOGIC_VECTOR (3 downto 0);
    signal chl_reg_509 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal r3_reg_521 : STD_LOGIC_VECTOR (3 downto 0);
    signal c4_reg_533 : STD_LOGIC_VECTOR (3 downto 0);
    signal chl5_reg_545 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal indvar2_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar3_fu_638_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_79_cast_fu_845_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_86_cast_fu_997_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_94_cast_fu_1002_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_42_cast_fu_1116_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_1121_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_cast_fu_1387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_cast_fu_1397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_cast_fu_1436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_62_cast_fu_1440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_68_cast_fu_1444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar7_fu_1460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_BIAS_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_FM_DDR_BUFF2_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_FM_DDR_BUFF2_ARREADY : STD_LOGIC;
    signal ap_reg_ioackin_m_axi_WEIGHT_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_FM_DDR_BUFF1_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_FM_DDR_BUFF1_WREADY : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_fu_567_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_567_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal grp_fu_571_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_571_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal tmp_s_fu_719_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_23_fu_744_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_48_fu_769_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_49_fu_781_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl4_cast_fu_777_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_cast_fu_789_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_50_fu_793_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_51_fu_803_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_52_fu_809_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_53_fu_822_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_814_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl1_cast_fu_830_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_54_fu_834_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_55_fu_840_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_35_cast_fu_862_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_56_fu_866_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_57_fu_875_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_80_cast_fu_871_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl_fu_883_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_fu_887_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_fu_893_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_fu_906_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_65_fu_918_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl8_cast_fu_914_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl9_cast_fu_926_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_fu_930_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_89_cast_fu_936_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_67_fu_940_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_68_fu_945_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_69_fu_957_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl6_cast_fu_949_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl7_cast_fu_965_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_70_fu_969_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl10_cast_fu_980_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_62_fu_987_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_63_fu_992_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_8_fu_1050_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_1062_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl15_cast_fu_1070_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl14_cast_fu_1058_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_fu_1074_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_fu_1080_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_fu_1093_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl13_cast_fu_1101_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl12_cast_fu_1085_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_fu_1105_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_15_fu_1111_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_23_to_int_fu_1126_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_1130_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_1140_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_1150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_1144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_1156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_1162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_1186_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1196_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_1220_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_1230_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_24_fu_1266_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_1278_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl22_cast_fu_1274_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl23_cast_fu_1286_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_26_fu_1290_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_43_fu_1306_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl17_cast_fu_1314_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_cast_fu_1262_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_44_fu_1318_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_45_fu_1324_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl16_cast_fu_1333_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_65_cast_fu_1329_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_46_fu_1341_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_28_fu_1365_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl20_cast_fu_1358_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl21_cast_fu_1372_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_29_fu_1376_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_34_fu_1382_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_35_fu_1392_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_39_fu_1409_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl18_cast_fu_1402_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl19_cast_fu_1416_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_40_fu_1420_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (85 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;

    component conv_top_fadd_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_top_fmul_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_top_fcmp_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv2_B_CONV2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2_W_CONV2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2_conv2_buff IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2_conv_out2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    B_CONV2_U : component conv2_B_CONV2
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_CONV2_address0,
        ce0 => B_CONV2_ce0,
        we0 => B_CONV2_we0,
        d0 => BIAS_addr_read_reg_1480,
        q0 => B_CONV2_q0);

    W_CONV2_U : component conv2_W_CONV2
    generic map (
        DataWidth => 32,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_CONV2_address0,
        ce0 => W_CONV2_ce0,
        we0 => W_CONV2_we0,
        d0 => WEIGHT_addr_read_reg_1514,
        q0 => W_CONV2_q0);

    conv2_buff_U : component conv2_conv2_buff
    generic map (
        DataWidth => 32,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2_buff_address0,
        ce0 => conv2_buff_ce0,
        we0 => conv2_buff_we0,
        d0 => conv2_buff_d0,
        q0 => conv2_buff_q0,
        address1 => conv2_buff_address1,
        ce1 => conv2_buff_ce1,
        q1 => conv2_buff_q1);

    conv_out2_U : component conv2_conv_out2
    generic map (
        DataWidth => 32,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_out2_address0,
        ce0 => conv_out2_ce0,
        we0 => conv_out2_we0,
        d0 => reg_581,
        q0 => conv_out2_q0);

    conv_top_fadd_32nbkb_U18 : component conv_top_fadd_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_567_p0,
        din1 => grp_fu_567_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_567_p2);

    conv_top_fmul_32ncud_U19 : component conv_top_fmul_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_571_p0,
        din1 => grp_fu_571_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_571_p2);

    conv_top_fcmp_32ndEe_U20 : component conv_top_fcmp_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_594,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_20_fu_576_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state8);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state18) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state18)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state18);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state28) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state28)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state28);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state87) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state62_io) and (ap_const_logic_1 = ap_CS_fsm_state62) and (tmp_7_fu_1176_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state87)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state87);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif (((ap_const_boolean_0 = ap_block_state62_io) and (ap_const_logic_1 = ap_CS_fsm_state62) and (tmp_7_fu_1176_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_BIAS_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_BIAS_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if (not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_m_axi_BIAS_ARREADY = ap_const_logic_0)))) then 
                        ap_reg_ioackin_m_axi_BIAS_ARREADY <= ap_const_logic_0;
                    elsif (((ap_start = ap_const_logic_1) and (m_axi_BIAS_ARREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_BIAS_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_FM_DDR_BUFF1_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_FM_DDR_BUFF1_AWREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state62) and (tmp_7_fu_1176_p2 = ap_const_lv1_0))) then
                    if ((ap_const_boolean_0 = ap_block_state62_io)) then 
                        ap_reg_ioackin_m_axi_FM_DDR_BUFF1_AWREADY <= ap_const_logic_0;
                    elsif ((m_axi_FM_DDR_BUFF1_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_FM_DDR_BUFF1_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_FM_DDR_BUFF1_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_FM_DDR_BUFF1_WREADY <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (exitcond13_reg_1815_pp3_iter1_reg = ap_const_lv1_0))) then
                    if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then 
                        ap_reg_ioackin_m_axi_FM_DDR_BUFF1_WREADY <= ap_const_logic_0;
                    elsif (((m_axi_FM_DDR_BUFF1_WREADY = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_01001))) then 
                        ap_reg_ioackin_m_axi_FM_DDR_BUFF1_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_FM_DDR_BUFF2_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_FM_DDR_BUFF2_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                    if ((ap_sig_ioackin_m_axi_FM_DDR_BUFF2_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_FM_DDR_BUFF2_ARREADY <= ap_const_logic_0;
                    elsif ((m_axi_FM_DDR_BUFF2_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_FM_DDR_BUFF2_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_WEIGHT_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_WEIGHT_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                    if ((ap_sig_ioackin_m_axi_WEIGHT_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_WEIGHT_ARREADY <= ap_const_logic_0;
                    elsif ((m_axi_WEIGHT_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_WEIGHT_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    c2_reg_498_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1038_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                c2_reg_498 <= c_1_reg_1668;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state50) and (exitcond3_fu_1006_p2 = ap_const_lv1_0))) then 
                c2_reg_498 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    c4_reg_533_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state62_io) and (tmp_7_fu_1176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
                c4_reg_533 <= ap_const_lv4_0;
            elsif (((exitcond_fu_1250_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state64))) then 
                c4_reg_533 <= c_2_fu_1352_p2;
            end if; 
        end if;
    end process;

    c_reg_454_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_757_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                c_reg_454 <= c_3_reg_1576;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state34) and (exitcond7_fu_707_p2 = ap_const_lv1_0))) then 
                c_reg_454 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    chl5_reg_545_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_1210_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then 
                chl5_reg_545 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                chl5_reg_545 <= chl_2_reg_1753;
            end if; 
        end if;
    end process;

    chl_in_reg_476_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) and (exitcond5_fu_757_p2 = ap_const_lv1_0))) then 
                chl_in_reg_476 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                chl_in_reg_476 <= chl_in_1_reg_1612;
            end if; 
        end if;
    end process;

    chl_out_reg_465_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_850_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                chl_out_reg_465 <= chl_out_1_reg_1594;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state35) and (exitcond6_fu_732_p2 = ap_const_lv1_0))) then 
                chl_out_reg_465 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    chl_reg_509_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state51) and (exitcond2_fu_1022_p2 = ap_const_lv1_0))) then 
                chl_reg_509 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                chl_reg_509 <= chl_1_reg_1681;
            end if; 
        end if;
    end process;

    indvar1_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                indvar1_reg_397 <= ap_const_lv11_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond11_reg_1485 = ap_const_lv1_0))) then 
                indvar1_reg_397 <= indvar_next1_reg_1489;
            end if; 
        end if;
    end process;

    indvar4_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond12_reg_1505 = ap_const_lv1_0))) then 
                indvar4_reg_409 <= indvar_next2_reg_1509;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                indvar4_reg_409 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar6_reg_556_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state62_io) and (ap_const_logic_1 = ap_CS_fsm_state62) and (tmp_7_fu_1176_p2 = ap_const_lv1_0))) then 
                indvar6_reg_556 <= ap_const_lv9_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond13_fu_1448_p2 = ap_const_lv1_0))) then 
                indvar6_reg_556 <= indvar_next3_fu_1454_p2;
            end if; 
        end if;
    end process;

    indvar_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond10_reg_1471 = ap_const_lv1_0))) then 
                indvar_reg_385 <= indvar_next_reg_1475;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_reg_385 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    kc_reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_707_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                kc_reg_432 <= kc_1_reg_1545;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state32) and (exitcond9_fu_671_p2 = ap_const_lv1_0))) then 
                kc_reg_432 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    kr_reg_421_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                kr_reg_421 <= ap_const_lv3_0;
            elsif (((exitcond8_fu_691_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                kr_reg_421 <= kr_1_reg_1527;
            end if; 
        end if;
    end process;

    r1_reg_487_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_671_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                r1_reg_487 <= ap_const_lv4_0;
            elsif (((exitcond2_fu_1022_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                r1_reg_487 <= r_1_reg_1655;
            end if; 
        end if;
    end process;

    r3_reg_521_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_1006_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                r3_reg_521 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state63) and (tmp_2_fu_1210_p2 = ap_const_lv1_0))) then 
                r3_reg_521 <= r_2_fu_1244_p2;
            end if; 
        end if;
    end process;

    r_reg_443_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_732_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                r_reg_443 <= r_3_reg_1558;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond8_fu_691_p2 = ap_const_lv1_0))) then 
                r_reg_443 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    reg_587_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
                reg_587 <= conv2_buff_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                reg_587 <= conv2_buff_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond10_reg_1471 = ap_const_lv1_0))) then
                BIAS_addr_read_reg_1480 <= m_axi_BIAS_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                B_CONV2_load_reg_1696 <= B_CONV2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond11_reg_1485 = ap_const_lv1_0))) then
                FM_DDR_BUFF2_read_reg_1494 <= m_axi_FM_DDR_BUFF2_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond12_reg_1505 = ap_const_lv1_0))) then
                WEIGHT_addr_read_reg_1514 <= m_axi_WEIGHT_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                W_CONV2_load_reg_1647 <= W_CONV2_q0;
                conv_out1_load_reg_1642 <= conv_out1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                c_1_reg_1668 <= c_1_fu_1028_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                c_3_reg_1576 <= c_3_fu_738_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                chl_1_reg_1681 <= chl_1_fu_1044_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                chl_2_reg_1753 <= chl_2_fu_1256_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                chl_in_1_reg_1612 <= chl_in_1_fu_856_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                chl_out_1_reg_1594 <= chl_out_1_fu_763_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) and (exitcond5_fu_757_p2 = ap_const_lv1_0))) then
                conv2_buff_addr_5_reg_1604 <= tmp_79_cast_fu_845_p1(11 - 1 downto 0);
                    tmp_71_cast_reg_1599(9 downto 1) <= tmp_71_cast_fu_799_p1(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state52) and (exitcond1_fu_1038_p2 = ap_const_lv1_0))) then
                conv2_buff_addr_reg_1686 <= tmp_42_cast_fu_1116_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                conv2_buff_load_2_reg_1800 <= conv2_buff_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond13_reg_1815 = ap_const_lv1_0))) then
                conv_out2_load_reg_1829 <= conv_out2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond10_reg_1471 <= exitcond10_fu_609_p2;
                exitcond10_reg_1471_pp0_iter1_reg <= exitcond10_reg_1471;
                indvar_reg_385_pp0_iter1_reg <= indvar_reg_385;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond11_reg_1485 <= exitcond11_fu_626_p2;
                exitcond11_reg_1485_pp1_iter1_reg <= exitcond11_reg_1485;
                indvar1_reg_397_pp1_iter1_reg <= indvar1_reg_397;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                exitcond12_reg_1505 <= exitcond12_fu_650_p2;
                exitcond12_reg_1505_pp2_iter1_reg <= exitcond12_reg_1505;
                indvar4_reg_409_pp2_iter1_reg <= indvar4_reg_409;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                exitcond13_reg_1815 <= exitcond13_fu_1448_p2;
                exitcond13_reg_1815_pp3_iter1_reg <= exitcond13_reg_1815;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                indvar_next1_reg_1489 <= indvar_next1_fu_632_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                indvar_next2_reg_1509 <= indvar_next2_fu_656_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                indvar_next_reg_1475 <= indvar_next_fu_615_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                kc_1_reg_1545 <= kc_1_fu_697_p2;
                    kc_cast_reg_1537(2 downto 0) <= kc_cast_fu_687_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                kr_1_reg_1527 <= kr_1_fu_677_p2;
                    kr_cast_reg_1519(2 downto 0) <= kr_cast_fu_667_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                r_1_reg_1655 <= r_1_fu_1012_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                r_3_reg_1558 <= r_3_fu_713_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state43))) then
                reg_581 <= grp_fu_571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state71))) then
                reg_594 <= grp_fu_567_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state51) and (exitcond2_fu_1022_p2 = ap_const_lv1_0))) then
                    tmp_10_cast_reg_1673(3 downto 0) <= tmp_10_cast_fu_1034_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) and (exitcond7_fu_707_p2 = ap_const_lv1_0))) then
                    tmp_12_cast_reg_1563(3 downto 0) <= tmp_12_cast_fu_724_p1(3 downto 0);
                    tmp_13_cast_reg_1568(3 downto 0) <= tmp_13_cast_fu_728_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_1210_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    tmp_15_cast_reg_1728(3 downto 0) <= tmp_15_cast_fu_1216_p1(3 downto 0);
                    tmp_17_cast_reg_1734(3 downto 1) <= tmp_17_cast_fu_1226_p1(3 downto 1);
                    tmp_19_cast_reg_1740(2 downto 0) <= tmp_19_cast_fu_1240_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                tmp_22_reg_1701 <= tmp_22_fu_1168_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state35) and (exitcond6_fu_732_p2 = ap_const_lv1_0))) then
                    tmp_26_cast_reg_1581(3 downto 0) <= tmp_26_cast_fu_749_p1(3 downto 0);
                    tmp_27_cast_reg_1586(3 downto 0) <= tmp_27_cast_fu_753_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state64) and (exitcond_fu_1250_p2 = ap_const_lv1_0))) then
                tmp_27_reg_1758 <= tmp_27_fu_1296_p2;
                    tmp_38_reg_1764(8 downto 1) <= tmp_38_fu_1301_p2(8 downto 1);
                tmp_47_reg_1770 <= tmp_47_fu_1347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) and (exitcond9_fu_671_p2 = ap_const_lv1_0))) then
                    tmp_3_reg_1532(2 downto 0) <= tmp_3_fu_683_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                tmp_41_reg_1790 <= tmp_41_fu_1426_p2;
                    tmp_42_reg_1795(11 downto 1) <= tmp_42_fu_1431_p2(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state50) and (exitcond3_fu_1006_p2 = ap_const_lv1_0))) then
                    tmp_4_cast_reg_1660(3 downto 0) <= tmp_4_cast_fu_1018_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state62_io) and (tmp_7_fu_1176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    tmp_5_cast_reg_1720(2 downto 0) <= tmp_5_cast_fu_1206_p1(2 downto 0);
                    tmp_8_cast_reg_1710(3 downto 0) <= tmp_8_cast_fu_1182_p1(3 downto 0);
                    tmp_cast_reg_1715(3 downto 1) <= tmp_cast_fu_1192_p1(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) and (exitcond4_fu_850_p2 = ap_const_lv1_0))) then
                tmp_60_reg_1617 <= tmp_60_fu_898_p1;
                tmp_61_reg_1622 <= tmp_61_fu_902_p1;
                tmp_71_reg_1627 <= tmp_71_fu_975_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond8_fu_691_p2 = ap_const_lv1_0))) then
                    tmp_6_cast_reg_1550(2 downto 0) <= tmp_6_cast_fu_703_p1(2 downto 0);
            end if;
        end if;
    end process;
    kr_cast_reg_1519(3) <= '0';
    tmp_3_reg_1532(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    kc_cast_reg_1537(3) <= '0';
    tmp_6_cast_reg_1550(12 downto 3) <= "0000000000";
    tmp_12_cast_reg_1563(8 downto 4) <= "00000";
    tmp_13_cast_reg_1568(8 downto 4) <= "00000";
    tmp_26_cast_reg_1581(11 downto 4) <= "00000000";
    tmp_27_cast_reg_1586(11 downto 4) <= "00000000";
    tmp_71_cast_reg_1599(0) <= '0';
    tmp_4_cast_reg_1660(8 downto 4) <= "00000";
    tmp_10_cast_reg_1673(11 downto 4) <= "00000000";
    tmp_8_cast_reg_1710(8 downto 4) <= "00000";
    tmp_cast_reg_1715(0) <= '1';
    tmp_cast_reg_1715(8 downto 4) <= "00000";
    tmp_5_cast_reg_1720(7 downto 3) <= "00000";
    tmp_15_cast_reg_1728(11 downto 4) <= "00000000";
    tmp_17_cast_reg_1734(0) <= '1';
    tmp_17_cast_reg_1734(11 downto 4) <= "00000000";
    tmp_19_cast_reg_1740(9 downto 3) <= "0000000";
    tmp_38_reg_1764(0) <= '1';
    tmp_42_reg_1795(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_FM_DDR_BUFF1_BVALID, ap_CS_fsm_state62, tmp_7_fu_1176_p2, ap_enable_reg_pp3_iter2, ap_CS_fsm_state94, ap_CS_fsm_state11, ap_enable_reg_pp1_iter1, ap_CS_fsm_state21, ap_enable_reg_pp2_iter1, ap_enable_reg_pp0_iter1, ap_sig_ioackin_m_axi_BIAS_ARREADY, exitcond10_fu_609_p2, ap_enable_reg_pp0_iter0, exitcond11_fu_626_p2, ap_enable_reg_pp1_iter0, ap_sig_ioackin_m_axi_WEIGHT_ARREADY, exitcond12_fu_650_p2, ap_enable_reg_pp2_iter0, ap_CS_fsm_state32, exitcond9_fu_671_p2, ap_CS_fsm_state33, exitcond8_fu_691_p2, ap_CS_fsm_state34, exitcond7_fu_707_p2, ap_CS_fsm_state35, exitcond6_fu_732_p2, ap_CS_fsm_state36, exitcond5_fu_757_p2, ap_CS_fsm_state37, exitcond4_fu_850_p2, ap_CS_fsm_state50, exitcond3_fu_1006_p2, ap_CS_fsm_state51, exitcond2_fu_1022_p2, ap_CS_fsm_state52, exitcond1_fu_1038_p2, ap_block_state62_io, ap_CS_fsm_state63, tmp_2_fu_1210_p2, ap_CS_fsm_state64, exitcond_fu_1250_p2, exitcond13_fu_1448_p2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter2, ap_block_pp3_stage0_subdone, ap_sig_ioackin_m_axi_FM_DDR_BUFF2_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_m_axi_BIAS_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond10_fu_609_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond10_fu_609_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_sig_ioackin_m_axi_FM_DDR_BUFF2_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond11_fu_626_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond11_fu_626_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_sig_ioackin_m_axi_WEIGHT_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond12_fu_650_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond12_fu_650_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((exitcond9_fu_671_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state33 => 
                if (((exitcond8_fu_691_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                if (((exitcond7_fu_707_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                if (((exitcond6_fu_732_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state36 => 
                if (((exitcond5_fu_757_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state37 => 
                if (((exitcond4_fu_850_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state50 => 
                if (((exitcond3_fu_1006_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state51 => 
                if (((exitcond2_fu_1022_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state52 => 
                if (((exitcond1_fu_1038_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state62 => 
                if (((ap_const_boolean_0 = ap_block_state62_io) and (ap_const_logic_1 = ap_CS_fsm_state62) and (tmp_7_fu_1176_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_boolean_0 = ap_block_state62_io) and (tmp_7_fu_1176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state63 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state63) and (tmp_2_fu_1210_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state64 => 
                if (((exitcond_fu_1250_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state64))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (exitcond13_fu_1448_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (exitcond13_fu_1448_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state90;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state94) and (m_axi_FM_DDR_BUFF1_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state94;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    BIAS_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_BIAS_ARREADY)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            BIAS_blk_n_AR <= m_axi_BIAS_ARREADY;
        else 
            BIAS_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    BIAS_blk_n_R_assign_proc : process(m_axi_BIAS_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond10_reg_1471)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond10_reg_1471 = ap_const_lv1_0))) then 
            BIAS_blk_n_R <= m_axi_BIAS_RVALID;
        else 
            BIAS_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    B_CONV2_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state53, ap_enable_reg_pp0_iter2, indvar2_fu_621_p1, tmp_6_fu_1121_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            B_CONV2_address0 <= tmp_6_fu_1121_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            B_CONV2_address0 <= indvar2_fu_621_p1(4 - 1 downto 0);
        else 
            B_CONV2_address0 <= "XXXX";
        end if; 
    end process;


    B_CONV2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state53, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            B_CONV2_ce0 <= ap_const_logic_1;
        else 
            B_CONV2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_CONV2_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond10_reg_1471_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond10_reg_1471_pp0_iter1_reg = ap_const_lv1_0))) then 
            B_CONV2_we0 <= ap_const_logic_1;
        else 
            B_CONV2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    FM_DDR_BUFF1_blk_n_AW_assign_proc : process(m_axi_FM_DDR_BUFF1_AWREADY, ap_CS_fsm_state62, tmp_7_fu_1176_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state62) and (tmp_7_fu_1176_p2 = ap_const_lv1_0))) then 
            FM_DDR_BUFF1_blk_n_AW <= m_axi_FM_DDR_BUFF1_AWREADY;
        else 
            FM_DDR_BUFF1_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    FM_DDR_BUFF1_blk_n_B_assign_proc : process(m_axi_FM_DDR_BUFF1_BVALID, ap_CS_fsm_state94)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            FM_DDR_BUFF1_blk_n_B <= m_axi_FM_DDR_BUFF1_BVALID;
        else 
            FM_DDR_BUFF1_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    FM_DDR_BUFF1_blk_n_W_assign_proc : process(m_axi_FM_DDR_BUFF1_WREADY, ap_enable_reg_pp3_iter2, ap_block_pp3_stage0, exitcond13_reg_1815_pp3_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (exitcond13_reg_1815_pp3_iter1_reg = ap_const_lv1_0))) then 
            FM_DDR_BUFF1_blk_n_W <= m_axi_FM_DDR_BUFF1_WREADY;
        else 
            FM_DDR_BUFF1_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    FM_DDR_BUFF2_blk_n_AR_assign_proc : process(m_axi_FM_DDR_BUFF2_ARREADY, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            FM_DDR_BUFF2_blk_n_AR <= m_axi_FM_DDR_BUFF2_ARREADY;
        else 
            FM_DDR_BUFF2_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    FM_DDR_BUFF2_blk_n_R_assign_proc : process(m_axi_FM_DDR_BUFF2_RVALID, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond11_reg_1485)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond11_reg_1485 = ap_const_lv1_0))) then 
            FM_DDR_BUFF2_blk_n_R <= m_axi_FM_DDR_BUFF2_RVALID;
        else 
            FM_DDR_BUFF2_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    WEIGHT_blk_n_AR_assign_proc : process(m_axi_WEIGHT_ARREADY, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            WEIGHT_blk_n_AR <= m_axi_WEIGHT_ARREADY;
        else 
            WEIGHT_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    WEIGHT_blk_n_R_assign_proc : process(m_axi_WEIGHT_RVALID, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, exitcond12_reg_1505)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond12_reg_1505 = ap_const_lv1_0))) then 
            WEIGHT_blk_n_R <= m_axi_WEIGHT_RVALID;
        else 
            WEIGHT_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    W_CONV2_address0_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_state38, ap_enable_reg_pp2_iter2, tmp_1_fu_662_p1, tmp_86_cast_fu_997_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            W_CONV2_address0 <= tmp_86_cast_fu_997_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            W_CONV2_address0 <= tmp_1_fu_662_p1(12 - 1 downto 0);
        else 
            W_CONV2_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    W_CONV2_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_state38, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then 
            W_CONV2_ce0 <= ap_const_logic_1;
        else 
            W_CONV2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    W_CONV2_we0_assign_proc : process(ap_block_pp2_stage0_11001, exitcond12_reg_1505_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (exitcond12_reg_1505_pp2_iter1_reg = ap_const_lv1_0))) then 
            W_CONV2_we0 <= ap_const_logic_1;
        else 
            W_CONV2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(15);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(23);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(80);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state21 <= ap_CS_fsm(16);
    ap_CS_fsm_state27 <= ap_CS_fsm(22);
    ap_CS_fsm_state31 <= ap_CS_fsm(24);
    ap_CS_fsm_state32 <= ap_CS_fsm(25);
    ap_CS_fsm_state33 <= ap_CS_fsm(26);
    ap_CS_fsm_state34 <= ap_CS_fsm(27);
    ap_CS_fsm_state35 <= ap_CS_fsm(28);
    ap_CS_fsm_state36 <= ap_CS_fsm(29);
    ap_CS_fsm_state37 <= ap_CS_fsm(30);
    ap_CS_fsm_state38 <= ap_CS_fsm(31);
    ap_CS_fsm_state39 <= ap_CS_fsm(32);
    ap_CS_fsm_state40 <= ap_CS_fsm(33);
    ap_CS_fsm_state42 <= ap_CS_fsm(35);
    ap_CS_fsm_state43 <= ap_CS_fsm(36);
    ap_CS_fsm_state44 <= ap_CS_fsm(37);
    ap_CS_fsm_state48 <= ap_CS_fsm(41);
    ap_CS_fsm_state49 <= ap_CS_fsm(42);
    ap_CS_fsm_state50 <= ap_CS_fsm(43);
    ap_CS_fsm_state51 <= ap_CS_fsm(44);
    ap_CS_fsm_state52 <= ap_CS_fsm(45);
    ap_CS_fsm_state53 <= ap_CS_fsm(46);
    ap_CS_fsm_state54 <= ap_CS_fsm(47);
    ap_CS_fsm_state55 <= ap_CS_fsm(48);
    ap_CS_fsm_state59 <= ap_CS_fsm(52);
    ap_CS_fsm_state60 <= ap_CS_fsm(53);
    ap_CS_fsm_state61 <= ap_CS_fsm(54);
    ap_CS_fsm_state62 <= ap_CS_fsm(55);
    ap_CS_fsm_state63 <= ap_CS_fsm(56);
    ap_CS_fsm_state64 <= ap_CS_fsm(57);
    ap_CS_fsm_state65 <= ap_CS_fsm(58);
    ap_CS_fsm_state66 <= ap_CS_fsm(59);
    ap_CS_fsm_state67 <= ap_CS_fsm(60);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(63);
    ap_CS_fsm_state71 <= ap_CS_fsm(64);
    ap_CS_fsm_state72 <= ap_CS_fsm(65);
    ap_CS_fsm_state75 <= ap_CS_fsm(68);
    ap_CS_fsm_state76 <= ap_CS_fsm(69);
    ap_CS_fsm_state77 <= ap_CS_fsm(70);
    ap_CS_fsm_state81 <= ap_CS_fsm(74);
    ap_CS_fsm_state82 <= ap_CS_fsm(75);
    ap_CS_fsm_state85 <= ap_CS_fsm(78);
    ap_CS_fsm_state86 <= ap_CS_fsm(79);
    ap_CS_fsm_state94 <= ap_CS_fsm(85);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_BIAS_RVALID, ap_enable_reg_pp0_iter1, exitcond10_reg_1471)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_BIAS_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond10_reg_1471 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_BIAS_RVALID, ap_enable_reg_pp0_iter1, exitcond10_reg_1471)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_BIAS_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond10_reg_1471 = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(m_axi_FM_DDR_BUFF2_RVALID, ap_enable_reg_pp1_iter1, exitcond11_reg_1485)
    begin
                ap_block_pp1_stage0_11001 <= ((m_axi_FM_DDR_BUFF2_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (exitcond11_reg_1485 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(m_axi_FM_DDR_BUFF2_RVALID, ap_enable_reg_pp1_iter1, exitcond11_reg_1485)
    begin
                ap_block_pp1_stage0_subdone <= ((m_axi_FM_DDR_BUFF2_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (exitcond11_reg_1485 = ap_const_lv1_0));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(m_axi_WEIGHT_RVALID, ap_enable_reg_pp2_iter1, exitcond12_reg_1505)
    begin
                ap_block_pp2_stage0_11001 <= ((m_axi_WEIGHT_RVALID = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (exitcond12_reg_1505 = ap_const_lv1_0));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(m_axi_WEIGHT_RVALID, ap_enable_reg_pp2_iter1, exitcond12_reg_1505)
    begin
                ap_block_pp2_stage0_subdone <= ((m_axi_WEIGHT_RVALID = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (exitcond12_reg_1505 = ap_const_lv1_0));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter2, ap_block_state89_io)
    begin
                ap_block_pp3_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state89_io) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter2, ap_block_state89_io)
    begin
                ap_block_pp3_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state89_io) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state19_pp1_stage0_iter1_assign_proc : process(m_axi_FM_DDR_BUFF2_RVALID, exitcond11_reg_1485)
    begin
                ap_block_state19_pp1_stage0_iter1 <= ((m_axi_FM_DDR_BUFF2_RVALID = ap_const_logic_0) and (exitcond11_reg_1485 = ap_const_lv1_0));
    end process;

        ap_block_state20_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state29_pp2_stage0_iter1_assign_proc : process(m_axi_WEIGHT_RVALID, exitcond12_reg_1505)
    begin
                ap_block_state29_pp2_stage0_iter1 <= ((m_axi_WEIGHT_RVALID = ap_const_logic_0) and (exitcond12_reg_1505 = ap_const_lv1_0));
    end process;

        ap_block_state30_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state62_io_assign_proc : process(tmp_7_fu_1176_p2, ap_sig_ioackin_m_axi_FM_DDR_BUFF1_AWREADY)
    begin
                ap_block_state62_io <= ((ap_sig_ioackin_m_axi_FM_DDR_BUFF1_AWREADY = ap_const_logic_0) and (tmp_7_fu_1176_p2 = ap_const_lv1_0));
    end process;

        ap_block_state87_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state88_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state89_io_assign_proc : process(exitcond13_reg_1815_pp3_iter1_reg, ap_sig_ioackin_m_axi_FM_DDR_BUFF1_WREADY)
    begin
                ap_block_state89_io <= ((ap_sig_ioackin_m_axi_FM_DDR_BUFF1_WREADY = ap_const_logic_0) and (exitcond13_reg_1815_pp3_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state89_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage0_iter1_assign_proc : process(m_axi_BIAS_RVALID, exitcond10_reg_1471)
    begin
                ap_block_state9_pp0_stage0_iter1 <= ((m_axi_BIAS_RVALID = ap_const_logic_0) and (exitcond10_reg_1471 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state8_assign_proc : process(exitcond10_fu_609_p2)
    begin
        if ((exitcond10_fu_609_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state18_assign_proc : process(exitcond11_fu_626_p2)
    begin
        if ((exitcond11_fu_626_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state18 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state28_assign_proc : process(exitcond12_fu_650_p2)
    begin
        if ((exitcond12_fu_650_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state28 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state28 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state87_assign_proc : process(exitcond13_fu_1448_p2)
    begin
        if ((exitcond13_fu_1448_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state87 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state87 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_FM_DDR_BUFF1_BVALID, ap_CS_fsm_state94)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state94) and (m_axi_FM_DDR_BUFF1_BVALID = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar1_phi_fu_401_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond11_reg_1485, indvar1_reg_397, indvar_next1_reg_1489)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond11_reg_1485 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar1_phi_fu_401_p4 <= indvar_next1_reg_1489;
        else 
            ap_phi_mux_indvar1_phi_fu_401_p4 <= indvar1_reg_397;
        end if; 
    end process;


    ap_phi_mux_indvar4_phi_fu_413_p4_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, exitcond12_reg_1505, indvar4_reg_409, indvar_next2_reg_1509)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond12_reg_1505 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar4_phi_fu_413_p4 <= indvar_next2_reg_1509;
        else 
            ap_phi_mux_indvar4_phi_fu_413_p4 <= indvar4_reg_409;
        end if; 
    end process;


    ap_phi_mux_indvar_phi_fu_389_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond10_reg_1471, indvar_reg_385, indvar_next_reg_1475)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond10_reg_1471 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_phi_fu_389_p4 <= indvar_next_reg_1475;
        else 
            ap_phi_mux_indvar_phi_fu_389_p4 <= indvar_reg_385;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_FM_DDR_BUFF1_BVALID, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) and (m_axi_FM_DDR_BUFF1_BVALID = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_BIAS_ARREADY_assign_proc : process(m_axi_BIAS_ARREADY, ap_reg_ioackin_m_axi_BIAS_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_BIAS_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_BIAS_ARREADY <= m_axi_BIAS_ARREADY;
        else 
            ap_sig_ioackin_m_axi_BIAS_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_FM_DDR_BUFF1_AWREADY_assign_proc : process(m_axi_FM_DDR_BUFF1_AWREADY, ap_reg_ioackin_m_axi_FM_DDR_BUFF1_AWREADY)
    begin
        if ((ap_reg_ioackin_m_axi_FM_DDR_BUFF1_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_FM_DDR_BUFF1_AWREADY <= m_axi_FM_DDR_BUFF1_AWREADY;
        else 
            ap_sig_ioackin_m_axi_FM_DDR_BUFF1_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_FM_DDR_BUFF1_WREADY_assign_proc : process(m_axi_FM_DDR_BUFF1_WREADY, ap_reg_ioackin_m_axi_FM_DDR_BUFF1_WREADY)
    begin
        if ((ap_reg_ioackin_m_axi_FM_DDR_BUFF1_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_FM_DDR_BUFF1_WREADY <= m_axi_FM_DDR_BUFF1_WREADY;
        else 
            ap_sig_ioackin_m_axi_FM_DDR_BUFF1_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_FM_DDR_BUFF2_ARREADY_assign_proc : process(m_axi_FM_DDR_BUFF2_ARREADY, ap_reg_ioackin_m_axi_FM_DDR_BUFF2_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_FM_DDR_BUFF2_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_FM_DDR_BUFF2_ARREADY <= m_axi_FM_DDR_BUFF2_ARREADY;
        else 
            ap_sig_ioackin_m_axi_FM_DDR_BUFF2_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_WEIGHT_ARREADY_assign_proc : process(m_axi_WEIGHT_ARREADY, ap_reg_ioackin_m_axi_WEIGHT_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_WEIGHT_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_WEIGHT_ARREADY <= m_axi_WEIGHT_ARREADY;
        else 
            ap_sig_ioackin_m_axi_WEIGHT_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    c_1_fu_1028_p2 <= std_logic_vector(unsigned(c2_reg_498) + unsigned(ap_const_lv4_1));
    c_2_fu_1352_p2 <= std_logic_vector(unsigned(c4_reg_533) + unsigned(ap_const_lv4_2));
    c_3_fu_738_p2 <= std_logic_vector(unsigned(c_reg_454) + unsigned(ap_const_lv4_1));
    chl_1_fu_1044_p2 <= std_logic_vector(unsigned(chl_reg_509) + unsigned(ap_const_lv5_1));
    chl_2_fu_1256_p2 <= std_logic_vector(unsigned(chl5_reg_545) + unsigned(ap_const_lv5_1));
    chl_in_1_fu_856_p2 <= std_logic_vector(unsigned(chl_in_reg_476) + unsigned(ap_const_lv3_1));
    chl_out_1_fu_763_p2 <= std_logic_vector(unsigned(chl_out_reg_465) + unsigned(ap_const_lv5_1));

    conv2_buff_address0_assign_proc : process(conv2_buff_addr_5_reg_1604, conv2_buff_addr_reg_1686, ap_CS_fsm_state53, ap_CS_fsm_state65, ap_CS_fsm_state49, ap_CS_fsm_state61, tmp_55_cast_fu_1387_p1, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            conv2_buff_address0 <= tmp_55_cast_fu_1387_p1(11 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            conv2_buff_address0 <= conv2_buff_addr_reg_1686;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            conv2_buff_address0 <= conv2_buff_addr_5_reg_1604;
        else 
            conv2_buff_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv2_buff_address1_assign_proc : process(ap_CS_fsm_state65, ap_CS_fsm_state70, ap_CS_fsm_state75, tmp_56_cast_fu_1397_p1, tmp_61_cast_fu_1436_p1, tmp_62_cast_fu_1440_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            conv2_buff_address1 <= tmp_62_cast_fu_1440_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            conv2_buff_address1 <= tmp_61_cast_fu_1436_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            conv2_buff_address1 <= tmp_56_cast_fu_1397_p1(11 - 1 downto 0);
        else 
            conv2_buff_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv2_buff_ce0_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state65, ap_CS_fsm_state49, ap_CS_fsm_state61, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            conv2_buff_ce0 <= ap_const_logic_1;
        else 
            conv2_buff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_buff_ce1_assign_proc : process(ap_CS_fsm_state65, ap_CS_fsm_state70, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            conv2_buff_ce1 <= ap_const_logic_1;
        else 
            conv2_buff_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_buff_d0_assign_proc : process(reg_594, tmp_22_reg_1701, ap_CS_fsm_state49, ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            conv2_buff_d0 <= tmp_22_reg_1701;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            conv2_buff_d0 <= reg_594;
        else 
            conv2_buff_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv2_buff_we0_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_state61)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            conv2_buff_we0 <= ap_const_logic_1;
        else 
            conv2_buff_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out1_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_state38, ap_enable_reg_pp1_iter2, indvar3_fu_638_p1, tmp_94_cast_fu_1002_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            conv_out1_address0 <= tmp_94_cast_fu_1002_p1(11 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            conv_out1_address0 <= indvar3_fu_638_p1(11 - 1 downto 0);
        else 
            conv_out1_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv_out1_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state38, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            conv_out1_ce0 <= ap_const_logic_1;
        else 
            conv_out1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out1_d0 <= FM_DDR_BUFF2_read_reg_1494;

    conv_out1_we0_assign_proc : process(ap_block_pp1_stage0_11001, exitcond11_reg_1485_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (exitcond11_reg_1485_pp1_iter1_reg = ap_const_lv1_0))) then 
            conv_out1_we0 <= ap_const_logic_1;
        else 
            conv_out1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out2_address0_assign_proc : process(ap_block_pp3_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_state86, tmp_68_cast_fu_1444_p1, indvar7_fu_1460_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            conv_out2_address0 <= indvar7_fu_1460_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            conv_out2_address0 <= tmp_68_cast_fu_1444_p1(9 - 1 downto 0);
        else 
            conv_out2_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    conv_out2_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            conv_out2_ce0 <= ap_const_logic_1;
        else 
            conv_out2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out2_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            conv_out2_we0 <= ap_const_logic_1;
        else 
            conv_out2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond10_fu_609_p2 <= "1" when (ap_phi_mux_indvar_phi_fu_389_p4 = ap_const_lv5_10) else "0";
    exitcond11_fu_626_p2 <= "1" when (ap_phi_mux_indvar1_phi_fu_401_p4 = ap_const_lv11_498) else "0";
    exitcond12_fu_650_p2 <= "1" when (ap_phi_mux_indvar4_phi_fu_413_p4 = ap_const_lv12_960) else "0";
    exitcond13_fu_1448_p2 <= "1" when (indvar6_reg_556 = ap_const_lv9_190) else "0";
    exitcond1_fu_1038_p2 <= "1" when (chl_reg_509 = ap_const_lv5_10) else "0";
    exitcond2_fu_1022_p2 <= "1" when (c2_reg_498 = ap_const_lv4_A) else "0";
    exitcond3_fu_1006_p2 <= "1" when (r1_reg_487 = ap_const_lv4_A) else "0";
    exitcond4_fu_850_p2 <= "1" when (chl_in_reg_476 = ap_const_lv3_6) else "0";
    exitcond5_fu_757_p2 <= "1" when (chl_out_reg_465 = ap_const_lv5_10) else "0";
    exitcond6_fu_732_p2 <= "1" when (c_reg_454 = ap_const_lv4_A) else "0";
    exitcond7_fu_707_p2 <= "1" when (r_reg_443 = ap_const_lv4_A) else "0";
    exitcond8_fu_691_p2 <= "1" when (kc_reg_432 = ap_const_lv3_5) else "0";
    exitcond9_fu_671_p2 <= "1" when (kr_reg_421 = ap_const_lv3_5) else "0";
    exitcond_fu_1250_p2 <= "1" when (chl5_reg_545 = ap_const_lv5_10) else "0";

    grp_fu_567_p0_assign_proc : process(reg_587, reg_594, ap_CS_fsm_state44, ap_CS_fsm_state55, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72))) then 
            grp_fu_567_p0 <= reg_594;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            grp_fu_567_p0 <= reg_587;
        else 
            grp_fu_567_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_567_p1_assign_proc : process(reg_581, reg_587, B_CONV2_load_reg_1696, conv2_buff_load_2_reg_1800, ap_CS_fsm_state44, ap_CS_fsm_state55, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72))) then 
            grp_fu_567_p1 <= reg_587;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_fu_567_p1 <= conv2_buff_load_2_reg_1800;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_567_p1 <= B_CONV2_load_reg_1696;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_567_p1 <= reg_581;
        else 
            grp_fu_567_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_571_p0_assign_proc : process(reg_594, conv_out1_load_reg_1642, ap_CS_fsm_state40, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            grp_fu_571_p0 <= reg_594;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_571_p0 <= conv_out1_load_reg_1642;
        else 
            grp_fu_571_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_571_p1_assign_proc : process(W_CONV2_load_reg_1647, ap_CS_fsm_state40, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            grp_fu_571_p1 <= ap_const_lv32_3E800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_571_p1 <= W_CONV2_load_reg_1647;
        else 
            grp_fu_571_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    indvar2_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar_reg_385_pp0_iter1_reg),64));
    indvar3_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar1_reg_397_pp1_iter1_reg),64));
    indvar7_fu_1460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar6_reg_556),64));
    indvar_next1_fu_632_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar1_phi_fu_401_p4) + unsigned(ap_const_lv11_1));
    indvar_next2_fu_656_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar4_phi_fu_413_p4) + unsigned(ap_const_lv12_1));
    indvar_next3_fu_1454_p2 <= std_logic_vector(unsigned(indvar6_reg_556) + unsigned(ap_const_lv9_1));
    indvar_next_fu_615_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_phi_fu_389_p4) + unsigned(ap_const_lv5_1));
    kc_1_fu_697_p2 <= std_logic_vector(unsigned(kc_reg_432) + unsigned(ap_const_lv3_1));
    kc_cast_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kc_reg_432),4));
    kr_1_fu_677_p2 <= std_logic_vector(unsigned(kr_reg_421) + unsigned(ap_const_lv3_1));
    kr_cast_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kr_reg_421),4));
    m_axi_BIAS_ARADDR <= ap_const_lv64_6(32 - 1 downto 0);
    m_axi_BIAS_ARBURST <= ap_const_lv2_0;
    m_axi_BIAS_ARCACHE <= ap_const_lv4_0;
    m_axi_BIAS_ARID <= ap_const_lv1_0;
    m_axi_BIAS_ARLEN <= ap_const_lv32_10;
    m_axi_BIAS_ARLOCK <= ap_const_lv2_0;
    m_axi_BIAS_ARPROT <= ap_const_lv3_0;
    m_axi_BIAS_ARQOS <= ap_const_lv4_0;
    m_axi_BIAS_ARREGION <= ap_const_lv4_0;
    m_axi_BIAS_ARSIZE <= ap_const_lv3_0;
    m_axi_BIAS_ARUSER <= ap_const_lv1_0;

    m_axi_BIAS_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_reg_ioackin_m_axi_BIAS_ARREADY)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_reg_ioackin_m_axi_BIAS_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_BIAS_ARVALID <= ap_const_logic_1;
        else 
            m_axi_BIAS_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_BIAS_AWADDR <= ap_const_lv32_0;
    m_axi_BIAS_AWBURST <= ap_const_lv2_0;
    m_axi_BIAS_AWCACHE <= ap_const_lv4_0;
    m_axi_BIAS_AWID <= ap_const_lv1_0;
    m_axi_BIAS_AWLEN <= ap_const_lv32_0;
    m_axi_BIAS_AWLOCK <= ap_const_lv2_0;
    m_axi_BIAS_AWPROT <= ap_const_lv3_0;
    m_axi_BIAS_AWQOS <= ap_const_lv4_0;
    m_axi_BIAS_AWREGION <= ap_const_lv4_0;
    m_axi_BIAS_AWSIZE <= ap_const_lv3_0;
    m_axi_BIAS_AWUSER <= ap_const_lv1_0;
    m_axi_BIAS_AWVALID <= ap_const_logic_0;
    m_axi_BIAS_BREADY <= ap_const_logic_0;

    m_axi_BIAS_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond10_reg_1471, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond10_reg_1471 = ap_const_lv1_0))) then 
            m_axi_BIAS_RREADY <= ap_const_logic_1;
        else 
            m_axi_BIAS_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_BIAS_WDATA <= ap_const_lv32_0;
    m_axi_BIAS_WID <= ap_const_lv1_0;
    m_axi_BIAS_WLAST <= ap_const_logic_0;
    m_axi_BIAS_WSTRB <= ap_const_lv4_0;
    m_axi_BIAS_WUSER <= ap_const_lv1_0;
    m_axi_BIAS_WVALID <= ap_const_logic_0;
    m_axi_FM_DDR_BUFF1_ARADDR <= ap_const_lv32_0;
    m_axi_FM_DDR_BUFF1_ARBURST <= ap_const_lv2_0;
    m_axi_FM_DDR_BUFF1_ARCACHE <= ap_const_lv4_0;
    m_axi_FM_DDR_BUFF1_ARID <= ap_const_lv1_0;
    m_axi_FM_DDR_BUFF1_ARLEN <= ap_const_lv32_0;
    m_axi_FM_DDR_BUFF1_ARLOCK <= ap_const_lv2_0;
    m_axi_FM_DDR_BUFF1_ARPROT <= ap_const_lv3_0;
    m_axi_FM_DDR_BUFF1_ARQOS <= ap_const_lv4_0;
    m_axi_FM_DDR_BUFF1_ARREGION <= ap_const_lv4_0;
    m_axi_FM_DDR_BUFF1_ARSIZE <= ap_const_lv3_0;
    m_axi_FM_DDR_BUFF1_ARUSER <= ap_const_lv1_0;
    m_axi_FM_DDR_BUFF1_ARVALID <= ap_const_logic_0;
    m_axi_FM_DDR_BUFF1_AWADDR <= ap_const_lv32_0;
    m_axi_FM_DDR_BUFF1_AWBURST <= ap_const_lv2_0;
    m_axi_FM_DDR_BUFF1_AWCACHE <= ap_const_lv4_0;
    m_axi_FM_DDR_BUFF1_AWID <= ap_const_lv1_0;
    m_axi_FM_DDR_BUFF1_AWLEN <= ap_const_lv32_190;
    m_axi_FM_DDR_BUFF1_AWLOCK <= ap_const_lv2_0;
    m_axi_FM_DDR_BUFF1_AWPROT <= ap_const_lv3_0;
    m_axi_FM_DDR_BUFF1_AWQOS <= ap_const_lv4_0;
    m_axi_FM_DDR_BUFF1_AWREGION <= ap_const_lv4_0;
    m_axi_FM_DDR_BUFF1_AWSIZE <= ap_const_lv3_0;
    m_axi_FM_DDR_BUFF1_AWUSER <= ap_const_lv1_0;

    m_axi_FM_DDR_BUFF1_AWVALID_assign_proc : process(ap_CS_fsm_state62, tmp_7_fu_1176_p2, ap_reg_ioackin_m_axi_FM_DDR_BUFF1_AWREADY)
    begin
        if (((ap_reg_ioackin_m_axi_FM_DDR_BUFF1_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state62) and (tmp_7_fu_1176_p2 = ap_const_lv1_0))) then 
            m_axi_FM_DDR_BUFF1_AWVALID <= ap_const_logic_1;
        else 
            m_axi_FM_DDR_BUFF1_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_FM_DDR_BUFF1_BREADY_assign_proc : process(m_axi_FM_DDR_BUFF1_BVALID, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) and (m_axi_FM_DDR_BUFF1_BVALID = ap_const_logic_1))) then 
            m_axi_FM_DDR_BUFF1_BREADY <= ap_const_logic_1;
        else 
            m_axi_FM_DDR_BUFF1_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_FM_DDR_BUFF1_RREADY <= ap_const_logic_0;
    m_axi_FM_DDR_BUFF1_WDATA <= conv_out2_load_reg_1829;
    m_axi_FM_DDR_BUFF1_WID <= ap_const_lv1_0;
    m_axi_FM_DDR_BUFF1_WLAST <= ap_const_logic_0;
    m_axi_FM_DDR_BUFF1_WSTRB <= ap_const_lv4_F;
    m_axi_FM_DDR_BUFF1_WUSER <= ap_const_lv1_0;

    m_axi_FM_DDR_BUFF1_WVALID_assign_proc : process(ap_enable_reg_pp3_iter2, exitcond13_reg_1815_pp3_iter1_reg, ap_reg_ioackin_m_axi_FM_DDR_BUFF1_WREADY, ap_block_pp3_stage0_01001)
    begin
        if (((ap_reg_ioackin_m_axi_FM_DDR_BUFF1_WREADY = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (exitcond13_reg_1815_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_01001))) then 
            m_axi_FM_DDR_BUFF1_WVALID <= ap_const_logic_1;
        else 
            m_axi_FM_DDR_BUFF1_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_FM_DDR_BUFF2_ARADDR <= ap_const_lv32_0;
    m_axi_FM_DDR_BUFF2_ARBURST <= ap_const_lv2_0;
    m_axi_FM_DDR_BUFF2_ARCACHE <= ap_const_lv4_0;
    m_axi_FM_DDR_BUFF2_ARID <= ap_const_lv1_0;
    m_axi_FM_DDR_BUFF2_ARLEN <= ap_const_lv32_498;
    m_axi_FM_DDR_BUFF2_ARLOCK <= ap_const_lv2_0;
    m_axi_FM_DDR_BUFF2_ARPROT <= ap_const_lv3_0;
    m_axi_FM_DDR_BUFF2_ARQOS <= ap_const_lv4_0;
    m_axi_FM_DDR_BUFF2_ARREGION <= ap_const_lv4_0;
    m_axi_FM_DDR_BUFF2_ARSIZE <= ap_const_lv3_0;
    m_axi_FM_DDR_BUFF2_ARUSER <= ap_const_lv1_0;

    m_axi_FM_DDR_BUFF2_ARVALID_assign_proc : process(ap_CS_fsm_state11, ap_reg_ioackin_m_axi_FM_DDR_BUFF2_ARREADY)
    begin
        if (((ap_reg_ioackin_m_axi_FM_DDR_BUFF2_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            m_axi_FM_DDR_BUFF2_ARVALID <= ap_const_logic_1;
        else 
            m_axi_FM_DDR_BUFF2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_FM_DDR_BUFF2_AWADDR <= ap_const_lv32_0;
    m_axi_FM_DDR_BUFF2_AWBURST <= ap_const_lv2_0;
    m_axi_FM_DDR_BUFF2_AWCACHE <= ap_const_lv4_0;
    m_axi_FM_DDR_BUFF2_AWID <= ap_const_lv1_0;
    m_axi_FM_DDR_BUFF2_AWLEN <= ap_const_lv32_0;
    m_axi_FM_DDR_BUFF2_AWLOCK <= ap_const_lv2_0;
    m_axi_FM_DDR_BUFF2_AWPROT <= ap_const_lv3_0;
    m_axi_FM_DDR_BUFF2_AWQOS <= ap_const_lv4_0;
    m_axi_FM_DDR_BUFF2_AWREGION <= ap_const_lv4_0;
    m_axi_FM_DDR_BUFF2_AWSIZE <= ap_const_lv3_0;
    m_axi_FM_DDR_BUFF2_AWUSER <= ap_const_lv1_0;
    m_axi_FM_DDR_BUFF2_AWVALID <= ap_const_logic_0;
    m_axi_FM_DDR_BUFF2_BREADY <= ap_const_logic_0;

    m_axi_FM_DDR_BUFF2_RREADY_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond11_reg_1485, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond11_reg_1485 = ap_const_lv1_0))) then 
            m_axi_FM_DDR_BUFF2_RREADY <= ap_const_logic_1;
        else 
            m_axi_FM_DDR_BUFF2_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_FM_DDR_BUFF2_WDATA <= ap_const_lv32_0;
    m_axi_FM_DDR_BUFF2_WID <= ap_const_lv1_0;
    m_axi_FM_DDR_BUFF2_WLAST <= ap_const_logic_0;
    m_axi_FM_DDR_BUFF2_WSTRB <= ap_const_lv4_0;
    m_axi_FM_DDR_BUFF2_WUSER <= ap_const_lv1_0;
    m_axi_FM_DDR_BUFF2_WVALID <= ap_const_logic_0;
    m_axi_WEIGHT_ARADDR <= ap_const_lv64_96(32 - 1 downto 0);
    m_axi_WEIGHT_ARBURST <= ap_const_lv2_0;
    m_axi_WEIGHT_ARCACHE <= ap_const_lv4_0;
    m_axi_WEIGHT_ARID <= ap_const_lv1_0;
    m_axi_WEIGHT_ARLEN <= ap_const_lv32_960;
    m_axi_WEIGHT_ARLOCK <= ap_const_lv2_0;
    m_axi_WEIGHT_ARPROT <= ap_const_lv3_0;
    m_axi_WEIGHT_ARQOS <= ap_const_lv4_0;
    m_axi_WEIGHT_ARREGION <= ap_const_lv4_0;
    m_axi_WEIGHT_ARSIZE <= ap_const_lv3_0;
    m_axi_WEIGHT_ARUSER <= ap_const_lv1_0;

    m_axi_WEIGHT_ARVALID_assign_proc : process(ap_CS_fsm_state21, ap_reg_ioackin_m_axi_WEIGHT_ARREADY)
    begin
        if (((ap_reg_ioackin_m_axi_WEIGHT_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            m_axi_WEIGHT_ARVALID <= ap_const_logic_1;
        else 
            m_axi_WEIGHT_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_WEIGHT_AWADDR <= ap_const_lv32_0;
    m_axi_WEIGHT_AWBURST <= ap_const_lv2_0;
    m_axi_WEIGHT_AWCACHE <= ap_const_lv4_0;
    m_axi_WEIGHT_AWID <= ap_const_lv1_0;
    m_axi_WEIGHT_AWLEN <= ap_const_lv32_0;
    m_axi_WEIGHT_AWLOCK <= ap_const_lv2_0;
    m_axi_WEIGHT_AWPROT <= ap_const_lv3_0;
    m_axi_WEIGHT_AWQOS <= ap_const_lv4_0;
    m_axi_WEIGHT_AWREGION <= ap_const_lv4_0;
    m_axi_WEIGHT_AWSIZE <= ap_const_lv3_0;
    m_axi_WEIGHT_AWUSER <= ap_const_lv1_0;
    m_axi_WEIGHT_AWVALID <= ap_const_logic_0;
    m_axi_WEIGHT_BREADY <= ap_const_logic_0;

    m_axi_WEIGHT_RREADY_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond12_reg_1505, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond12_reg_1505 = ap_const_lv1_0))) then 
            m_axi_WEIGHT_RREADY <= ap_const_logic_1;
        else 
            m_axi_WEIGHT_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_WEIGHT_WDATA <= ap_const_lv32_0;
    m_axi_WEIGHT_WID <= ap_const_lv1_0;
    m_axi_WEIGHT_WLAST <= ap_const_logic_0;
    m_axi_WEIGHT_WSTRB <= ap_const_lv4_0;
    m_axi_WEIGHT_WUSER <= ap_const_lv1_0;
    m_axi_WEIGHT_WVALID <= ap_const_logic_0;
    notlhs_fu_1144_p2 <= "0" when (tmp_17_fu_1130_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_1150_p2 <= "1" when (tmp_18_fu_1140_p1 = ap_const_lv23_0) else "0";
    p_shl10_cast_fu_980_p3 <= (tmp_61_reg_1622 & ap_const_lv2_0);
    p_shl12_cast_fu_1085_p3 <= (tmp_12_fu_1080_p2 & ap_const_lv3_0);
    p_shl13_cast_fu_1101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_1093_p3),12));
    p_shl14_cast_fu_1058_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_1050_p3),9));
    p_shl15_cast_fu_1070_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_1062_p3),9));
    p_shl16_cast_fu_1333_p3 <= (tmp_45_fu_1324_p2 & ap_const_lv2_0);
    p_shl17_cast_fu_1314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_fu_1306_p3),8));
    p_shl18_cast_fu_1402_p3 <= (tmp_38_reg_1764 & ap_const_lv3_0);
    p_shl19_cast_fu_1416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_1409_p3),12));
    p_shl1_cast_fu_830_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_fu_822_p3),12));
    p_shl20_cast_fu_1358_p3 <= (tmp_27_reg_1758 & ap_const_lv3_0);
    p_shl21_cast_fu_1372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_1365_p3),12));
    p_shl22_cast_fu_1274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_1266_p3),9));
    p_shl23_cast_fu_1286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_1278_p3),9));
    p_shl4_cast_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_fu_769_p3),9));
    p_shl5_cast_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_781_p3),9));
    p_shl6_cast_fu_949_p3 <= (tmp_68_fu_945_p1 & ap_const_lv4_0);
        p_shl7_cast_fu_965_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_69_fu_957_p3),12));

    p_shl8_cast_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_64_fu_906_p3),8));
    p_shl9_cast_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_65_fu_918_p3),8));
    p_shl_cast_fu_814_p3 <= (tmp_52_fu_809_p2 & ap_const_lv3_0);
        p_shl_fu_883_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_57_fu_875_p3),64));

    r_1_fu_1012_p2 <= std_logic_vector(unsigned(r1_reg_487) + unsigned(ap_const_lv4_1));
    r_2_fu_1244_p2 <= std_logic_vector(unsigned(r3_reg_521) + unsigned(ap_const_lv4_2));
    r_3_fu_713_p2 <= std_logic_vector(unsigned(r_reg_443) + unsigned(ap_const_lv4_1));
    tmp_10_cast_fu_1034_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c2_reg_498),12));
    tmp_10_fu_1062_p3 <= (chl_reg_509 & ap_const_lv1_0);
    tmp_11_fu_1074_p2 <= std_logic_vector(unsigned(p_shl15_cast_fu_1070_p1) + unsigned(p_shl14_cast_fu_1058_p1));
    tmp_12_cast_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_719_p2),9));
    tmp_12_fu_1080_p2 <= std_logic_vector(unsigned(tmp_11_fu_1074_p2) + unsigned(tmp_4_cast_reg_1660));
    tmp_13_cast_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_reg_443),9));
    tmp_13_fu_1093_p3 <= (tmp_12_fu_1080_p2 & ap_const_lv1_0);
    tmp_14_fu_1105_p2 <= std_logic_vector(unsigned(p_shl13_cast_fu_1101_p1) + unsigned(p_shl12_cast_fu_1085_p3));
    tmp_15_cast_fu_1216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c4_reg_533),12));
    tmp_15_fu_1111_p2 <= std_logic_vector(unsigned(tmp_14_fu_1105_p2) + unsigned(tmp_10_cast_reg_1673));
    tmp_17_cast_fu_1226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_1220_p2),12));
    tmp_17_fu_1130_p4 <= tmp_23_to_int_fu_1126_p1(30 downto 23);
    tmp_18_fu_1140_p1 <= tmp_23_to_int_fu_1126_p1(23 - 1 downto 0);
    tmp_19_cast_fu_1240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_1230_p4),10));
    tmp_19_fu_1156_p2 <= (notrhs_fu_1150_p2 or notlhs_fu_1144_p2);
    tmp_1_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar4_reg_409_pp2_iter1_reg),64));
    tmp_21_fu_1162_p2 <= (tmp_20_fu_576_p2 and tmp_19_fu_1156_p2);
    tmp_22_fu_1168_p3 <= 
        reg_594 when (tmp_21_fu_1162_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_23_fu_744_p2 <= std_logic_vector(unsigned(c_reg_454) + unsigned(kc_cast_reg_1537));
    tmp_23_to_int_fu_1126_p1 <= reg_594;
    tmp_24_fu_1266_p3 <= (chl5_reg_545 & ap_const_lv3_0);
    tmp_25_fu_1278_p3 <= (chl5_reg_545 & ap_const_lv1_0);
    tmp_26_cast_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_744_p2),12));
    tmp_26_fu_1290_p2 <= std_logic_vector(unsigned(p_shl22_cast_fu_1274_p1) + unsigned(p_shl23_cast_fu_1286_p1));
    tmp_27_cast_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_454),12));
    tmp_27_fu_1296_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_1710) + unsigned(tmp_26_fu_1290_p2));
    tmp_28_fu_1365_p3 <= (tmp_27_reg_1758 & ap_const_lv1_0);
    tmp_29_cast_fu_1262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(chl5_reg_545),8));
    tmp_29_fu_1376_p2 <= std_logic_vector(unsigned(p_shl20_cast_fu_1358_p3) + unsigned(p_shl21_cast_fu_1372_p1));
    tmp_2_fu_1210_p2 <= "1" when (unsigned(c4_reg_533) < unsigned(ap_const_lv4_A)) else "0";
    tmp_34_fu_1382_p2 <= std_logic_vector(unsigned(tmp_15_cast_reg_1728) + unsigned(tmp_29_fu_1376_p2));
    tmp_35_cast_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(chl_in_reg_476),10));
    tmp_35_fu_1392_p2 <= std_logic_vector(unsigned(tmp_17_cast_reg_1734) + unsigned(tmp_29_fu_1376_p2));
    tmp_38_fu_1301_p2 <= std_logic_vector(unsigned(tmp_cast_reg_1715) + unsigned(tmp_26_fu_1290_p2));
    tmp_39_fu_1409_p3 <= (tmp_38_reg_1764 & ap_const_lv1_0);
    tmp_3_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kr_reg_421),64));
    tmp_40_fu_1420_p2 <= std_logic_vector(unsigned(p_shl18_cast_fu_1402_p3) + unsigned(p_shl19_cast_fu_1416_p1));
    tmp_41_fu_1426_p2 <= std_logic_vector(unsigned(tmp_15_cast_reg_1728) + unsigned(tmp_40_fu_1420_p2));
    tmp_42_cast_fu_1116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_1111_p2),64));
    tmp_42_fu_1431_p2 <= std_logic_vector(unsigned(tmp_17_cast_reg_1734) + unsigned(tmp_40_fu_1420_p2));
    tmp_43_fu_1306_p3 <= (chl5_reg_545 & ap_const_lv2_0);
    tmp_44_fu_1318_p2 <= std_logic_vector(unsigned(p_shl17_cast_fu_1314_p1) + unsigned(tmp_29_cast_fu_1262_p1));
    tmp_45_fu_1324_p2 <= std_logic_vector(unsigned(tmp_5_cast_reg_1720) + unsigned(tmp_44_fu_1318_p2));
    tmp_46_fu_1341_p2 <= std_logic_vector(unsigned(p_shl16_cast_fu_1333_p3) + unsigned(tmp_65_cast_fu_1329_p1));
    tmp_47_fu_1347_p2 <= std_logic_vector(unsigned(tmp_19_cast_reg_1740) + unsigned(tmp_46_fu_1341_p2));
    tmp_48_fu_769_p3 <= (chl_out_reg_465 & ap_const_lv3_0);
    tmp_49_fu_781_p3 <= (chl_out_reg_465 & ap_const_lv1_0);
    tmp_4_cast_fu_1018_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r1_reg_487),9));
    tmp_4_fu_1220_p2 <= (c4_reg_533 or ap_const_lv4_1);
    tmp_50_fu_793_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_777_p1) - unsigned(p_shl5_cast_fu_789_p1));
    tmp_51_fu_803_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_777_p1) + unsigned(p_shl5_cast_fu_789_p1));
    tmp_52_fu_809_p2 <= std_logic_vector(unsigned(tmp_13_cast_reg_1568) + unsigned(tmp_51_fu_803_p2));
    tmp_53_fu_822_p3 <= (tmp_52_fu_809_p2 & ap_const_lv1_0);
    tmp_54_fu_834_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_814_p3) + unsigned(p_shl1_cast_fu_830_p1));
    tmp_55_cast_fu_1387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_1382_p2),64));
    tmp_55_fu_840_p2 <= std_logic_vector(unsigned(tmp_27_cast_reg_1586) + unsigned(tmp_54_fu_834_p2));
    tmp_56_cast_fu_1397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_1392_p2),64));
    tmp_56_fu_866_p2 <= std_logic_vector(signed(tmp_71_cast_reg_1599) + signed(tmp_35_cast_fu_862_p1));
    tmp_57_fu_875_p3 <= (tmp_56_fu_866_p2 & ap_const_lv2_0);
    tmp_58_fu_887_p2 <= std_logic_vector(signed(tmp_80_cast_fu_871_p1) + signed(p_shl_fu_883_p1));
    tmp_59_fu_893_p2 <= std_logic_vector(unsigned(tmp_58_fu_887_p2) + unsigned(tmp_3_reg_1532));
    tmp_5_cast_fu_1206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_1196_p4),8));
    tmp_5_fu_1230_p4 <= c4_reg_533(3 downto 1);
    tmp_60_fu_898_p1 <= tmp_59_fu_893_p2(13 - 1 downto 0);
    tmp_61_cast_fu_1436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_reg_1790),64));
    tmp_61_fu_902_p1 <= tmp_59_fu_893_p2(11 - 1 downto 0);
    tmp_62_cast_fu_1440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_reg_1795),64));
    tmp_62_fu_987_p2 <= std_logic_vector(unsigned(tmp_60_reg_1617) + unsigned(p_shl10_cast_fu_980_p3));
    tmp_63_fu_992_p2 <= std_logic_vector(unsigned(tmp_62_fu_987_p2) + unsigned(tmp_6_cast_reg_1550));
    tmp_64_fu_906_p3 <= (chl_in_reg_476 & ap_const_lv4_0);
    tmp_65_cast_fu_1329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_45_fu_1324_p2),10));
    tmp_65_fu_918_p3 <= (chl_in_reg_476 & ap_const_lv1_0);
    tmp_66_fu_930_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_914_p1) - unsigned(p_shl9_cast_fu_926_p1));
    tmp_67_fu_940_p2 <= std_logic_vector(signed(tmp_89_cast_fu_936_p1) + signed(tmp_12_cast_reg_1563));
    tmp_68_cast_fu_1444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_reg_1770),64));
    tmp_68_fu_945_p1 <= tmp_67_fu_940_p2(8 - 1 downto 0);
    tmp_69_fu_957_p3 <= (tmp_67_fu_940_p2 & ap_const_lv1_0);
    tmp_6_cast_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kc_reg_432),13));
    tmp_6_fu_1121_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(chl_reg_509),64));
    tmp_70_fu_969_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_949_p3) - unsigned(p_shl7_cast_fu_965_p1));
        tmp_71_cast_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_50_fu_793_p2),10));

    tmp_71_fu_975_p2 <= std_logic_vector(unsigned(tmp_70_fu_969_p2) + unsigned(tmp_26_cast_reg_1581));
    tmp_79_cast_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_840_p2),64));
    tmp_7_fu_1176_p2 <= "1" when (unsigned(r3_reg_521) < unsigned(ap_const_lv4_A)) else "0";
        tmp_80_cast_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_56_fu_866_p2),64));

    tmp_86_cast_fu_997_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_fu_992_p2),64));
        tmp_89_cast_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_66_fu_930_p2),9));

    tmp_8_cast_fu_1182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r3_reg_521),9));
    tmp_8_fu_1050_p3 <= (chl_reg_509 & ap_const_lv3_0);
    tmp_94_cast_fu_1002_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_71_reg_1627),64));
    tmp_9_fu_1186_p2 <= (r3_reg_521 or ap_const_lv4_1);
    tmp_cast_fu_1192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_1186_p2),9));
    tmp_fu_1196_p4 <= r3_reg_521(3 downto 1);
    tmp_s_fu_719_p2 <= std_logic_vector(unsigned(r_reg_443) + unsigned(kr_cast_reg_1519));
end behav;
