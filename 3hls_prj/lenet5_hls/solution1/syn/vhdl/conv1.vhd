-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_FM_DDR_BUFF1_AWVALID : OUT STD_LOGIC;
    m_axi_FM_DDR_BUFF1_AWREADY : IN STD_LOGIC;
    m_axi_FM_DDR_BUFF1_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_FM_DDR_BUFF1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_FM_DDR_BUFF1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_FM_DDR_BUFF1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FM_DDR_BUFF1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FM_DDR_BUFF1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_FM_DDR_BUFF1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF1_WVALID : OUT STD_LOGIC;
    m_axi_FM_DDR_BUFF1_WREADY : IN STD_LOGIC;
    m_axi_FM_DDR_BUFF1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_FM_DDR_BUFF1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF1_WLAST : OUT STD_LOGIC;
    m_axi_FM_DDR_BUFF1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF1_ARVALID : OUT STD_LOGIC;
    m_axi_FM_DDR_BUFF1_ARREADY : IN STD_LOGIC;
    m_axi_FM_DDR_BUFF1_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_FM_DDR_BUFF1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_FM_DDR_BUFF1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_FM_DDR_BUFF1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FM_DDR_BUFF1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FM_DDR_BUFF1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_FM_DDR_BUFF1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF1_RVALID : IN STD_LOGIC;
    m_axi_FM_DDR_BUFF1_RREADY : OUT STD_LOGIC;
    m_axi_FM_DDR_BUFF1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_FM_DDR_BUFF1_RLAST : IN STD_LOGIC;
    m_axi_FM_DDR_BUFF1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FM_DDR_BUFF1_BVALID : IN STD_LOGIC;
    m_axi_FM_DDR_BUFF1_BREADY : OUT STD_LOGIC;
    m_axi_FM_DDR_BUFF1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FM_DDR_BUFF1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF2_AWVALID : OUT STD_LOGIC;
    m_axi_FM_DDR_BUFF2_AWREADY : IN STD_LOGIC;
    m_axi_FM_DDR_BUFF2_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_FM_DDR_BUFF2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_FM_DDR_BUFF2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_FM_DDR_BUFF2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FM_DDR_BUFF2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FM_DDR_BUFF2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_FM_DDR_BUFF2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF2_WVALID : OUT STD_LOGIC;
    m_axi_FM_DDR_BUFF2_WREADY : IN STD_LOGIC;
    m_axi_FM_DDR_BUFF2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_FM_DDR_BUFF2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF2_WLAST : OUT STD_LOGIC;
    m_axi_FM_DDR_BUFF2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF2_ARVALID : OUT STD_LOGIC;
    m_axi_FM_DDR_BUFF2_ARREADY : IN STD_LOGIC;
    m_axi_FM_DDR_BUFF2_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_FM_DDR_BUFF2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_FM_DDR_BUFF2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_FM_DDR_BUFF2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FM_DDR_BUFF2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FM_DDR_BUFF2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_FM_DDR_BUFF2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FM_DDR_BUFF2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF2_RVALID : IN STD_LOGIC;
    m_axi_FM_DDR_BUFF2_RREADY : OUT STD_LOGIC;
    m_axi_FM_DDR_BUFF2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_FM_DDR_BUFF2_RLAST : IN STD_LOGIC;
    m_axi_FM_DDR_BUFF2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FM_DDR_BUFF2_BVALID : IN STD_LOGIC;
    m_axi_FM_DDR_BUFF2_BREADY : OUT STD_LOGIC;
    m_axi_FM_DDR_BUFF2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FM_DDR_BUFF2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_FM_DDR_BUFF2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHT_AWVALID : OUT STD_LOGIC;
    m_axi_WEIGHT_AWREADY : IN STD_LOGIC;
    m_axi_WEIGHT_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_WEIGHT_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHT_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_WEIGHT_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_WEIGHT_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHT_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHT_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHT_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_WEIGHT_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHT_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHT_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHT_WVALID : OUT STD_LOGIC;
    m_axi_WEIGHT_WREADY : IN STD_LOGIC;
    m_axi_WEIGHT_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_WEIGHT_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHT_WLAST : OUT STD_LOGIC;
    m_axi_WEIGHT_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHT_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHT_ARVALID : OUT STD_LOGIC;
    m_axi_WEIGHT_ARREADY : IN STD_LOGIC;
    m_axi_WEIGHT_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_WEIGHT_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHT_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_WEIGHT_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_WEIGHT_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHT_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHT_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHT_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_WEIGHT_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHT_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHT_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHT_RVALID : IN STD_LOGIC;
    m_axi_WEIGHT_RREADY : OUT STD_LOGIC;
    m_axi_WEIGHT_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_WEIGHT_RLAST : IN STD_LOGIC;
    m_axi_WEIGHT_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHT_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHT_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHT_BVALID : IN STD_LOGIC;
    m_axi_WEIGHT_BREADY : OUT STD_LOGIC;
    m_axi_WEIGHT_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHT_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHT_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_BIAS_AWVALID : OUT STD_LOGIC;
    m_axi_BIAS_AWREADY : IN STD_LOGIC;
    m_axi_BIAS_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_BIAS_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_BIAS_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_BIAS_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BIAS_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BIAS_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BIAS_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BIAS_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BIAS_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BIAS_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BIAS_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_BIAS_WVALID : OUT STD_LOGIC;
    m_axi_BIAS_WREADY : IN STD_LOGIC;
    m_axi_BIAS_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_BIAS_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BIAS_WLAST : OUT STD_LOGIC;
    m_axi_BIAS_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_BIAS_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_BIAS_ARVALID : OUT STD_LOGIC;
    m_axi_BIAS_ARREADY : IN STD_LOGIC;
    m_axi_BIAS_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_BIAS_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_BIAS_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_BIAS_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BIAS_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BIAS_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BIAS_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BIAS_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BIAS_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BIAS_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BIAS_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_BIAS_RVALID : IN STD_LOGIC;
    m_axi_BIAS_RREADY : OUT STD_LOGIC;
    m_axi_BIAS_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_BIAS_RLAST : IN STD_LOGIC;
    m_axi_BIAS_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_BIAS_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_BIAS_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BIAS_BVALID : IN STD_LOGIC;
    m_axi_BIAS_BREADY : OUT STD_LOGIC;
    m_axi_BIAS_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BIAS_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_BIAS_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_out1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out1_ce0 : OUT STD_LOGIC;
    conv_out1_we0 : OUT STD_LOGIC;
    conv_out1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_out1_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (85 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (85 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (85 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (85 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (85 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (85 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (85 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (85 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (85 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (85 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (85 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv32_498 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010010011000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_3E800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111110100000000000000000000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_19 : STD_LOGIC_VECTOR (7 downto 0) := "00011001";
    constant ap_const_lv16_148 : STD_LOGIC_VECTOR (15 downto 0) := "0000000101001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv12_34 : STD_LOGIC_VECTOR (11 downto 0) := "000000110100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv11_498 : STD_LOGIC_VECTOR (10 downto 0) := "10010011000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal B_CONV1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal B_CONV1_ce0 : STD_LOGIC;
    signal B_CONV1_we0 : STD_LOGIC;
    signal B_CONV1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pic_in_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal pic_in_ce0 : STD_LOGIC;
    signal pic_in_we0 : STD_LOGIC;
    signal pic_in_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_CONV1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal W_CONV1_ce0 : STD_LOGIC;
    signal W_CONV1_we0 : STD_LOGIC;
    signal W_CONV1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_buff_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal conv1_buff_ce0 : STD_LOGIC;
    signal conv1_buff_we0 : STD_LOGIC;
    signal conv1_buff_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_buff_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_buff_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal conv1_buff_ce1 : STD_LOGIC;
    signal conv1_buff_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal FM_DDR_BUFF1_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal FM_DDR_BUFF1_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond14_reg_1595 : STD_LOGIC_VECTOR (0 downto 0);
    signal FM_DDR_BUFF2_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal tmp_38_fu_1256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal FM_DDR_BUFF2_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal exitcond16_reg_1923 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond16_reg_1923_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal FM_DDR_BUFF2_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal WEIGHT_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal WEIGHT_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal exitcond15_reg_1609 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond15_reg_1609_pp2_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal BIAS_blk_n_AR : STD_LOGIC;
    signal BIAS_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond9_reg_1581 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_reg_409 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_reg_409_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state8_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar8_reg_421 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar8_reg_421_pp1_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state18_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal indvar2_reg_433 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_mul_reg_444 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_urem_reg_455 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar4_reg_591 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_606_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_616 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal reg_622 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal grp_fu_602_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal exitcond9_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond9_reg_1581_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_643_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_next_reg_1585 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal BIAS_read_reg_1590 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond14_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond14_reg_1595_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next4_fu_660_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_next4_reg_1599 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal FM_DDR_BUFF1_read_reg_1604 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond15_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state28_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state29_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state30_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state31_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state32_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state33_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state34_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_state35_pp2_stage0_iter7 : BOOLEAN;
    signal ap_block_state36_pp2_stage0_iter8 : BOOLEAN;
    signal ap_block_state37_pp2_stage0_iter9 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal exitcond15_reg_1609_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond15_reg_1609_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond15_reg_1609_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond15_reg_1609_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond15_reg_1609_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond15_reg_1609_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond15_reg_1609_pp2_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next5_fu_677_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal idx_urem_fu_695_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_mul_fu_703_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_70_reg_1628 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_70_reg_1628_pp2_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_70_reg_1628_pp2_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_70_reg_1628_pp2_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_70_reg_1628_pp2_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_70_reg_1628_pp2_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_70_reg_1628_pp2_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_70_reg_1628_pp2_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_57_fu_735_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_79_reg_1639 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_79_reg_1639_pp2_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_79_reg_1639_pp2_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_79_reg_1639_pp2_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_79_reg_1639_pp2_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_79_reg_1639_pp2_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_79_reg_1639_pp2_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_79_reg_1639_pp2_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal WEIGHT_read_reg_1644 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_84_fu_828_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_84_reg_1649 : STD_LOGIC_VECTOR (8 downto 0);
    signal kr_cast_fu_838_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal kr_cast_reg_1654 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal kr_2_fu_848_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal kr_2_reg_1662 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_cast_fu_854_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_reg_1667 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond8_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kc_cast_fu_858_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal kc_cast_reg_1672 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal kc_2_fu_868_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal kc_2_reg_1680 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_41_cast_fu_874_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_41_cast_reg_1685 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond7_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_6_fu_884_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_6_reg_1693 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal tmp_50_fu_890_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_50_reg_1698 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond6_fu_878_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_cast_fu_895_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_52_cast_reg_1703 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_6_fu_905_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_6_reg_1711 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal exitcond5_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_cast_fu_928_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_64_cast_reg_1721 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal pic_in_load_reg_1726 : STD_LOGIC_VECTOR (31 downto 0);
    signal chl_out_3_fu_938_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal chl_out_3_reg_1734 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal tmp_124_fu_976_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_124_reg_1739 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond4_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv1_buff_addr_5_reg_1745 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal W_CONV1_load_reg_1755 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal r_4_fu_1084_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_4_reg_1763 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal tmp_39_cast_fu_1090_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_39_cast_reg_1768 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond3_fu_1078_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_4_fu_1100_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_4_reg_1776 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal tmp_46_cast_fu_1106_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_46_cast_reg_1781 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond2_fu_1094_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal chl_out_fu_1116_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal chl_out_reg_1789 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal conv1_buff_addr_reg_1794 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond1_fu_1110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal B_CONV1_load_reg_1804 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_fu_1248_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_reg_1809 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_sig_ioackin_m_axi_FM_DDR_BUFF2_AWREADY : STD_LOGIC;
    signal ap_block_state69_io : BOOLEAN;
    signal tmp_40_cast_fu_1262_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_40_cast_reg_1818 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_43_cast_fu_1272_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_43_cast_reg_1823 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_44_cast_fu_1286_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_44_cast_reg_1828 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_47_cast_fu_1296_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_47_cast_reg_1836 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal tmp_45_fu_1290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_cast_fu_1306_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_49_cast_reg_1842 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_53_cast_fu_1320_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_53_cast_reg_1848 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_5_fu_1324_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal chl_out_2_fu_1336_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal chl_out_2_reg_1861 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal tmp_104_fu_1405_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_104_reg_1866 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond_fu_1330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_110_fu_1440_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_110_reg_1872 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_120_fu_1515_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_120_reg_1878 : STD_LOGIC_VECTOR (11 downto 0);
    signal c_5_fu_1520_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal tmp_111_fu_1544_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_111_reg_1898 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_112_fu_1548_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_112_reg_1903 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv1_buff_load_2_reg_1908 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal exitcond16_fu_1564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state94_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state95_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state96_pp3_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_FM_DDR_BUFF2_WREADY : STD_LOGIC;
    signal ap_block_state96_io : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal indvar_next6_fu_1570_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal conv_out1_load_reg_1937 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state18 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state28 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state94 : STD_LOGIC;
    signal ap_phi_mux_indvar_phi_fu_413_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_indvar8_phi_fu_425_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal kr_reg_466 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal kc_reg_477 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_reg_488 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_reg_499 : STD_LOGIC_VECTOR (4 downto 0);
    signal chl_out2_reg_511 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal r1_reg_522 : STD_LOGIC_VECTOR (4 downto 0);
    signal c2_reg_533 : STD_LOGIC_VECTOR (4 downto 0);
    signal chl_out3_reg_544 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal r4_reg_556 : STD_LOGIC_VECTOR (4 downto 0);
    signal c5_reg_568 : STD_LOGIC_VECTOR (4 downto 0);
    signal chl_out6_reg_580 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal indvar9_fu_649_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar1_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_103_cast_fu_834_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_97_fu_923_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_152_cast_fu_1043_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_144_cast_fu_1073_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_112_cast_fu_1196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_fu_1201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_122_cast_fu_1530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_123_cast_fu_1539_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_128_cast_fu_1552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_cast_fu_1556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_137_cast_fu_1560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar5_fu_1576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_BIAS_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_BIAS_ARREADY : STD_LOGIC;
    signal ap_reg_ioackin_m_axi_FM_DDR_BUFF1_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_FM_DDR_BUFF1_ARREADY : STD_LOGIC;
    signal ap_reg_ioackin_m_axi_WEIGHT_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_WEIGHT_ARREADY : STD_LOGIC;
    signal ap_reg_ioackin_m_axi_FM_DDR_BUFF2_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_FM_DDR_BUFF2_WREADY : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_fu_602_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_602_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal grp_fu_606_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_606_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal next_urem_fu_683_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_72_fu_719_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_74_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_fu_729_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_fu_747_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_fu_747_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_763_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_71_fu_772_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_51_cast_fu_769_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_779_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal div7_fu_789_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_783_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_59_cast_fu_792_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_80_fu_796_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_82_fu_806_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_81_fu_802_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_810_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_763_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_83_fu_818_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_70_cast_fu_824_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_62_fu_911_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_96_fu_916_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_121_fu_948_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_67_cast_fu_944_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl10_cast1_fu_956_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_122_fu_964_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_123_fu_970_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_128_fu_981_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl7_cast_fu_989_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl10_cast_fu_960_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_129_fu_993_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_147_cast_fu_999_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_130_fu_1003_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_131_fu_1008_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_132_fu_1020_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl5_cast_fu_1012_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl6_cast_fu_1028_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_133_fu_1032_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_134_fu_1038_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_125_fu_1051_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_141_cast_fu_1048_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl9_cast_fu_1058_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_126_fu_1062_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_127_fu_1068_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_87_fu_1122_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_88_fu_1134_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl13_cast_fu_1130_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl14_cast_fu_1142_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_89_fu_1146_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_107_cast_fu_1152_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_90_fu_1156_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_91_fu_1161_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_92_fu_1173_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl11_cast_fu_1165_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl12_cast_fu_1181_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_93_fu_1185_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_94_fu_1191_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_55_to_int_fu_1206_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_73_fu_1210_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_95_fu_1220_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_1230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_1224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_75_fu_1236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_fu_1242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_1266_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_85_fu_1276_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_48_fu_1300_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_86_fu_1310_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_98_fu_1342_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_99_fu_1354_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl23_cast_fu_1350_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl24_cast_fu_1362_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_100_fu_1366_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_117_cast_fu_1372_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_101_fu_1376_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_102_fu_1381_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_103_fu_1393_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl21_cast_fu_1385_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl22_cast_fu_1401_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_107_fu_1411_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_108_fu_1416_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_109_fu_1428_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl19_cast_fu_1420_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl20_cast_fu_1436_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_113_fu_1446_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_114_fu_1458_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl17_cast_fu_1454_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl18_cast_fu_1466_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_115_fu_1470_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_132_cast_fu_1476_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_116_fu_1480_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_117_fu_1485_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_118_fu_1497_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl15_cast_fu_1489_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl16_cast_fu_1505_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_119_fu_1509_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_105_fu_1526_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_106_fu_1535_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_763_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (85 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal mul_fu_747_p10 : STD_LOGIC_VECTOR (11 downto 0);

    component conv_top_fadd_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_top_fmul_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_top_fcmp_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_top_urem_5nseOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component conv1_B_CONV1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_pic_in IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_W_CONV1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_conv1_buff IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    B_CONV1_U : component conv1_B_CONV1
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_CONV1_address0,
        ce0 => B_CONV1_ce0,
        we0 => B_CONV1_we0,
        d0 => BIAS_read_reg_1590,
        q0 => B_CONV1_q0);

    pic_in_U : component conv1_pic_in
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pic_in_address0,
        ce0 => pic_in_ce0,
        we0 => pic_in_we0,
        d0 => FM_DDR_BUFF1_read_reg_1604,
        q0 => pic_in_q0);

    W_CONV1_U : component conv1_W_CONV1
    generic map (
        DataWidth => 32,
        AddressRange => 150,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_CONV1_address0,
        ce0 => W_CONV1_ce0,
        we0 => W_CONV1_we0,
        d0 => WEIGHT_read_reg_1644,
        q0 => W_CONV1_q0);

    conv1_buff_U : component conv1_conv1_buff
    generic map (
        DataWidth => 32,
        AddressRange => 4704,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv1_buff_address0,
        ce0 => conv1_buff_ce0,
        we0 => conv1_buff_we0,
        d0 => conv1_buff_d0,
        q0 => conv1_buff_q0,
        address1 => conv1_buff_address1,
        ce1 => conv1_buff_ce1,
        q1 => conv1_buff_q1);

    conv_top_fadd_32nbkb_U1 : component conv_top_fadd_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_602_p0,
        din1 => grp_fu_602_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_602_p2);

    conv_top_fmul_32ncud_U2 : component conv_top_fmul_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_606_p0,
        din1 => grp_fu_606_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_606_p2);

    conv_top_fcmp_32ndEe_U3 : component conv_top_fcmp_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_629,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_76_fu_611_p2);

    conv_top_urem_5nseOg_U4 : component conv_top_urem_5nseOg
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_57_fu_735_p3,
        din1 => grp_fu_763_p1,
        ce => grp_fu_763_ce,
        dout => grp_fu_763_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state8);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state18) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state18)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state18);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state28) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state28)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state28);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state94) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state69_io) and (ap_const_logic_1 = ap_CS_fsm_state69) and (tmp_38_fu_1256_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state94)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state94);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif (((ap_const_boolean_0 = ap_block_state69_io) and (ap_const_logic_1 = ap_CS_fsm_state69) and (tmp_38_fu_1256_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_BIAS_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_BIAS_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if (not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_m_axi_BIAS_ARREADY = ap_const_logic_0)))) then 
                        ap_reg_ioackin_m_axi_BIAS_ARREADY <= ap_const_logic_0;
                    elsif (((ap_start = ap_const_logic_1) and (m_axi_BIAS_ARREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_BIAS_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_FM_DDR_BUFF1_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_FM_DDR_BUFF1_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                    if ((ap_sig_ioackin_m_axi_FM_DDR_BUFF1_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_FM_DDR_BUFF1_ARREADY <= ap_const_logic_0;
                    elsif ((m_axi_FM_DDR_BUFF1_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_FM_DDR_BUFF1_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_FM_DDR_BUFF2_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_FM_DDR_BUFF2_AWREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state69) and (tmp_38_fu_1256_p2 = ap_const_lv1_0))) then
                    if ((ap_const_boolean_0 = ap_block_state69_io)) then 
                        ap_reg_ioackin_m_axi_FM_DDR_BUFF2_AWREADY <= ap_const_logic_0;
                    elsif ((m_axi_FM_DDR_BUFF2_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_FM_DDR_BUFF2_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_FM_DDR_BUFF2_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_FM_DDR_BUFF2_WREADY <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (exitcond16_reg_1923_pp3_iter1_reg = ap_const_lv1_0))) then
                    if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then 
                        ap_reg_ioackin_m_axi_FM_DDR_BUFF2_WREADY <= ap_const_logic_0;
                    elsif (((m_axi_FM_DDR_BUFF2_WREADY = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_01001))) then 
                        ap_reg_ioackin_m_axi_FM_DDR_BUFF2_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_WEIGHT_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_WEIGHT_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                    if ((ap_sig_ioackin_m_axi_WEIGHT_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_WEIGHT_ARREADY <= ap_const_logic_0;
                    elsif ((m_axi_WEIGHT_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_WEIGHT_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    c2_reg_533_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1110_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
                c2_reg_533 <= c_4_reg_1776;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state57) and (exitcond3_fu_1078_p2 = ap_const_lv1_0))) then 
                c2_reg_533 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    c5_reg_568_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state69_io) and (tmp_38_fu_1256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state69))) then 
                c5_reg_568 <= ap_const_lv5_0;
            elsif (((exitcond_fu_1330_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
                c5_reg_568 <= c_5_fu_1520_p2;
            end if; 
        end if;
    end process;

    c_reg_499_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_932_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                c_reg_499 <= c_6_reg_1711;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state41) and (exitcond6_fu_878_p2 = ap_const_lv1_0))) then 
                c_reg_499 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    chl_out2_reg_511_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                chl_out2_reg_511 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                chl_out2_reg_511 <= chl_out_3_reg_1734;
            end if; 
        end if;
    end process;

    chl_out3_reg_544_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state58) and (exitcond2_fu_1094_p2 = ap_const_lv1_0))) then 
                chl_out3_reg_544 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
                chl_out3_reg_544 <= chl_out_reg_1789;
            end if; 
        end if;
    end process;

    chl_out6_reg_580_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_45_fu_1290_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
                chl_out6_reg_580 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
                chl_out6_reg_580 <= chl_out_2_reg_1861;
            end if; 
        end if;
    end process;

    indvar2_reg_433_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                indvar2_reg_433 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond15_fu_671_p2 = ap_const_lv1_0))) then 
                indvar2_reg_433 <= indvar_next5_fu_677_p2;
            end if; 
        end if;
    end process;

    indvar4_reg_591_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state69_io) and (ap_const_logic_1 = ap_CS_fsm_state69) and (tmp_38_fu_1256_p2 = ap_const_lv1_0))) then 
                indvar4_reg_591 <= ap_const_lv11_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond16_fu_1564_p2 = ap_const_lv1_0))) then 
                indvar4_reg_591 <= indvar_next6_fu_1570_p2;
            end if; 
        end if;
    end process;

    indvar8_reg_421_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                indvar8_reg_421 <= ap_const_lv11_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond14_reg_1595 = ap_const_lv1_0))) then 
                indvar8_reg_421 <= indvar_next4_reg_1599;
            end if; 
        end if;
    end process;

    indvar_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond9_reg_1581 = ap_const_lv1_0))) then 
                indvar_reg_409 <= indvar_next_reg_1585;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_reg_409 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    kc_reg_477_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_878_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                kc_reg_477 <= kc_2_reg_1680;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state39) and (exitcond8_fu_842_p2 = ap_const_lv1_0))) then 
                kc_reg_477 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    kr_reg_466_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                kr_reg_466 <= ap_const_lv3_0;
            elsif (((exitcond7_fu_862_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                kr_reg_466 <= kr_2_reg_1662;
            end if; 
        end if;
    end process;

    phi_mul_reg_444_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                phi_mul_reg_444 <= ap_const_lv16_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond15_fu_671_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_444 <= next_mul_fu_703_p2;
            end if; 
        end if;
    end process;

    phi_urem_reg_455_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                phi_urem_reg_455 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond15_fu_671_p2 = ap_const_lv1_0))) then 
                phi_urem_reg_455 <= idx_urem_fu_695_p3;
            end if; 
        end if;
    end process;

    r1_reg_522_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_842_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                r1_reg_522 <= ap_const_lv5_0;
            elsif (((exitcond2_fu_1094_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                r1_reg_522 <= r_4_reg_1763;
            end if; 
        end if;
    end process;

    r4_reg_556_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_1078_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                r4_reg_556 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state70) and (tmp_45_fu_1290_p2 = ap_const_lv1_0))) then 
                r4_reg_556 <= r_5_fu_1324_p2;
            end if; 
        end if;
    end process;

    r_reg_488_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_899_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                r_reg_488 <= r_6_reg_1693;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state40) and (exitcond7_fu_862_p2 = ap_const_lv1_0))) then 
                r_reg_488 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    reg_622_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state78))) then 
                reg_622 <= conv1_buff_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                reg_622 <= conv1_buff_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond9_reg_1581 = ap_const_lv1_0))) then
                BIAS_read_reg_1590 <= m_axi_BIAS_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                B_CONV1_load_reg_1804 <= B_CONV1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond14_reg_1595 = ap_const_lv1_0))) then
                FM_DDR_BUFF1_read_reg_1604 <= m_axi_FM_DDR_BUFF1_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond15_reg_1609_pp2_iter7_reg = ap_const_lv1_0))) then
                WEIGHT_read_reg_1644 <= m_axi_WEIGHT_RDATA;
                tmp_84_reg_1649 <= tmp_84_fu_828_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                W_CONV1_load_reg_1755 <= W_CONV1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                c_4_reg_1776 <= c_4_fu_1100_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                c_6_reg_1711 <= c_6_fu_905_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                chl_out_2_reg_1861 <= chl_out_2_fu_1336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                chl_out_3_reg_1734 <= chl_out_3_fu_938_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                chl_out_reg_1789 <= chl_out_fu_1116_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (exitcond4_fu_932_p2 = ap_const_lv1_0))) then
                conv1_buff_addr_5_reg_1745 <= tmp_152_cast_fu_1043_p1(13 - 1 downto 0);
                tmp_124_reg_1739 <= tmp_124_fu_976_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state59) and (exitcond1_fu_1110_p2 = ap_const_lv1_0))) then
                conv1_buff_addr_reg_1794 <= tmp_112_cast_fu_1196_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then
                conv1_buff_load_2_reg_1908 <= conv1_buff_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond16_reg_1923 = ap_const_lv1_0))) then
                conv_out1_load_reg_1937 <= conv_out1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond14_reg_1595 <= exitcond14_fu_654_p2;
                exitcond14_reg_1595_pp1_iter1_reg <= exitcond14_reg_1595;
                indvar8_reg_421_pp1_iter1_reg <= indvar8_reg_421;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                exitcond15_reg_1609 <= exitcond15_fu_671_p2;
                exitcond15_reg_1609_pp2_iter1_reg <= exitcond15_reg_1609;
                tmp_70_reg_1628_pp2_iter1_reg <= tmp_70_reg_1628;
                tmp_79_reg_1639_pp2_iter1_reg <= tmp_79_reg_1639;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                exitcond15_reg_1609_pp2_iter2_reg <= exitcond15_reg_1609_pp2_iter1_reg;
                exitcond15_reg_1609_pp2_iter3_reg <= exitcond15_reg_1609_pp2_iter2_reg;
                exitcond15_reg_1609_pp2_iter4_reg <= exitcond15_reg_1609_pp2_iter3_reg;
                exitcond15_reg_1609_pp2_iter5_reg <= exitcond15_reg_1609_pp2_iter4_reg;
                exitcond15_reg_1609_pp2_iter6_reg <= exitcond15_reg_1609_pp2_iter5_reg;
                exitcond15_reg_1609_pp2_iter7_reg <= exitcond15_reg_1609_pp2_iter6_reg;
                exitcond15_reg_1609_pp2_iter8_reg <= exitcond15_reg_1609_pp2_iter7_reg;
                tmp_70_reg_1628_pp2_iter2_reg <= tmp_70_reg_1628_pp2_iter1_reg;
                tmp_70_reg_1628_pp2_iter3_reg <= tmp_70_reg_1628_pp2_iter2_reg;
                tmp_70_reg_1628_pp2_iter4_reg <= tmp_70_reg_1628_pp2_iter3_reg;
                tmp_70_reg_1628_pp2_iter5_reg <= tmp_70_reg_1628_pp2_iter4_reg;
                tmp_70_reg_1628_pp2_iter6_reg <= tmp_70_reg_1628_pp2_iter5_reg;
                tmp_70_reg_1628_pp2_iter7_reg <= tmp_70_reg_1628_pp2_iter6_reg;
                tmp_79_reg_1639_pp2_iter2_reg <= tmp_79_reg_1639_pp2_iter1_reg;
                tmp_79_reg_1639_pp2_iter3_reg <= tmp_79_reg_1639_pp2_iter2_reg;
                tmp_79_reg_1639_pp2_iter4_reg <= tmp_79_reg_1639_pp2_iter3_reg;
                tmp_79_reg_1639_pp2_iter5_reg <= tmp_79_reg_1639_pp2_iter4_reg;
                tmp_79_reg_1639_pp2_iter6_reg <= tmp_79_reg_1639_pp2_iter5_reg;
                tmp_79_reg_1639_pp2_iter7_reg <= tmp_79_reg_1639_pp2_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                exitcond16_reg_1923 <= exitcond16_fu_1564_p2;
                exitcond16_reg_1923_pp3_iter1_reg <= exitcond16_reg_1923;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond9_reg_1581 <= exitcond9_fu_637_p2;
                exitcond9_reg_1581_pp0_iter1_reg <= exitcond9_reg_1581;
                indvar_reg_409_pp0_iter1_reg <= indvar_reg_409;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                indvar_next4_reg_1599 <= indvar_next4_fu_660_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                indvar_next_reg_1585 <= indvar_next_fu_643_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                kc_2_reg_1680 <= kc_2_fu_868_p2;
                    kc_cast_reg_1672(2 downto 0) <= kc_cast_fu_858_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                kr_2_reg_1662 <= kr_2_fu_848_p2;
                    kr_cast_reg_1654(2 downto 0) <= kr_cast_fu_838_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                pic_in_load_reg_1726 <= pic_in_q0;
                    tmp_64_cast_reg_1721(4 downto 0) <= tmp_64_cast_fu_928_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then
                r_4_reg_1763 <= r_4_fu_1084_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                r_6_reg_1693 <= r_6_fu_884_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state50))) then
                reg_616 <= grp_fu_606_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state78))) then
                reg_629 <= grp_fu_602_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state71) and (exitcond_fu_1330_p2 = ap_const_lv1_0))) then
                    tmp_104_reg_1866(13 downto 2) <= tmp_104_fu_1405_p2(13 downto 2);
                    tmp_110_reg_1872(13 downto 3) <= tmp_110_fu_1440_p2(13 downto 3);
                tmp_120_reg_1878 <= tmp_120_fu_1515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then
                tmp_111_reg_1898 <= tmp_111_fu_1544_p2;
                    tmp_112_reg_1903(13 downto 1) <= tmp_112_fu_1548_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state57) and (exitcond3_fu_1078_p2 = ap_const_lv1_0))) then
                    tmp_39_cast_reg_1768(4 downto 0) <= tmp_39_cast_fu_1090_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state69_io) and (tmp_38_fu_1256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state69))) then
                    tmp_40_cast_reg_1818(4 downto 0) <= tmp_40_cast_fu_1262_p1(4 downto 0);
                    tmp_43_cast_reg_1823(4 downto 1) <= tmp_43_cast_fu_1272_p1(4 downto 1);
                    tmp_44_cast_reg_1828(3 downto 0) <= tmp_44_cast_fu_1286_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) and (exitcond7_fu_862_p2 = ap_const_lv1_0))) then
                    tmp_41_cast_reg_1685(2 downto 0) <= tmp_41_cast_fu_874_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state58) and (exitcond2_fu_1094_p2 = ap_const_lv1_0))) then
                    tmp_46_cast_reg_1781(4 downto 0) <= tmp_46_cast_fu_1106_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_45_fu_1290_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then
                    tmp_47_cast_reg_1836(4 downto 0) <= tmp_47_cast_fu_1296_p1(4 downto 0);
                    tmp_49_cast_reg_1842(4 downto 1) <= tmp_49_cast_fu_1306_p1(4 downto 1);
                    tmp_53_cast_reg_1848(3 downto 0) <= tmp_53_cast_fu_1320_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) and (exitcond6_fu_878_p2 = ap_const_lv1_0))) then
                tmp_50_reg_1698 <= tmp_50_fu_890_p2;
                    tmp_52_cast_reg_1703(4 downto 0) <= tmp_52_cast_fu_895_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then
                tmp_58_reg_1809 <= tmp_58_fu_1248_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond15_fu_671_p2 = ap_const_lv1_0))) then
                tmp_70_reg_1628 <= phi_mul_reg_444(15 downto 13);
                tmp_79_reg_1639 <= mul_fu_747_p2(11 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state39) and (exitcond8_fu_842_p2 = ap_const_lv1_0))) then
                    tmp_cast_reg_1667(2 downto 0) <= tmp_cast_fu_854_p1(2 downto 0);
            end if;
        end if;
    end process;
    kr_cast_reg_1654(4 downto 3) <= "00";
    tmp_cast_reg_1667(5 downto 3) <= "000";
    kc_cast_reg_1672(4 downto 3) <= "00";
    tmp_41_cast_reg_1685(8 downto 3) <= "000000";
    tmp_52_cast_reg_1703(9 downto 5) <= "00000";
    tmp_64_cast_reg_1721(13 downto 5) <= "000000000";
    tmp_39_cast_reg_1768(9 downto 5) <= "00000";
    tmp_46_cast_reg_1781(13 downto 5) <= "000000000";
    tmp_40_cast_reg_1818(9 downto 5) <= "00000";
    tmp_43_cast_reg_1823(0) <= '1';
    tmp_43_cast_reg_1823(9 downto 5) <= "00000";
    tmp_44_cast_reg_1828(8 downto 4) <= "00000";
    tmp_47_cast_reg_1836(13 downto 5) <= "000000000";
    tmp_49_cast_reg_1842(0) <= '1';
    tmp_49_cast_reg_1842(13 downto 5) <= "000000000";
    tmp_53_cast_reg_1848(11 downto 4) <= "00000000";
    tmp_104_reg_1866(1 downto 0) <= "00";
    tmp_110_reg_1872(2 downto 0) <= "100";
    tmp_112_reg_1903(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_FM_DDR_BUFF2_BVALID, ap_CS_fsm_state11, ap_enable_reg_pp1_iter1, ap_CS_fsm_state69, tmp_38_fu_1256_p2, ap_enable_reg_pp3_iter2, ap_CS_fsm_state101, ap_CS_fsm_state21, ap_enable_reg_pp2_iter8, ap_enable_reg_pp0_iter1, exitcond9_fu_637_p2, ap_enable_reg_pp0_iter0, exitcond14_fu_654_p2, ap_enable_reg_pp1_iter0, exitcond15_fu_671_p2, ap_enable_reg_pp2_iter0, ap_CS_fsm_state39, exitcond8_fu_842_p2, ap_CS_fsm_state40, exitcond7_fu_862_p2, ap_CS_fsm_state41, exitcond6_fu_878_p2, ap_CS_fsm_state42, exitcond5_fu_899_p2, ap_CS_fsm_state44, exitcond4_fu_932_p2, ap_CS_fsm_state57, exitcond3_fu_1078_p2, ap_CS_fsm_state58, exitcond2_fu_1094_p2, ap_CS_fsm_state59, exitcond1_fu_1110_p2, ap_block_state69_io, ap_CS_fsm_state70, tmp_45_fu_1290_p2, ap_CS_fsm_state71, exitcond_fu_1330_p2, exitcond16_fu_1564_p2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter9, ap_block_pp3_stage0_subdone, ap_sig_ioackin_m_axi_BIAS_ARREADY, ap_sig_ioackin_m_axi_FM_DDR_BUFF1_ARREADY, ap_sig_ioackin_m_axi_WEIGHT_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_m_axi_BIAS_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond9_fu_637_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond9_fu_637_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_sig_ioackin_m_axi_FM_DDR_BUFF1_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond14_fu_654_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond14_fu_654_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_sig_ioackin_m_axi_WEIGHT_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond15_fu_671_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_enable_reg_pp2_iter9 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_enable_reg_pp2_iter9 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond15_fu_671_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((exitcond8_fu_842_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state40 => 
                if (((exitcond7_fu_862_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state41 => 
                if (((exitcond6_fu_878_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state42 => 
                if (((exitcond5_fu_899_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((exitcond4_fu_932_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state57 => 
                if (((exitcond3_fu_1078_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state58 => 
                if (((exitcond2_fu_1094_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state59 => 
                if (((exitcond1_fu_1110_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state69 => 
                if (((ap_const_boolean_0 = ap_block_state69_io) and (ap_const_logic_1 = ap_CS_fsm_state69) and (tmp_38_fu_1256_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_boolean_0 = ap_block_state69_io) and (tmp_38_fu_1256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state69))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_state69;
                end if;
            when ap_ST_fsm_state70 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state70) and (tmp_45_fu_1290_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state71 => 
                if (((exitcond_fu_1330_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (exitcond16_fu_1564_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (exitcond16_fu_1564_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state97;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                if (((m_axi_FM_DDR_BUFF2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state101))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state101;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    BIAS_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_BIAS_ARREADY)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            BIAS_blk_n_AR <= m_axi_BIAS_ARREADY;
        else 
            BIAS_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    BIAS_blk_n_R_assign_proc : process(m_axi_BIAS_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond9_reg_1581)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond9_reg_1581 = ap_const_lv1_0))) then 
            BIAS_blk_n_R <= m_axi_BIAS_RVALID;
        else 
            BIAS_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    B_CONV1_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state60, ap_enable_reg_pp0_iter2, indvar9_fu_649_p1, tmp_54_fu_1201_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            B_CONV1_address0 <= tmp_54_fu_1201_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            B_CONV1_address0 <= indvar9_fu_649_p1(3 - 1 downto 0);
        else 
            B_CONV1_address0 <= "XXX";
        end if; 
    end process;


    B_CONV1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state60, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            B_CONV1_ce0 <= ap_const_logic_1;
        else 
            B_CONV1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_CONV1_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond9_reg_1581_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond9_reg_1581_pp0_iter1_reg = ap_const_lv1_0))) then 
            B_CONV1_we0 <= ap_const_logic_1;
        else 
            B_CONV1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    FM_DDR_BUFF1_blk_n_AR_assign_proc : process(m_axi_FM_DDR_BUFF1_ARREADY, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            FM_DDR_BUFF1_blk_n_AR <= m_axi_FM_DDR_BUFF1_ARREADY;
        else 
            FM_DDR_BUFF1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    FM_DDR_BUFF1_blk_n_R_assign_proc : process(m_axi_FM_DDR_BUFF1_RVALID, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond14_reg_1595)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond14_reg_1595 = ap_const_lv1_0))) then 
            FM_DDR_BUFF1_blk_n_R <= m_axi_FM_DDR_BUFF1_RVALID;
        else 
            FM_DDR_BUFF1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    FM_DDR_BUFF2_blk_n_AW_assign_proc : process(m_axi_FM_DDR_BUFF2_AWREADY, ap_CS_fsm_state69, tmp_38_fu_1256_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state69) and (tmp_38_fu_1256_p2 = ap_const_lv1_0))) then 
            FM_DDR_BUFF2_blk_n_AW <= m_axi_FM_DDR_BUFF2_AWREADY;
        else 
            FM_DDR_BUFF2_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    FM_DDR_BUFF2_blk_n_B_assign_proc : process(m_axi_FM_DDR_BUFF2_BVALID, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            FM_DDR_BUFF2_blk_n_B <= m_axi_FM_DDR_BUFF2_BVALID;
        else 
            FM_DDR_BUFF2_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    FM_DDR_BUFF2_blk_n_W_assign_proc : process(m_axi_FM_DDR_BUFF2_WREADY, ap_enable_reg_pp3_iter2, ap_block_pp3_stage0, exitcond16_reg_1923_pp3_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (exitcond16_reg_1923_pp3_iter1_reg = ap_const_lv1_0))) then 
            FM_DDR_BUFF2_blk_n_W <= m_axi_FM_DDR_BUFF2_WREADY;
        else 
            FM_DDR_BUFF2_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    WEIGHT_blk_n_AR_assign_proc : process(m_axi_WEIGHT_ARREADY, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            WEIGHT_blk_n_AR <= m_axi_WEIGHT_ARREADY;
        else 
            WEIGHT_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    WEIGHT_blk_n_R_assign_proc : process(m_axi_WEIGHT_RVALID, ap_enable_reg_pp2_iter8, ap_block_pp2_stage0, exitcond15_reg_1609_pp2_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_1) and (exitcond15_reg_1609_pp2_iter7_reg = ap_const_lv1_0))) then 
            WEIGHT_blk_n_R <= m_axi_WEIGHT_RVALID;
        else 
            WEIGHT_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    W_CONV1_address0_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_state45, ap_enable_reg_pp2_iter9, tmp_103_cast_fu_834_p1, tmp_144_cast_fu_1073_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            W_CONV1_address0 <= tmp_144_cast_fu_1073_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter9 = ap_const_logic_1))) then 
            W_CONV1_address0 <= tmp_103_cast_fu_834_p1(8 - 1 downto 0);
        else 
            W_CONV1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    W_CONV1_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_state45, ap_enable_reg_pp2_iter9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter9 = ap_const_logic_1)))) then 
            W_CONV1_ce0 <= ap_const_logic_1;
        else 
            W_CONV1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    W_CONV1_we0_assign_proc : process(ap_block_pp2_stage0_11001, exitcond15_reg_1609_pp2_iter8_reg, ap_enable_reg_pp2_iter9)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter9 = ap_const_logic_1) and (exitcond15_reg_1609_pp2_iter8_reg = ap_const_lv1_0))) then 
            W_CONV1_we0 <= ap_const_logic_1;
        else 
            W_CONV1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(15);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(23);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(80);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state101 <= ap_CS_fsm(85);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state21 <= ap_CS_fsm(16);
    ap_CS_fsm_state27 <= ap_CS_fsm(22);
    ap_CS_fsm_state38 <= ap_CS_fsm(24);
    ap_CS_fsm_state39 <= ap_CS_fsm(25);
    ap_CS_fsm_state40 <= ap_CS_fsm(26);
    ap_CS_fsm_state41 <= ap_CS_fsm(27);
    ap_CS_fsm_state42 <= ap_CS_fsm(28);
    ap_CS_fsm_state43 <= ap_CS_fsm(29);
    ap_CS_fsm_state44 <= ap_CS_fsm(30);
    ap_CS_fsm_state45 <= ap_CS_fsm(31);
    ap_CS_fsm_state46 <= ap_CS_fsm(32);
    ap_CS_fsm_state47 <= ap_CS_fsm(33);
    ap_CS_fsm_state49 <= ap_CS_fsm(35);
    ap_CS_fsm_state50 <= ap_CS_fsm(36);
    ap_CS_fsm_state51 <= ap_CS_fsm(37);
    ap_CS_fsm_state55 <= ap_CS_fsm(41);
    ap_CS_fsm_state56 <= ap_CS_fsm(42);
    ap_CS_fsm_state57 <= ap_CS_fsm(43);
    ap_CS_fsm_state58 <= ap_CS_fsm(44);
    ap_CS_fsm_state59 <= ap_CS_fsm(45);
    ap_CS_fsm_state60 <= ap_CS_fsm(46);
    ap_CS_fsm_state61 <= ap_CS_fsm(47);
    ap_CS_fsm_state62 <= ap_CS_fsm(48);
    ap_CS_fsm_state66 <= ap_CS_fsm(52);
    ap_CS_fsm_state67 <= ap_CS_fsm(53);
    ap_CS_fsm_state68 <= ap_CS_fsm(54);
    ap_CS_fsm_state69 <= ap_CS_fsm(55);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(56);
    ap_CS_fsm_state71 <= ap_CS_fsm(57);
    ap_CS_fsm_state72 <= ap_CS_fsm(58);
    ap_CS_fsm_state73 <= ap_CS_fsm(59);
    ap_CS_fsm_state74 <= ap_CS_fsm(60);
    ap_CS_fsm_state77 <= ap_CS_fsm(63);
    ap_CS_fsm_state78 <= ap_CS_fsm(64);
    ap_CS_fsm_state79 <= ap_CS_fsm(65);
    ap_CS_fsm_state82 <= ap_CS_fsm(68);
    ap_CS_fsm_state83 <= ap_CS_fsm(69);
    ap_CS_fsm_state84 <= ap_CS_fsm(70);
    ap_CS_fsm_state88 <= ap_CS_fsm(74);
    ap_CS_fsm_state89 <= ap_CS_fsm(75);
    ap_CS_fsm_state92 <= ap_CS_fsm(78);
    ap_CS_fsm_state93 <= ap_CS_fsm(79);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_BIAS_RVALID, ap_enable_reg_pp0_iter1, exitcond9_reg_1581)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_BIAS_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond9_reg_1581 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_BIAS_RVALID, ap_enable_reg_pp0_iter1, exitcond9_reg_1581)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_BIAS_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond9_reg_1581 = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(m_axi_FM_DDR_BUFF1_RVALID, ap_enable_reg_pp1_iter1, exitcond14_reg_1595)
    begin
                ap_block_pp1_stage0_11001 <= ((m_axi_FM_DDR_BUFF1_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (exitcond14_reg_1595 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(m_axi_FM_DDR_BUFF1_RVALID, ap_enable_reg_pp1_iter1, exitcond14_reg_1595)
    begin
                ap_block_pp1_stage0_subdone <= ((m_axi_FM_DDR_BUFF1_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (exitcond14_reg_1595 = ap_const_lv1_0));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(m_axi_WEIGHT_RVALID, ap_enable_reg_pp2_iter8, exitcond15_reg_1609_pp2_iter7_reg)
    begin
                ap_block_pp2_stage0_11001 <= ((m_axi_WEIGHT_RVALID = ap_const_logic_0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_1) and (exitcond15_reg_1609_pp2_iter7_reg = ap_const_lv1_0));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(m_axi_WEIGHT_RVALID, ap_enable_reg_pp2_iter8, exitcond15_reg_1609_pp2_iter7_reg)
    begin
                ap_block_pp2_stage0_subdone <= ((m_axi_WEIGHT_RVALID = ap_const_logic_0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_1) and (exitcond15_reg_1609_pp2_iter7_reg = ap_const_lv1_0));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter2, ap_block_state96_io)
    begin
                ap_block_pp3_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state96_io) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter2, ap_block_state96_io)
    begin
                ap_block_pp3_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state96_io) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state19_pp1_stage0_iter1_assign_proc : process(m_axi_FM_DDR_BUFF1_RVALID, exitcond14_reg_1595)
    begin
                ap_block_state19_pp1_stage0_iter1 <= ((m_axi_FM_DDR_BUFF1_RVALID = ap_const_logic_0) and (exitcond14_reg_1595 = ap_const_lv1_0));
    end process;

        ap_block_state20_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp2_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state36_pp2_stage0_iter8_assign_proc : process(m_axi_WEIGHT_RVALID, exitcond15_reg_1609_pp2_iter7_reg)
    begin
                ap_block_state36_pp2_stage0_iter8 <= ((m_axi_WEIGHT_RVALID = ap_const_logic_0) and (exitcond15_reg_1609_pp2_iter7_reg = ap_const_lv1_0));
    end process;

        ap_block_state37_pp2_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state69_io_assign_proc : process(tmp_38_fu_1256_p2, ap_sig_ioackin_m_axi_FM_DDR_BUFF2_AWREADY)
    begin
                ap_block_state69_io <= ((ap_sig_ioackin_m_axi_FM_DDR_BUFF2_AWREADY = ap_const_logic_0) and (tmp_38_fu_1256_p2 = ap_const_lv1_0));
    end process;

        ap_block_state8_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state94_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state95_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state96_io_assign_proc : process(exitcond16_reg_1923_pp3_iter1_reg, ap_sig_ioackin_m_axi_FM_DDR_BUFF2_WREADY)
    begin
                ap_block_state96_io <= ((ap_sig_ioackin_m_axi_FM_DDR_BUFF2_WREADY = ap_const_logic_0) and (exitcond16_reg_1923_pp3_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state96_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage0_iter1_assign_proc : process(m_axi_BIAS_RVALID, exitcond9_reg_1581)
    begin
                ap_block_state9_pp0_stage0_iter1 <= ((m_axi_BIAS_RVALID = ap_const_logic_0) and (exitcond9_reg_1581 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state8_assign_proc : process(exitcond9_fu_637_p2)
    begin
        if ((exitcond9_fu_637_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state18_assign_proc : process(exitcond14_fu_654_p2)
    begin
        if ((exitcond14_fu_654_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state18 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state28_assign_proc : process(exitcond15_fu_671_p2)
    begin
        if ((exitcond15_fu_671_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state28 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state28 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state94_assign_proc : process(exitcond16_fu_1564_p2)
    begin
        if ((exitcond16_fu_1564_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state94 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state94 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_FM_DDR_BUFF2_BVALID, ap_CS_fsm_state101)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((m_axi_FM_DDR_BUFF2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state101)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter8, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter9)
    begin
        if (((ap_enable_reg_pp2_iter9 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar8_phi_fu_425_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond14_reg_1595, indvar8_reg_421, indvar_next4_reg_1599)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond14_reg_1595 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar8_phi_fu_425_p4 <= indvar_next4_reg_1599;
        else 
            ap_phi_mux_indvar8_phi_fu_425_p4 <= indvar8_reg_421;
        end if; 
    end process;


    ap_phi_mux_indvar_phi_fu_413_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond9_reg_1581, indvar_reg_409, indvar_next_reg_1585)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond9_reg_1581 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_phi_fu_413_p4 <= indvar_next_reg_1585;
        else 
            ap_phi_mux_indvar_phi_fu_413_p4 <= indvar_reg_409;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_FM_DDR_BUFF2_BVALID, ap_CS_fsm_state101)
    begin
        if (((m_axi_FM_DDR_BUFF2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state101))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_BIAS_ARREADY_assign_proc : process(m_axi_BIAS_ARREADY, ap_reg_ioackin_m_axi_BIAS_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_BIAS_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_BIAS_ARREADY <= m_axi_BIAS_ARREADY;
        else 
            ap_sig_ioackin_m_axi_BIAS_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_FM_DDR_BUFF1_ARREADY_assign_proc : process(m_axi_FM_DDR_BUFF1_ARREADY, ap_reg_ioackin_m_axi_FM_DDR_BUFF1_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_FM_DDR_BUFF1_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_FM_DDR_BUFF1_ARREADY <= m_axi_FM_DDR_BUFF1_ARREADY;
        else 
            ap_sig_ioackin_m_axi_FM_DDR_BUFF1_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_FM_DDR_BUFF2_AWREADY_assign_proc : process(m_axi_FM_DDR_BUFF2_AWREADY, ap_reg_ioackin_m_axi_FM_DDR_BUFF2_AWREADY)
    begin
        if ((ap_reg_ioackin_m_axi_FM_DDR_BUFF2_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_FM_DDR_BUFF2_AWREADY <= m_axi_FM_DDR_BUFF2_AWREADY;
        else 
            ap_sig_ioackin_m_axi_FM_DDR_BUFF2_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_FM_DDR_BUFF2_WREADY_assign_proc : process(m_axi_FM_DDR_BUFF2_WREADY, ap_reg_ioackin_m_axi_FM_DDR_BUFF2_WREADY)
    begin
        if ((ap_reg_ioackin_m_axi_FM_DDR_BUFF2_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_FM_DDR_BUFF2_WREADY <= m_axi_FM_DDR_BUFF2_WREADY;
        else 
            ap_sig_ioackin_m_axi_FM_DDR_BUFF2_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_WEIGHT_ARREADY_assign_proc : process(m_axi_WEIGHT_ARREADY, ap_reg_ioackin_m_axi_WEIGHT_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_WEIGHT_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_WEIGHT_ARREADY <= m_axi_WEIGHT_ARREADY;
        else 
            ap_sig_ioackin_m_axi_WEIGHT_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    c_4_fu_1100_p2 <= std_logic_vector(unsigned(c2_reg_533) + unsigned(ap_const_lv5_1));
    c_5_fu_1520_p2 <= std_logic_vector(unsigned(c5_reg_568) + unsigned(ap_const_lv5_2));
    c_6_fu_905_p2 <= std_logic_vector(unsigned(c_reg_499) + unsigned(ap_const_lv5_1));
    chl_out_2_fu_1336_p2 <= std_logic_vector(unsigned(chl_out6_reg_580) + unsigned(ap_const_lv3_1));
    chl_out_3_fu_938_p2 <= std_logic_vector(unsigned(chl_out2_reg_511) + unsigned(ap_const_lv3_1));
    chl_out_fu_1116_p2 <= std_logic_vector(unsigned(chl_out3_reg_544) + unsigned(ap_const_lv3_1));

    conv1_buff_address0_assign_proc : process(conv1_buff_addr_5_reg_1745, conv1_buff_addr_reg_1794, ap_CS_fsm_state60, ap_CS_fsm_state72, ap_CS_fsm_state56, ap_CS_fsm_state68, tmp_122_cast_fu_1530_p1, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            conv1_buff_address0 <= tmp_122_cast_fu_1530_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            conv1_buff_address0 <= conv1_buff_addr_reg_1794;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            conv1_buff_address0 <= conv1_buff_addr_5_reg_1745;
        else 
            conv1_buff_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    conv1_buff_address1_assign_proc : process(ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state82, tmp_123_cast_fu_1539_p1, tmp_128_cast_fu_1552_p1, tmp_129_cast_fu_1556_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            conv1_buff_address1 <= tmp_129_cast_fu_1556_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            conv1_buff_address1 <= tmp_128_cast_fu_1552_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            conv1_buff_address1 <= tmp_123_cast_fu_1539_p1(13 - 1 downto 0);
        else 
            conv1_buff_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    conv1_buff_ce0_assign_proc : process(ap_CS_fsm_state60, ap_CS_fsm_state72, ap_CS_fsm_state56, ap_CS_fsm_state68, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            conv1_buff_ce0 <= ap_const_logic_1;
        else 
            conv1_buff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_buff_ce1_assign_proc : process(ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72))) then 
            conv1_buff_ce1 <= ap_const_logic_1;
        else 
            conv1_buff_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_buff_d0_assign_proc : process(reg_629, tmp_58_reg_1809, ap_CS_fsm_state56, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            conv1_buff_d0 <= tmp_58_reg_1809;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            conv1_buff_d0 <= reg_629;
        else 
            conv1_buff_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv1_buff_we0_assign_proc : process(ap_CS_fsm_state56, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            conv1_buff_we0 <= ap_const_logic_1;
        else 
            conv1_buff_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out1_address0_assign_proc : process(ap_block_pp3_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_state93, tmp_137_cast_fu_1560_p1, indvar5_fu_1576_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            conv_out1_address0 <= indvar5_fu_1576_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            conv_out1_address0 <= tmp_137_cast_fu_1560_p1(11 - 1 downto 0);
        else 
            conv_out1_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv_out1_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_CS_fsm_state93)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state93) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            conv_out1_ce0 <= ap_const_logic_1;
        else 
            conv_out1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out1_d0 <= reg_616;

    conv_out1_we0_assign_proc : process(ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            conv_out1_we0 <= ap_const_logic_1;
        else 
            conv_out1_we0 <= ap_const_logic_0;
        end if; 
    end process;

        div7_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_79_reg_1639_pp2_iter7_reg),5));

    exitcond14_fu_654_p2 <= "1" when (ap_phi_mux_indvar8_phi_fu_425_p4 = ap_const_lv11_400) else "0";
    exitcond15_fu_671_p2 <= "1" when (indvar2_reg_433 = ap_const_lv8_96) else "0";
    exitcond16_fu_1564_p2 <= "1" when (indvar4_reg_591 = ap_const_lv11_498) else "0";
    exitcond1_fu_1110_p2 <= "1" when (chl_out3_reg_544 = ap_const_lv3_6) else "0";
    exitcond2_fu_1094_p2 <= "1" when (c2_reg_533 = ap_const_lv5_1C) else "0";
    exitcond3_fu_1078_p2 <= "1" when (r1_reg_522 = ap_const_lv5_1C) else "0";
    exitcond4_fu_932_p2 <= "1" when (chl_out2_reg_511 = ap_const_lv3_6) else "0";
    exitcond5_fu_899_p2 <= "1" when (c_reg_499 = ap_const_lv5_1C) else "0";
    exitcond6_fu_878_p2 <= "1" when (r_reg_488 = ap_const_lv5_1C) else "0";
    exitcond7_fu_862_p2 <= "1" when (kc_reg_477 = ap_const_lv3_5) else "0";
    exitcond8_fu_842_p2 <= "1" when (kr_reg_466 = ap_const_lv3_5) else "0";
    exitcond9_fu_637_p2 <= "1" when (ap_phi_mux_indvar_phi_fu_413_p4 = ap_const_lv3_6) else "0";
    exitcond_fu_1330_p2 <= "1" when (chl_out6_reg_580 = ap_const_lv3_6) else "0";

    grp_fu_602_p0_assign_proc : process(reg_622, reg_629, ap_CS_fsm_state51, ap_CS_fsm_state62, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state84)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            grp_fu_602_p0 <= reg_629;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            grp_fu_602_p0 <= reg_622;
        else 
            grp_fu_602_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_602_p1_assign_proc : process(reg_616, reg_622, B_CONV1_load_reg_1804, conv1_buff_load_2_reg_1908, ap_CS_fsm_state51, ap_CS_fsm_state62, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state84)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            grp_fu_602_p1 <= reg_622;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_fu_602_p1 <= conv1_buff_load_2_reg_1908;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            grp_fu_602_p1 <= B_CONV1_load_reg_1804;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_602_p1 <= reg_616;
        else 
            grp_fu_602_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_606_p0_assign_proc : process(reg_629, pic_in_load_reg_1726, ap_CS_fsm_state47, ap_CS_fsm_state89)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            grp_fu_606_p0 <= reg_629;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_606_p0 <= pic_in_load_reg_1726;
        else 
            grp_fu_606_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_606_p1_assign_proc : process(W_CONV1_load_reg_1755, ap_CS_fsm_state47, ap_CS_fsm_state89)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            grp_fu_606_p1 <= ap_const_lv32_3E800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_606_p1 <= W_CONV1_load_reg_1755;
        else 
            grp_fu_606_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_763_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            grp_fu_763_ce <= ap_const_logic_1;
        else 
            grp_fu_763_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_763_p1 <= ap_const_lv5_5(4 - 1 downto 0);
    idx_urem_fu_695_p3 <= 
        next_urem_fu_683_p2 when (tmp_fu_689_p2(0) = '1') else 
        ap_const_lv8_0;
    indvar1_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar8_reg_421_pp1_iter1_reg),64));
    indvar5_fu_1576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar4_reg_591),64));
    indvar9_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar_reg_409_pp0_iter1_reg),64));
    indvar_next4_fu_660_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar8_phi_fu_425_p4) + unsigned(ap_const_lv11_1));
    indvar_next5_fu_677_p2 <= std_logic_vector(unsigned(indvar2_reg_433) + unsigned(ap_const_lv8_1));
    indvar_next6_fu_1570_p2 <= std_logic_vector(unsigned(indvar4_reg_591) + unsigned(ap_const_lv11_1));
    indvar_next_fu_643_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_phi_fu_413_p4) + unsigned(ap_const_lv3_1));
    kc_2_fu_868_p2 <= std_logic_vector(unsigned(kc_reg_477) + unsigned(ap_const_lv3_1));
    kc_cast_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kc_reg_477),5));
    kr_2_fu_848_p2 <= std_logic_vector(unsigned(kr_reg_466) + unsigned(ap_const_lv3_1));
    kr_cast_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kr_reg_466),5));
    m_axi_BIAS_ARADDR <= ap_const_lv32_0;
    m_axi_BIAS_ARBURST <= ap_const_lv2_0;
    m_axi_BIAS_ARCACHE <= ap_const_lv4_0;
    m_axi_BIAS_ARID <= ap_const_lv1_0;
    m_axi_BIAS_ARLEN <= ap_const_lv32_6;
    m_axi_BIAS_ARLOCK <= ap_const_lv2_0;
    m_axi_BIAS_ARPROT <= ap_const_lv3_0;
    m_axi_BIAS_ARQOS <= ap_const_lv4_0;
    m_axi_BIAS_ARREGION <= ap_const_lv4_0;
    m_axi_BIAS_ARSIZE <= ap_const_lv3_0;
    m_axi_BIAS_ARUSER <= ap_const_lv1_0;

    m_axi_BIAS_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_reg_ioackin_m_axi_BIAS_ARREADY)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_reg_ioackin_m_axi_BIAS_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_BIAS_ARVALID <= ap_const_logic_1;
        else 
            m_axi_BIAS_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_BIAS_AWADDR <= ap_const_lv32_0;
    m_axi_BIAS_AWBURST <= ap_const_lv2_0;
    m_axi_BIAS_AWCACHE <= ap_const_lv4_0;
    m_axi_BIAS_AWID <= ap_const_lv1_0;
    m_axi_BIAS_AWLEN <= ap_const_lv32_0;
    m_axi_BIAS_AWLOCK <= ap_const_lv2_0;
    m_axi_BIAS_AWPROT <= ap_const_lv3_0;
    m_axi_BIAS_AWQOS <= ap_const_lv4_0;
    m_axi_BIAS_AWREGION <= ap_const_lv4_0;
    m_axi_BIAS_AWSIZE <= ap_const_lv3_0;
    m_axi_BIAS_AWUSER <= ap_const_lv1_0;
    m_axi_BIAS_AWVALID <= ap_const_logic_0;
    m_axi_BIAS_BREADY <= ap_const_logic_0;

    m_axi_BIAS_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond9_reg_1581, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond9_reg_1581 = ap_const_lv1_0))) then 
            m_axi_BIAS_RREADY <= ap_const_logic_1;
        else 
            m_axi_BIAS_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_BIAS_WDATA <= ap_const_lv32_0;
    m_axi_BIAS_WID <= ap_const_lv1_0;
    m_axi_BIAS_WLAST <= ap_const_logic_0;
    m_axi_BIAS_WSTRB <= ap_const_lv4_0;
    m_axi_BIAS_WUSER <= ap_const_lv1_0;
    m_axi_BIAS_WVALID <= ap_const_logic_0;
    m_axi_FM_DDR_BUFF1_ARADDR <= ap_const_lv32_0;
    m_axi_FM_DDR_BUFF1_ARBURST <= ap_const_lv2_0;
    m_axi_FM_DDR_BUFF1_ARCACHE <= ap_const_lv4_0;
    m_axi_FM_DDR_BUFF1_ARID <= ap_const_lv1_0;
    m_axi_FM_DDR_BUFF1_ARLEN <= ap_const_lv32_400;
    m_axi_FM_DDR_BUFF1_ARLOCK <= ap_const_lv2_0;
    m_axi_FM_DDR_BUFF1_ARPROT <= ap_const_lv3_0;
    m_axi_FM_DDR_BUFF1_ARQOS <= ap_const_lv4_0;
    m_axi_FM_DDR_BUFF1_ARREGION <= ap_const_lv4_0;
    m_axi_FM_DDR_BUFF1_ARSIZE <= ap_const_lv3_0;
    m_axi_FM_DDR_BUFF1_ARUSER <= ap_const_lv1_0;

    m_axi_FM_DDR_BUFF1_ARVALID_assign_proc : process(ap_CS_fsm_state11, ap_reg_ioackin_m_axi_FM_DDR_BUFF1_ARREADY)
    begin
        if (((ap_reg_ioackin_m_axi_FM_DDR_BUFF1_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            m_axi_FM_DDR_BUFF1_ARVALID <= ap_const_logic_1;
        else 
            m_axi_FM_DDR_BUFF1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_FM_DDR_BUFF1_AWADDR <= ap_const_lv32_0;
    m_axi_FM_DDR_BUFF1_AWBURST <= ap_const_lv2_0;
    m_axi_FM_DDR_BUFF1_AWCACHE <= ap_const_lv4_0;
    m_axi_FM_DDR_BUFF1_AWID <= ap_const_lv1_0;
    m_axi_FM_DDR_BUFF1_AWLEN <= ap_const_lv32_0;
    m_axi_FM_DDR_BUFF1_AWLOCK <= ap_const_lv2_0;
    m_axi_FM_DDR_BUFF1_AWPROT <= ap_const_lv3_0;
    m_axi_FM_DDR_BUFF1_AWQOS <= ap_const_lv4_0;
    m_axi_FM_DDR_BUFF1_AWREGION <= ap_const_lv4_0;
    m_axi_FM_DDR_BUFF1_AWSIZE <= ap_const_lv3_0;
    m_axi_FM_DDR_BUFF1_AWUSER <= ap_const_lv1_0;
    m_axi_FM_DDR_BUFF1_AWVALID <= ap_const_logic_0;
    m_axi_FM_DDR_BUFF1_BREADY <= ap_const_logic_0;

    m_axi_FM_DDR_BUFF1_RREADY_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond14_reg_1595, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond14_reg_1595 = ap_const_lv1_0))) then 
            m_axi_FM_DDR_BUFF1_RREADY <= ap_const_logic_1;
        else 
            m_axi_FM_DDR_BUFF1_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_FM_DDR_BUFF1_WDATA <= ap_const_lv32_0;
    m_axi_FM_DDR_BUFF1_WID <= ap_const_lv1_0;
    m_axi_FM_DDR_BUFF1_WLAST <= ap_const_logic_0;
    m_axi_FM_DDR_BUFF1_WSTRB <= ap_const_lv4_0;
    m_axi_FM_DDR_BUFF1_WUSER <= ap_const_lv1_0;
    m_axi_FM_DDR_BUFF1_WVALID <= ap_const_logic_0;
    m_axi_FM_DDR_BUFF2_ARADDR <= ap_const_lv32_0;
    m_axi_FM_DDR_BUFF2_ARBURST <= ap_const_lv2_0;
    m_axi_FM_DDR_BUFF2_ARCACHE <= ap_const_lv4_0;
    m_axi_FM_DDR_BUFF2_ARID <= ap_const_lv1_0;
    m_axi_FM_DDR_BUFF2_ARLEN <= ap_const_lv32_0;
    m_axi_FM_DDR_BUFF2_ARLOCK <= ap_const_lv2_0;
    m_axi_FM_DDR_BUFF2_ARPROT <= ap_const_lv3_0;
    m_axi_FM_DDR_BUFF2_ARQOS <= ap_const_lv4_0;
    m_axi_FM_DDR_BUFF2_ARREGION <= ap_const_lv4_0;
    m_axi_FM_DDR_BUFF2_ARSIZE <= ap_const_lv3_0;
    m_axi_FM_DDR_BUFF2_ARUSER <= ap_const_lv1_0;
    m_axi_FM_DDR_BUFF2_ARVALID <= ap_const_logic_0;
    m_axi_FM_DDR_BUFF2_AWADDR <= ap_const_lv32_0;
    m_axi_FM_DDR_BUFF2_AWBURST <= ap_const_lv2_0;
    m_axi_FM_DDR_BUFF2_AWCACHE <= ap_const_lv4_0;
    m_axi_FM_DDR_BUFF2_AWID <= ap_const_lv1_0;
    m_axi_FM_DDR_BUFF2_AWLEN <= ap_const_lv32_498;
    m_axi_FM_DDR_BUFF2_AWLOCK <= ap_const_lv2_0;
    m_axi_FM_DDR_BUFF2_AWPROT <= ap_const_lv3_0;
    m_axi_FM_DDR_BUFF2_AWQOS <= ap_const_lv4_0;
    m_axi_FM_DDR_BUFF2_AWREGION <= ap_const_lv4_0;
    m_axi_FM_DDR_BUFF2_AWSIZE <= ap_const_lv3_0;
    m_axi_FM_DDR_BUFF2_AWUSER <= ap_const_lv1_0;

    m_axi_FM_DDR_BUFF2_AWVALID_assign_proc : process(ap_CS_fsm_state69, tmp_38_fu_1256_p2, ap_reg_ioackin_m_axi_FM_DDR_BUFF2_AWREADY)
    begin
        if (((ap_reg_ioackin_m_axi_FM_DDR_BUFF2_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state69) and (tmp_38_fu_1256_p2 = ap_const_lv1_0))) then 
            m_axi_FM_DDR_BUFF2_AWVALID <= ap_const_logic_1;
        else 
            m_axi_FM_DDR_BUFF2_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_FM_DDR_BUFF2_BREADY_assign_proc : process(m_axi_FM_DDR_BUFF2_BVALID, ap_CS_fsm_state101)
    begin
        if (((m_axi_FM_DDR_BUFF2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state101))) then 
            m_axi_FM_DDR_BUFF2_BREADY <= ap_const_logic_1;
        else 
            m_axi_FM_DDR_BUFF2_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_FM_DDR_BUFF2_RREADY <= ap_const_logic_0;
    m_axi_FM_DDR_BUFF2_WDATA <= conv_out1_load_reg_1937;
    m_axi_FM_DDR_BUFF2_WID <= ap_const_lv1_0;
    m_axi_FM_DDR_BUFF2_WLAST <= ap_const_logic_0;
    m_axi_FM_DDR_BUFF2_WSTRB <= ap_const_lv4_F;
    m_axi_FM_DDR_BUFF2_WUSER <= ap_const_lv1_0;

    m_axi_FM_DDR_BUFF2_WVALID_assign_proc : process(ap_enable_reg_pp3_iter2, exitcond16_reg_1923_pp3_iter1_reg, ap_reg_ioackin_m_axi_FM_DDR_BUFF2_WREADY, ap_block_pp3_stage0_01001)
    begin
        if (((ap_reg_ioackin_m_axi_FM_DDR_BUFF2_WREADY = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (exitcond16_reg_1923_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_01001))) then 
            m_axi_FM_DDR_BUFF2_WVALID <= ap_const_logic_1;
        else 
            m_axi_FM_DDR_BUFF2_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_WEIGHT_ARADDR <= ap_const_lv32_0;
    m_axi_WEIGHT_ARBURST <= ap_const_lv2_0;
    m_axi_WEIGHT_ARCACHE <= ap_const_lv4_0;
    m_axi_WEIGHT_ARID <= ap_const_lv1_0;
    m_axi_WEIGHT_ARLEN <= ap_const_lv32_96;
    m_axi_WEIGHT_ARLOCK <= ap_const_lv2_0;
    m_axi_WEIGHT_ARPROT <= ap_const_lv3_0;
    m_axi_WEIGHT_ARQOS <= ap_const_lv4_0;
    m_axi_WEIGHT_ARREGION <= ap_const_lv4_0;
    m_axi_WEIGHT_ARSIZE <= ap_const_lv3_0;
    m_axi_WEIGHT_ARUSER <= ap_const_lv1_0;

    m_axi_WEIGHT_ARVALID_assign_proc : process(ap_CS_fsm_state21, ap_reg_ioackin_m_axi_WEIGHT_ARREADY)
    begin
        if (((ap_reg_ioackin_m_axi_WEIGHT_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            m_axi_WEIGHT_ARVALID <= ap_const_logic_1;
        else 
            m_axi_WEIGHT_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_WEIGHT_AWADDR <= ap_const_lv32_0;
    m_axi_WEIGHT_AWBURST <= ap_const_lv2_0;
    m_axi_WEIGHT_AWCACHE <= ap_const_lv4_0;
    m_axi_WEIGHT_AWID <= ap_const_lv1_0;
    m_axi_WEIGHT_AWLEN <= ap_const_lv32_0;
    m_axi_WEIGHT_AWLOCK <= ap_const_lv2_0;
    m_axi_WEIGHT_AWPROT <= ap_const_lv3_0;
    m_axi_WEIGHT_AWQOS <= ap_const_lv4_0;
    m_axi_WEIGHT_AWREGION <= ap_const_lv4_0;
    m_axi_WEIGHT_AWSIZE <= ap_const_lv3_0;
    m_axi_WEIGHT_AWUSER <= ap_const_lv1_0;
    m_axi_WEIGHT_AWVALID <= ap_const_logic_0;
    m_axi_WEIGHT_BREADY <= ap_const_logic_0;

    m_axi_WEIGHT_RREADY_assign_proc : process(ap_enable_reg_pp2_iter8, exitcond15_reg_1609_pp2_iter7_reg, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter8 = ap_const_logic_1) and (exitcond15_reg_1609_pp2_iter7_reg = ap_const_lv1_0))) then 
            m_axi_WEIGHT_RREADY <= ap_const_logic_1;
        else 
            m_axi_WEIGHT_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_WEIGHT_WDATA <= ap_const_lv32_0;
    m_axi_WEIGHT_WID <= ap_const_lv1_0;
    m_axi_WEIGHT_WLAST <= ap_const_logic_0;
    m_axi_WEIGHT_WSTRB <= ap_const_lv4_0;
    m_axi_WEIGHT_WUSER <= ap_const_lv1_0;
    m_axi_WEIGHT_WVALID <= ap_const_logic_0;
    mul_fu_747_p1 <= mul_fu_747_p10(5 - 1 downto 0);
    mul_fu_747_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_735_p3),12));
    mul_fu_747_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv12_34) * unsigned(mul_fu_747_p1), 12));
    next_mul_fu_703_p2 <= std_logic_vector(unsigned(ap_const_lv16_148) + unsigned(phi_mul_reg_444));
    next_urem_fu_683_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(phi_urem_reg_455));
    notlhs_fu_1224_p2 <= "0" when (tmp_73_fu_1210_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_1230_p2 <= "1" when (tmp_95_fu_1220_p1 = ap_const_lv23_0) else "0";
    p_shl10_cast1_fu_956_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_121_fu_948_p3),6));
    p_shl10_cast_fu_960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_121_fu_948_p3),9));
    p_shl11_cast_fu_1165_p3 <= (tmp_91_fu_1161_p1 & ap_const_lv5_0);
        p_shl12_cast_fu_1181_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_92_fu_1173_p3),14));

    p_shl13_cast_fu_1130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_87_fu_1122_p3),9));
    p_shl14_cast_fu_1142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_88_fu_1134_p3),9));
    p_shl15_cast_fu_1489_p3 <= (tmp_117_fu_1485_p1 & ap_const_lv4_0);
        p_shl16_cast_fu_1505_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_118_fu_1497_p3),12));

    p_shl17_cast_fu_1454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_113_fu_1446_p3),8));
    p_shl18_cast_fu_1466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_114_fu_1458_p3),8));
    p_shl19_cast_fu_1420_p3 <= (tmp_108_fu_1416_p1 & ap_const_lv5_0);
    p_shl1_cast_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_71_fu_772_p3),11));
        p_shl20_cast_fu_1436_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_109_fu_1428_p3),14));

    p_shl21_cast_fu_1385_p3 <= (tmp_102_fu_1381_p1 & ap_const_lv5_0);
        p_shl22_cast_fu_1401_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_103_fu_1393_p3),14));

    p_shl23_cast_fu_1350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_98_fu_1342_p3),9));
    p_shl24_cast_fu_1362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_99_fu_1354_p3),9));
    p_shl5_cast_fu_1012_p3 <= (tmp_131_fu_1008_p1 & ap_const_lv5_0);
        p_shl6_cast_fu_1028_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_fu_1020_p3),14));

    p_shl7_cast_fu_989_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_128_fu_981_p3),9));
    p_shl9_cast_fu_1058_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_125_fu_1051_p3),9));
    p_shl_cast_fu_810_p3 <= (tmp_82_fu_806_p1 & ap_const_lv2_0);

    pic_in_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_state42, ap_enable_reg_pp1_iter2, indvar1_fu_666_p1, tmp_97_fu_923_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            pic_in_address0 <= tmp_97_fu_923_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            pic_in_address0 <= indvar1_fu_666_p1(10 - 1 downto 0);
        else 
            pic_in_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    pic_in_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state42, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            pic_in_ce0 <= ap_const_logic_1;
        else 
            pic_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pic_in_we0_assign_proc : process(ap_block_pp1_stage0_11001, exitcond14_reg_1595_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (exitcond14_reg_1595_pp1_iter1_reg = ap_const_lv1_0))) then 
            pic_in_we0 <= ap_const_logic_1;
        else 
            pic_in_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_4_fu_1084_p2 <= std_logic_vector(unsigned(r1_reg_522) + unsigned(ap_const_lv5_1));
    r_5_fu_1324_p2 <= std_logic_vector(unsigned(r4_reg_556) + unsigned(ap_const_lv5_2));
    r_6_fu_884_p2 <= std_logic_vector(unsigned(r_reg_488) + unsigned(ap_const_lv5_1));
    tmp_100_fu_1366_p2 <= std_logic_vector(unsigned(p_shl23_cast_fu_1350_p1) - unsigned(p_shl24_cast_fu_1362_p1));
    tmp_101_fu_1376_p2 <= std_logic_vector(signed(tmp_117_cast_fu_1372_p1) + signed(tmp_40_cast_reg_1818));
    tmp_102_fu_1381_p1 <= tmp_101_fu_1376_p2(9 - 1 downto 0);
    tmp_103_cast_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_84_reg_1649),64));
    tmp_103_fu_1393_p3 <= (tmp_101_fu_1376_p2 & ap_const_lv2_0);
    tmp_104_fu_1405_p2 <= std_logic_vector(unsigned(p_shl21_cast_fu_1385_p3) - unsigned(p_shl22_cast_fu_1401_p1));
    tmp_105_fu_1526_p2 <= std_logic_vector(unsigned(tmp_104_reg_1866) + unsigned(tmp_47_cast_reg_1836));
    tmp_106_fu_1535_p2 <= std_logic_vector(unsigned(tmp_104_reg_1866) + unsigned(tmp_49_cast_reg_1842));
        tmp_107_cast_fu_1152_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_89_fu_1146_p2),10));

    tmp_107_fu_1411_p2 <= std_logic_vector(signed(tmp_117_cast_fu_1372_p1) + signed(tmp_43_cast_reg_1823));
    tmp_108_fu_1416_p1 <= tmp_107_fu_1411_p2(9 - 1 downto 0);
    tmp_109_fu_1428_p3 <= (tmp_107_fu_1411_p2 & ap_const_lv2_0);
    tmp_110_fu_1440_p2 <= std_logic_vector(unsigned(p_shl19_cast_fu_1420_p3) - unsigned(p_shl20_cast_fu_1436_p1));
    tmp_111_fu_1544_p2 <= std_logic_vector(unsigned(tmp_110_reg_1872) + unsigned(tmp_47_cast_reg_1836));
    tmp_112_cast_fu_1196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_94_fu_1191_p2),64));
    tmp_112_fu_1548_p2 <= std_logic_vector(unsigned(tmp_110_reg_1872) + unsigned(tmp_49_cast_reg_1842));
    tmp_113_fu_1446_p3 <= (chl_out6_reg_580 & ap_const_lv4_0);
    tmp_114_fu_1458_p3 <= (chl_out6_reg_580 & ap_const_lv1_0);
    tmp_115_fu_1470_p2 <= std_logic_vector(unsigned(p_shl17_cast_fu_1454_p1) - unsigned(p_shl18_cast_fu_1466_p1));
    tmp_116_fu_1480_p2 <= std_logic_vector(signed(tmp_132_cast_fu_1476_p1) + signed(tmp_44_cast_reg_1828));
        tmp_117_cast_fu_1372_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_100_fu_1366_p2),10));

    tmp_117_fu_1485_p1 <= tmp_116_fu_1480_p2(8 - 1 downto 0);
    tmp_118_fu_1497_p3 <= (tmp_116_fu_1480_p2 & ap_const_lv1_0);
    tmp_119_fu_1509_p2 <= std_logic_vector(unsigned(p_shl15_cast_fu_1489_p3) - unsigned(p_shl16_cast_fu_1505_p1));
    tmp_120_fu_1515_p2 <= std_logic_vector(unsigned(tmp_119_fu_1509_p2) + unsigned(tmp_53_cast_reg_1848));
    tmp_121_fu_948_p3 <= (chl_out2_reg_511 & ap_const_lv2_0);
    tmp_122_cast_fu_1530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_105_fu_1526_p2),64));
    tmp_122_fu_964_p2 <= std_logic_vector(unsigned(tmp_67_cast_fu_944_p1) + unsigned(p_shl10_cast1_fu_956_p1));
    tmp_123_cast_fu_1539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_106_fu_1535_p2),64));
    tmp_123_fu_970_p2 <= std_logic_vector(unsigned(ap_const_lv6_5) + unsigned(tmp_122_fu_964_p2));
    tmp_124_fu_976_p2 <= std_logic_vector(unsigned(tmp_123_fu_970_p2) + unsigned(tmp_cast_reg_1667));
    tmp_125_fu_1051_p3 <= (tmp_124_reg_1739 & ap_const_lv2_0);
    tmp_126_fu_1062_p2 <= std_logic_vector(unsigned(tmp_141_cast_fu_1048_p1) + unsigned(p_shl9_cast_fu_1058_p1));
    tmp_127_fu_1068_p2 <= std_logic_vector(unsigned(tmp_126_fu_1062_p2) + unsigned(tmp_41_cast_reg_1685));
    tmp_128_cast_fu_1552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_111_reg_1898),64));
    tmp_128_fu_981_p3 <= (chl_out2_reg_511 & ap_const_lv5_0);
    tmp_129_cast_fu_1556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_reg_1903),64));
    tmp_129_fu_993_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_989_p1) - unsigned(p_shl10_cast_fu_960_p1));
    tmp_130_fu_1003_p2 <= std_logic_vector(signed(tmp_147_cast_fu_999_p1) + signed(tmp_52_cast_reg_1703));
    tmp_131_fu_1008_p1 <= tmp_130_fu_1003_p2(9 - 1 downto 0);
        tmp_132_cast_fu_1476_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_115_fu_1470_p2),9));

    tmp_132_fu_1020_p3 <= (tmp_130_fu_1003_p2 & ap_const_lv2_0);
    tmp_133_fu_1032_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_1012_p3) - unsigned(p_shl6_cast_fu_1028_p1));
    tmp_134_fu_1038_p2 <= std_logic_vector(unsigned(tmp_133_fu_1032_p2) + unsigned(tmp_64_cast_reg_1721));
    tmp_137_cast_fu_1560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_120_reg_1878),64));
    tmp_141_cast_fu_1048_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_124_reg_1739),9));
    tmp_144_cast_fu_1073_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_127_fu_1068_p2),64));
        tmp_147_cast_fu_999_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_129_fu_993_p2),10));

    tmp_152_cast_fu_1043_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_134_fu_1038_p2),64));
    tmp_38_fu_1256_p2 <= "1" when (unsigned(r4_reg_556) < unsigned(ap_const_lv5_1C)) else "0";
    tmp_39_cast_fu_1090_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r1_reg_522),10));
    tmp_40_cast_fu_1262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r4_reg_556),10));
    tmp_41_cast_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kc_reg_477),9));
    tmp_42_fu_1266_p2 <= (r4_reg_556 or ap_const_lv5_1);
    tmp_43_cast_fu_1272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_1266_p2),10));
    tmp_44_cast_fu_1286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_85_fu_1276_p4),9));
    tmp_45_fu_1290_p2 <= "1" when (unsigned(c5_reg_568) < unsigned(ap_const_lv5_1C)) else "0";
    tmp_46_cast_fu_1106_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c2_reg_533),14));
    tmp_47_cast_fu_1296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c5_reg_568),14));
    tmp_48_fu_1300_p2 <= (c5_reg_568 or ap_const_lv5_1);
    tmp_49_cast_fu_1306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_fu_1300_p2),14));
    tmp_50_fu_890_p2 <= std_logic_vector(unsigned(kr_cast_reg_1654) + unsigned(r_reg_488));
    tmp_51_cast_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_70_reg_1628_pp2_iter7_reg),11));
    tmp_52_cast_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_reg_488),10));
    tmp_53_cast_fu_1320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_86_fu_1310_p4),12));
    tmp_54_fu_1201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(chl_out3_reg_544),64));
    tmp_55_to_int_fu_1206_p1 <= reg_629;
    tmp_57_fu_735_p3 <= 
        tmp_72_fu_719_p1 when (tmp_74_fu_723_p2(0) = '1') else 
        tmp_78_fu_729_p2;
    tmp_58_fu_1248_p3 <= 
        reg_629 when (tmp_77_fu_1242_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_59_cast_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div7_fu_789_p1),11));
    tmp_62_fu_911_p2 <= std_logic_vector(unsigned(c_reg_499) + unsigned(kc_cast_reg_1672));
    tmp_64_cast_fu_928_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_499),14));
    tmp_67_cast_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(chl_out2_reg_511),6));
    tmp_70_cast_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_763_p2),9));
    tmp_71_fu_772_p3 <= (tmp_70_reg_1628_pp2_iter7_reg & ap_const_lv2_0);
    tmp_72_fu_719_p1 <= phi_urem_reg_455(5 - 1 downto 0);
    tmp_73_fu_1210_p4 <= tmp_55_to_int_fu_1206_p1(30 downto 23);
    tmp_74_fu_723_p2 <= "1" when (unsigned(tmp_72_fu_719_p1) < unsigned(ap_const_lv5_19)) else "0";
    tmp_75_fu_1236_p2 <= (notrhs_fu_1230_p2 or notlhs_fu_1224_p2);
    tmp_77_fu_1242_p2 <= (tmp_76_fu_611_p2 and tmp_75_fu_1236_p2);
    tmp_78_fu_729_p2 <= std_logic_vector(unsigned(ap_const_lv5_7) + unsigned(tmp_72_fu_719_p1));
    tmp_80_fu_796_p2 <= std_logic_vector(unsigned(tmp_s_fu_783_p2) + unsigned(tmp_59_cast_fu_792_p1));
    tmp_81_fu_802_p1 <= tmp_80_fu_796_p2(9 - 1 downto 0);
    tmp_82_fu_806_p1 <= tmp_80_fu_796_p2(7 - 1 downto 0);
    tmp_83_fu_818_p2 <= std_logic_vector(unsigned(tmp_81_fu_802_p1) + unsigned(p_shl_cast_fu_810_p3));
    tmp_84_fu_828_p2 <= std_logic_vector(unsigned(tmp_83_fu_818_p2) + unsigned(tmp_70_cast_fu_824_p1));
    tmp_85_fu_1276_p4 <= r4_reg_556(4 downto 1);
    tmp_86_fu_1310_p4 <= c5_reg_568(4 downto 1);
    tmp_87_fu_1122_p3 <= (chl_out3_reg_544 & ap_const_lv5_0);
    tmp_88_fu_1134_p3 <= (chl_out3_reg_544 & ap_const_lv2_0);
    tmp_89_fu_1146_p2 <= std_logic_vector(unsigned(p_shl13_cast_fu_1130_p1) - unsigned(p_shl14_cast_fu_1142_p1));
    tmp_90_fu_1156_p2 <= std_logic_vector(signed(tmp_107_cast_fu_1152_p1) + signed(tmp_39_cast_reg_1768));
    tmp_91_fu_1161_p1 <= tmp_90_fu_1156_p2(9 - 1 downto 0);
    tmp_92_fu_1173_p3 <= (tmp_90_fu_1156_p2 & ap_const_lv2_0);
    tmp_93_fu_1185_p2 <= std_logic_vector(unsigned(p_shl11_cast_fu_1165_p3) - unsigned(p_shl12_cast_fu_1181_p1));
    tmp_94_fu_1191_p2 <= std_logic_vector(unsigned(tmp_93_fu_1185_p2) + unsigned(tmp_46_cast_reg_1781));
    tmp_95_fu_1220_p1 <= tmp_55_to_int_fu_1206_p1(23 - 1 downto 0);
    tmp_96_fu_916_p3 <= (tmp_50_reg_1698 & tmp_62_fu_911_p2);
    tmp_97_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_96_fu_916_p3),64));
    tmp_98_fu_1342_p3 <= (chl_out6_reg_580 & ap_const_lv5_0);
    tmp_99_fu_1354_p3 <= (chl_out6_reg_580 & ap_const_lv2_0);
    tmp_cast_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kr_reg_466),6));
    tmp_fu_689_p2 <= "1" when (unsigned(next_urem_fu_683_p2) < unsigned(ap_const_lv8_19)) else "0";
    tmp_s_fu_783_p2 <= std_logic_vector(unsigned(tmp_51_cast_fu_769_p1) + unsigned(p_shl1_cast_fu_779_p1));
end behav;
