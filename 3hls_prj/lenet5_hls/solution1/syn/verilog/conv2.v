// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_FM_DDR_BUFF1_AWVALID,
        m_axi_FM_DDR_BUFF1_AWREADY,
        m_axi_FM_DDR_BUFF1_AWADDR,
        m_axi_FM_DDR_BUFF1_AWID,
        m_axi_FM_DDR_BUFF1_AWLEN,
        m_axi_FM_DDR_BUFF1_AWSIZE,
        m_axi_FM_DDR_BUFF1_AWBURST,
        m_axi_FM_DDR_BUFF1_AWLOCK,
        m_axi_FM_DDR_BUFF1_AWCACHE,
        m_axi_FM_DDR_BUFF1_AWPROT,
        m_axi_FM_DDR_BUFF1_AWQOS,
        m_axi_FM_DDR_BUFF1_AWREGION,
        m_axi_FM_DDR_BUFF1_AWUSER,
        m_axi_FM_DDR_BUFF1_WVALID,
        m_axi_FM_DDR_BUFF1_WREADY,
        m_axi_FM_DDR_BUFF1_WDATA,
        m_axi_FM_DDR_BUFF1_WSTRB,
        m_axi_FM_DDR_BUFF1_WLAST,
        m_axi_FM_DDR_BUFF1_WID,
        m_axi_FM_DDR_BUFF1_WUSER,
        m_axi_FM_DDR_BUFF1_ARVALID,
        m_axi_FM_DDR_BUFF1_ARREADY,
        m_axi_FM_DDR_BUFF1_ARADDR,
        m_axi_FM_DDR_BUFF1_ARID,
        m_axi_FM_DDR_BUFF1_ARLEN,
        m_axi_FM_DDR_BUFF1_ARSIZE,
        m_axi_FM_DDR_BUFF1_ARBURST,
        m_axi_FM_DDR_BUFF1_ARLOCK,
        m_axi_FM_DDR_BUFF1_ARCACHE,
        m_axi_FM_DDR_BUFF1_ARPROT,
        m_axi_FM_DDR_BUFF1_ARQOS,
        m_axi_FM_DDR_BUFF1_ARREGION,
        m_axi_FM_DDR_BUFF1_ARUSER,
        m_axi_FM_DDR_BUFF1_RVALID,
        m_axi_FM_DDR_BUFF1_RREADY,
        m_axi_FM_DDR_BUFF1_RDATA,
        m_axi_FM_DDR_BUFF1_RLAST,
        m_axi_FM_DDR_BUFF1_RID,
        m_axi_FM_DDR_BUFF1_RUSER,
        m_axi_FM_DDR_BUFF1_RRESP,
        m_axi_FM_DDR_BUFF1_BVALID,
        m_axi_FM_DDR_BUFF1_BREADY,
        m_axi_FM_DDR_BUFF1_BRESP,
        m_axi_FM_DDR_BUFF1_BID,
        m_axi_FM_DDR_BUFF1_BUSER,
        m_axi_FM_DDR_BUFF2_AWVALID,
        m_axi_FM_DDR_BUFF2_AWREADY,
        m_axi_FM_DDR_BUFF2_AWADDR,
        m_axi_FM_DDR_BUFF2_AWID,
        m_axi_FM_DDR_BUFF2_AWLEN,
        m_axi_FM_DDR_BUFF2_AWSIZE,
        m_axi_FM_DDR_BUFF2_AWBURST,
        m_axi_FM_DDR_BUFF2_AWLOCK,
        m_axi_FM_DDR_BUFF2_AWCACHE,
        m_axi_FM_DDR_BUFF2_AWPROT,
        m_axi_FM_DDR_BUFF2_AWQOS,
        m_axi_FM_DDR_BUFF2_AWREGION,
        m_axi_FM_DDR_BUFF2_AWUSER,
        m_axi_FM_DDR_BUFF2_WVALID,
        m_axi_FM_DDR_BUFF2_WREADY,
        m_axi_FM_DDR_BUFF2_WDATA,
        m_axi_FM_DDR_BUFF2_WSTRB,
        m_axi_FM_DDR_BUFF2_WLAST,
        m_axi_FM_DDR_BUFF2_WID,
        m_axi_FM_DDR_BUFF2_WUSER,
        m_axi_FM_DDR_BUFF2_ARVALID,
        m_axi_FM_DDR_BUFF2_ARREADY,
        m_axi_FM_DDR_BUFF2_ARADDR,
        m_axi_FM_DDR_BUFF2_ARID,
        m_axi_FM_DDR_BUFF2_ARLEN,
        m_axi_FM_DDR_BUFF2_ARSIZE,
        m_axi_FM_DDR_BUFF2_ARBURST,
        m_axi_FM_DDR_BUFF2_ARLOCK,
        m_axi_FM_DDR_BUFF2_ARCACHE,
        m_axi_FM_DDR_BUFF2_ARPROT,
        m_axi_FM_DDR_BUFF2_ARQOS,
        m_axi_FM_DDR_BUFF2_ARREGION,
        m_axi_FM_DDR_BUFF2_ARUSER,
        m_axi_FM_DDR_BUFF2_RVALID,
        m_axi_FM_DDR_BUFF2_RREADY,
        m_axi_FM_DDR_BUFF2_RDATA,
        m_axi_FM_DDR_BUFF2_RLAST,
        m_axi_FM_DDR_BUFF2_RID,
        m_axi_FM_DDR_BUFF2_RUSER,
        m_axi_FM_DDR_BUFF2_RRESP,
        m_axi_FM_DDR_BUFF2_BVALID,
        m_axi_FM_DDR_BUFF2_BREADY,
        m_axi_FM_DDR_BUFF2_BRESP,
        m_axi_FM_DDR_BUFF2_BID,
        m_axi_FM_DDR_BUFF2_BUSER,
        m_axi_WEIGHT_AWVALID,
        m_axi_WEIGHT_AWREADY,
        m_axi_WEIGHT_AWADDR,
        m_axi_WEIGHT_AWID,
        m_axi_WEIGHT_AWLEN,
        m_axi_WEIGHT_AWSIZE,
        m_axi_WEIGHT_AWBURST,
        m_axi_WEIGHT_AWLOCK,
        m_axi_WEIGHT_AWCACHE,
        m_axi_WEIGHT_AWPROT,
        m_axi_WEIGHT_AWQOS,
        m_axi_WEIGHT_AWREGION,
        m_axi_WEIGHT_AWUSER,
        m_axi_WEIGHT_WVALID,
        m_axi_WEIGHT_WREADY,
        m_axi_WEIGHT_WDATA,
        m_axi_WEIGHT_WSTRB,
        m_axi_WEIGHT_WLAST,
        m_axi_WEIGHT_WID,
        m_axi_WEIGHT_WUSER,
        m_axi_WEIGHT_ARVALID,
        m_axi_WEIGHT_ARREADY,
        m_axi_WEIGHT_ARADDR,
        m_axi_WEIGHT_ARID,
        m_axi_WEIGHT_ARLEN,
        m_axi_WEIGHT_ARSIZE,
        m_axi_WEIGHT_ARBURST,
        m_axi_WEIGHT_ARLOCK,
        m_axi_WEIGHT_ARCACHE,
        m_axi_WEIGHT_ARPROT,
        m_axi_WEIGHT_ARQOS,
        m_axi_WEIGHT_ARREGION,
        m_axi_WEIGHT_ARUSER,
        m_axi_WEIGHT_RVALID,
        m_axi_WEIGHT_RREADY,
        m_axi_WEIGHT_RDATA,
        m_axi_WEIGHT_RLAST,
        m_axi_WEIGHT_RID,
        m_axi_WEIGHT_RUSER,
        m_axi_WEIGHT_RRESP,
        m_axi_WEIGHT_BVALID,
        m_axi_WEIGHT_BREADY,
        m_axi_WEIGHT_BRESP,
        m_axi_WEIGHT_BID,
        m_axi_WEIGHT_BUSER,
        m_axi_BIAS_AWVALID,
        m_axi_BIAS_AWREADY,
        m_axi_BIAS_AWADDR,
        m_axi_BIAS_AWID,
        m_axi_BIAS_AWLEN,
        m_axi_BIAS_AWSIZE,
        m_axi_BIAS_AWBURST,
        m_axi_BIAS_AWLOCK,
        m_axi_BIAS_AWCACHE,
        m_axi_BIAS_AWPROT,
        m_axi_BIAS_AWQOS,
        m_axi_BIAS_AWREGION,
        m_axi_BIAS_AWUSER,
        m_axi_BIAS_WVALID,
        m_axi_BIAS_WREADY,
        m_axi_BIAS_WDATA,
        m_axi_BIAS_WSTRB,
        m_axi_BIAS_WLAST,
        m_axi_BIAS_WID,
        m_axi_BIAS_WUSER,
        m_axi_BIAS_ARVALID,
        m_axi_BIAS_ARREADY,
        m_axi_BIAS_ARADDR,
        m_axi_BIAS_ARID,
        m_axi_BIAS_ARLEN,
        m_axi_BIAS_ARSIZE,
        m_axi_BIAS_ARBURST,
        m_axi_BIAS_ARLOCK,
        m_axi_BIAS_ARCACHE,
        m_axi_BIAS_ARPROT,
        m_axi_BIAS_ARQOS,
        m_axi_BIAS_ARREGION,
        m_axi_BIAS_ARUSER,
        m_axi_BIAS_RVALID,
        m_axi_BIAS_RREADY,
        m_axi_BIAS_RDATA,
        m_axi_BIAS_RLAST,
        m_axi_BIAS_RID,
        m_axi_BIAS_RUSER,
        m_axi_BIAS_RRESP,
        m_axi_BIAS_BVALID,
        m_axi_BIAS_BREADY,
        m_axi_BIAS_BRESP,
        m_axi_BIAS_BID,
        m_axi_BIAS_BUSER,
        conv_out1_address0,
        conv_out1_ce0,
        conv_out1_we0,
        conv_out1_d0,
        conv_out1_q0
);

parameter    ap_ST_fsm_state1 = 86'd1;
parameter    ap_ST_fsm_state2 = 86'd2;
parameter    ap_ST_fsm_state3 = 86'd4;
parameter    ap_ST_fsm_state4 = 86'd8;
parameter    ap_ST_fsm_state5 = 86'd16;
parameter    ap_ST_fsm_state6 = 86'd32;
parameter    ap_ST_fsm_state7 = 86'd64;
parameter    ap_ST_fsm_pp0_stage0 = 86'd128;
parameter    ap_ST_fsm_state11 = 86'd256;
parameter    ap_ST_fsm_state12 = 86'd512;
parameter    ap_ST_fsm_state13 = 86'd1024;
parameter    ap_ST_fsm_state14 = 86'd2048;
parameter    ap_ST_fsm_state15 = 86'd4096;
parameter    ap_ST_fsm_state16 = 86'd8192;
parameter    ap_ST_fsm_state17 = 86'd16384;
parameter    ap_ST_fsm_pp1_stage0 = 86'd32768;
parameter    ap_ST_fsm_state21 = 86'd65536;
parameter    ap_ST_fsm_state22 = 86'd131072;
parameter    ap_ST_fsm_state23 = 86'd262144;
parameter    ap_ST_fsm_state24 = 86'd524288;
parameter    ap_ST_fsm_state25 = 86'd1048576;
parameter    ap_ST_fsm_state26 = 86'd2097152;
parameter    ap_ST_fsm_state27 = 86'd4194304;
parameter    ap_ST_fsm_pp2_stage0 = 86'd8388608;
parameter    ap_ST_fsm_state31 = 86'd16777216;
parameter    ap_ST_fsm_state32 = 86'd33554432;
parameter    ap_ST_fsm_state33 = 86'd67108864;
parameter    ap_ST_fsm_state34 = 86'd134217728;
parameter    ap_ST_fsm_state35 = 86'd268435456;
parameter    ap_ST_fsm_state36 = 86'd536870912;
parameter    ap_ST_fsm_state37 = 86'd1073741824;
parameter    ap_ST_fsm_state38 = 86'd2147483648;
parameter    ap_ST_fsm_state39 = 86'd4294967296;
parameter    ap_ST_fsm_state40 = 86'd8589934592;
parameter    ap_ST_fsm_state41 = 86'd17179869184;
parameter    ap_ST_fsm_state42 = 86'd34359738368;
parameter    ap_ST_fsm_state43 = 86'd68719476736;
parameter    ap_ST_fsm_state44 = 86'd137438953472;
parameter    ap_ST_fsm_state45 = 86'd274877906944;
parameter    ap_ST_fsm_state46 = 86'd549755813888;
parameter    ap_ST_fsm_state47 = 86'd1099511627776;
parameter    ap_ST_fsm_state48 = 86'd2199023255552;
parameter    ap_ST_fsm_state49 = 86'd4398046511104;
parameter    ap_ST_fsm_state50 = 86'd8796093022208;
parameter    ap_ST_fsm_state51 = 86'd17592186044416;
parameter    ap_ST_fsm_state52 = 86'd35184372088832;
parameter    ap_ST_fsm_state53 = 86'd70368744177664;
parameter    ap_ST_fsm_state54 = 86'd140737488355328;
parameter    ap_ST_fsm_state55 = 86'd281474976710656;
parameter    ap_ST_fsm_state56 = 86'd562949953421312;
parameter    ap_ST_fsm_state57 = 86'd1125899906842624;
parameter    ap_ST_fsm_state58 = 86'd2251799813685248;
parameter    ap_ST_fsm_state59 = 86'd4503599627370496;
parameter    ap_ST_fsm_state60 = 86'd9007199254740992;
parameter    ap_ST_fsm_state61 = 86'd18014398509481984;
parameter    ap_ST_fsm_state62 = 86'd36028797018963968;
parameter    ap_ST_fsm_state63 = 86'd72057594037927936;
parameter    ap_ST_fsm_state64 = 86'd144115188075855872;
parameter    ap_ST_fsm_state65 = 86'd288230376151711744;
parameter    ap_ST_fsm_state66 = 86'd576460752303423488;
parameter    ap_ST_fsm_state67 = 86'd1152921504606846976;
parameter    ap_ST_fsm_state68 = 86'd2305843009213693952;
parameter    ap_ST_fsm_state69 = 86'd4611686018427387904;
parameter    ap_ST_fsm_state70 = 86'd9223372036854775808;
parameter    ap_ST_fsm_state71 = 86'd18446744073709551616;
parameter    ap_ST_fsm_state72 = 86'd36893488147419103232;
parameter    ap_ST_fsm_state73 = 86'd73786976294838206464;
parameter    ap_ST_fsm_state74 = 86'd147573952589676412928;
parameter    ap_ST_fsm_state75 = 86'd295147905179352825856;
parameter    ap_ST_fsm_state76 = 86'd590295810358705651712;
parameter    ap_ST_fsm_state77 = 86'd1180591620717411303424;
parameter    ap_ST_fsm_state78 = 86'd2361183241434822606848;
parameter    ap_ST_fsm_state79 = 86'd4722366482869645213696;
parameter    ap_ST_fsm_state80 = 86'd9444732965739290427392;
parameter    ap_ST_fsm_state81 = 86'd18889465931478580854784;
parameter    ap_ST_fsm_state82 = 86'd37778931862957161709568;
parameter    ap_ST_fsm_state83 = 86'd75557863725914323419136;
parameter    ap_ST_fsm_state84 = 86'd151115727451828646838272;
parameter    ap_ST_fsm_state85 = 86'd302231454903657293676544;
parameter    ap_ST_fsm_state86 = 86'd604462909807314587353088;
parameter    ap_ST_fsm_pp3_stage0 = 86'd1208925819614629174706176;
parameter    ap_ST_fsm_state90 = 86'd2417851639229258349412352;
parameter    ap_ST_fsm_state91 = 86'd4835703278458516698824704;
parameter    ap_ST_fsm_state92 = 86'd9671406556917033397649408;
parameter    ap_ST_fsm_state93 = 86'd19342813113834066795298816;
parameter    ap_ST_fsm_state94 = 86'd38685626227668133590597632;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_FM_DDR_BUFF1_AWVALID;
input   m_axi_FM_DDR_BUFF1_AWREADY;
output  [31:0] m_axi_FM_DDR_BUFF1_AWADDR;
output  [0:0] m_axi_FM_DDR_BUFF1_AWID;
output  [31:0] m_axi_FM_DDR_BUFF1_AWLEN;
output  [2:0] m_axi_FM_DDR_BUFF1_AWSIZE;
output  [1:0] m_axi_FM_DDR_BUFF1_AWBURST;
output  [1:0] m_axi_FM_DDR_BUFF1_AWLOCK;
output  [3:0] m_axi_FM_DDR_BUFF1_AWCACHE;
output  [2:0] m_axi_FM_DDR_BUFF1_AWPROT;
output  [3:0] m_axi_FM_DDR_BUFF1_AWQOS;
output  [3:0] m_axi_FM_DDR_BUFF1_AWREGION;
output  [0:0] m_axi_FM_DDR_BUFF1_AWUSER;
output   m_axi_FM_DDR_BUFF1_WVALID;
input   m_axi_FM_DDR_BUFF1_WREADY;
output  [31:0] m_axi_FM_DDR_BUFF1_WDATA;
output  [3:0] m_axi_FM_DDR_BUFF1_WSTRB;
output   m_axi_FM_DDR_BUFF1_WLAST;
output  [0:0] m_axi_FM_DDR_BUFF1_WID;
output  [0:0] m_axi_FM_DDR_BUFF1_WUSER;
output   m_axi_FM_DDR_BUFF1_ARVALID;
input   m_axi_FM_DDR_BUFF1_ARREADY;
output  [31:0] m_axi_FM_DDR_BUFF1_ARADDR;
output  [0:0] m_axi_FM_DDR_BUFF1_ARID;
output  [31:0] m_axi_FM_DDR_BUFF1_ARLEN;
output  [2:0] m_axi_FM_DDR_BUFF1_ARSIZE;
output  [1:0] m_axi_FM_DDR_BUFF1_ARBURST;
output  [1:0] m_axi_FM_DDR_BUFF1_ARLOCK;
output  [3:0] m_axi_FM_DDR_BUFF1_ARCACHE;
output  [2:0] m_axi_FM_DDR_BUFF1_ARPROT;
output  [3:0] m_axi_FM_DDR_BUFF1_ARQOS;
output  [3:0] m_axi_FM_DDR_BUFF1_ARREGION;
output  [0:0] m_axi_FM_DDR_BUFF1_ARUSER;
input   m_axi_FM_DDR_BUFF1_RVALID;
output   m_axi_FM_DDR_BUFF1_RREADY;
input  [31:0] m_axi_FM_DDR_BUFF1_RDATA;
input   m_axi_FM_DDR_BUFF1_RLAST;
input  [0:0] m_axi_FM_DDR_BUFF1_RID;
input  [0:0] m_axi_FM_DDR_BUFF1_RUSER;
input  [1:0] m_axi_FM_DDR_BUFF1_RRESP;
input   m_axi_FM_DDR_BUFF1_BVALID;
output   m_axi_FM_DDR_BUFF1_BREADY;
input  [1:0] m_axi_FM_DDR_BUFF1_BRESP;
input  [0:0] m_axi_FM_DDR_BUFF1_BID;
input  [0:0] m_axi_FM_DDR_BUFF1_BUSER;
output   m_axi_FM_DDR_BUFF2_AWVALID;
input   m_axi_FM_DDR_BUFF2_AWREADY;
output  [31:0] m_axi_FM_DDR_BUFF2_AWADDR;
output  [0:0] m_axi_FM_DDR_BUFF2_AWID;
output  [31:0] m_axi_FM_DDR_BUFF2_AWLEN;
output  [2:0] m_axi_FM_DDR_BUFF2_AWSIZE;
output  [1:0] m_axi_FM_DDR_BUFF2_AWBURST;
output  [1:0] m_axi_FM_DDR_BUFF2_AWLOCK;
output  [3:0] m_axi_FM_DDR_BUFF2_AWCACHE;
output  [2:0] m_axi_FM_DDR_BUFF2_AWPROT;
output  [3:0] m_axi_FM_DDR_BUFF2_AWQOS;
output  [3:0] m_axi_FM_DDR_BUFF2_AWREGION;
output  [0:0] m_axi_FM_DDR_BUFF2_AWUSER;
output   m_axi_FM_DDR_BUFF2_WVALID;
input   m_axi_FM_DDR_BUFF2_WREADY;
output  [31:0] m_axi_FM_DDR_BUFF2_WDATA;
output  [3:0] m_axi_FM_DDR_BUFF2_WSTRB;
output   m_axi_FM_DDR_BUFF2_WLAST;
output  [0:0] m_axi_FM_DDR_BUFF2_WID;
output  [0:0] m_axi_FM_DDR_BUFF2_WUSER;
output   m_axi_FM_DDR_BUFF2_ARVALID;
input   m_axi_FM_DDR_BUFF2_ARREADY;
output  [31:0] m_axi_FM_DDR_BUFF2_ARADDR;
output  [0:0] m_axi_FM_DDR_BUFF2_ARID;
output  [31:0] m_axi_FM_DDR_BUFF2_ARLEN;
output  [2:0] m_axi_FM_DDR_BUFF2_ARSIZE;
output  [1:0] m_axi_FM_DDR_BUFF2_ARBURST;
output  [1:0] m_axi_FM_DDR_BUFF2_ARLOCK;
output  [3:0] m_axi_FM_DDR_BUFF2_ARCACHE;
output  [2:0] m_axi_FM_DDR_BUFF2_ARPROT;
output  [3:0] m_axi_FM_DDR_BUFF2_ARQOS;
output  [3:0] m_axi_FM_DDR_BUFF2_ARREGION;
output  [0:0] m_axi_FM_DDR_BUFF2_ARUSER;
input   m_axi_FM_DDR_BUFF2_RVALID;
output   m_axi_FM_DDR_BUFF2_RREADY;
input  [31:0] m_axi_FM_DDR_BUFF2_RDATA;
input   m_axi_FM_DDR_BUFF2_RLAST;
input  [0:0] m_axi_FM_DDR_BUFF2_RID;
input  [0:0] m_axi_FM_DDR_BUFF2_RUSER;
input  [1:0] m_axi_FM_DDR_BUFF2_RRESP;
input   m_axi_FM_DDR_BUFF2_BVALID;
output   m_axi_FM_DDR_BUFF2_BREADY;
input  [1:0] m_axi_FM_DDR_BUFF2_BRESP;
input  [0:0] m_axi_FM_DDR_BUFF2_BID;
input  [0:0] m_axi_FM_DDR_BUFF2_BUSER;
output   m_axi_WEIGHT_AWVALID;
input   m_axi_WEIGHT_AWREADY;
output  [31:0] m_axi_WEIGHT_AWADDR;
output  [0:0] m_axi_WEIGHT_AWID;
output  [31:0] m_axi_WEIGHT_AWLEN;
output  [2:0] m_axi_WEIGHT_AWSIZE;
output  [1:0] m_axi_WEIGHT_AWBURST;
output  [1:0] m_axi_WEIGHT_AWLOCK;
output  [3:0] m_axi_WEIGHT_AWCACHE;
output  [2:0] m_axi_WEIGHT_AWPROT;
output  [3:0] m_axi_WEIGHT_AWQOS;
output  [3:0] m_axi_WEIGHT_AWREGION;
output  [0:0] m_axi_WEIGHT_AWUSER;
output   m_axi_WEIGHT_WVALID;
input   m_axi_WEIGHT_WREADY;
output  [31:0] m_axi_WEIGHT_WDATA;
output  [3:0] m_axi_WEIGHT_WSTRB;
output   m_axi_WEIGHT_WLAST;
output  [0:0] m_axi_WEIGHT_WID;
output  [0:0] m_axi_WEIGHT_WUSER;
output   m_axi_WEIGHT_ARVALID;
input   m_axi_WEIGHT_ARREADY;
output  [31:0] m_axi_WEIGHT_ARADDR;
output  [0:0] m_axi_WEIGHT_ARID;
output  [31:0] m_axi_WEIGHT_ARLEN;
output  [2:0] m_axi_WEIGHT_ARSIZE;
output  [1:0] m_axi_WEIGHT_ARBURST;
output  [1:0] m_axi_WEIGHT_ARLOCK;
output  [3:0] m_axi_WEIGHT_ARCACHE;
output  [2:0] m_axi_WEIGHT_ARPROT;
output  [3:0] m_axi_WEIGHT_ARQOS;
output  [3:0] m_axi_WEIGHT_ARREGION;
output  [0:0] m_axi_WEIGHT_ARUSER;
input   m_axi_WEIGHT_RVALID;
output   m_axi_WEIGHT_RREADY;
input  [31:0] m_axi_WEIGHT_RDATA;
input   m_axi_WEIGHT_RLAST;
input  [0:0] m_axi_WEIGHT_RID;
input  [0:0] m_axi_WEIGHT_RUSER;
input  [1:0] m_axi_WEIGHT_RRESP;
input   m_axi_WEIGHT_BVALID;
output   m_axi_WEIGHT_BREADY;
input  [1:0] m_axi_WEIGHT_BRESP;
input  [0:0] m_axi_WEIGHT_BID;
input  [0:0] m_axi_WEIGHT_BUSER;
output   m_axi_BIAS_AWVALID;
input   m_axi_BIAS_AWREADY;
output  [31:0] m_axi_BIAS_AWADDR;
output  [0:0] m_axi_BIAS_AWID;
output  [31:0] m_axi_BIAS_AWLEN;
output  [2:0] m_axi_BIAS_AWSIZE;
output  [1:0] m_axi_BIAS_AWBURST;
output  [1:0] m_axi_BIAS_AWLOCK;
output  [3:0] m_axi_BIAS_AWCACHE;
output  [2:0] m_axi_BIAS_AWPROT;
output  [3:0] m_axi_BIAS_AWQOS;
output  [3:0] m_axi_BIAS_AWREGION;
output  [0:0] m_axi_BIAS_AWUSER;
output   m_axi_BIAS_WVALID;
input   m_axi_BIAS_WREADY;
output  [31:0] m_axi_BIAS_WDATA;
output  [3:0] m_axi_BIAS_WSTRB;
output   m_axi_BIAS_WLAST;
output  [0:0] m_axi_BIAS_WID;
output  [0:0] m_axi_BIAS_WUSER;
output   m_axi_BIAS_ARVALID;
input   m_axi_BIAS_ARREADY;
output  [31:0] m_axi_BIAS_ARADDR;
output  [0:0] m_axi_BIAS_ARID;
output  [31:0] m_axi_BIAS_ARLEN;
output  [2:0] m_axi_BIAS_ARSIZE;
output  [1:0] m_axi_BIAS_ARBURST;
output  [1:0] m_axi_BIAS_ARLOCK;
output  [3:0] m_axi_BIAS_ARCACHE;
output  [2:0] m_axi_BIAS_ARPROT;
output  [3:0] m_axi_BIAS_ARQOS;
output  [3:0] m_axi_BIAS_ARREGION;
output  [0:0] m_axi_BIAS_ARUSER;
input   m_axi_BIAS_RVALID;
output   m_axi_BIAS_RREADY;
input  [31:0] m_axi_BIAS_RDATA;
input   m_axi_BIAS_RLAST;
input  [0:0] m_axi_BIAS_RID;
input  [0:0] m_axi_BIAS_RUSER;
input  [1:0] m_axi_BIAS_RRESP;
input   m_axi_BIAS_BVALID;
output   m_axi_BIAS_BREADY;
input  [1:0] m_axi_BIAS_BRESP;
input  [0:0] m_axi_BIAS_BID;
input  [0:0] m_axi_BIAS_BUSER;
output  [10:0] conv_out1_address0;
output   conv_out1_ce0;
output   conv_out1_we0;
output  [31:0] conv_out1_d0;
input  [31:0] conv_out1_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_FM_DDR_BUFF1_AWVALID;
reg m_axi_FM_DDR_BUFF1_WVALID;
reg m_axi_FM_DDR_BUFF1_BREADY;
reg m_axi_FM_DDR_BUFF2_ARVALID;
reg m_axi_FM_DDR_BUFF2_RREADY;
reg m_axi_WEIGHT_ARVALID;
reg m_axi_WEIGHT_RREADY;
reg m_axi_BIAS_ARVALID;
reg m_axi_BIAS_RREADY;
reg[10:0] conv_out1_address0;
reg conv_out1_ce0;
reg conv_out1_we0;

(* fsm_encoding = "none" *) reg   [85:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] B_CONV2_address0;
reg    B_CONV2_ce0;
reg    B_CONV2_we0;
wire   [31:0] B_CONV2_q0;
reg   [11:0] W_CONV2_address0;
reg    W_CONV2_ce0;
reg    W_CONV2_we0;
wire   [31:0] W_CONV2_q0;
reg   [10:0] conv2_buff_address0;
reg    conv2_buff_ce0;
reg    conv2_buff_we0;
reg   [31:0] conv2_buff_d0;
wire   [31:0] conv2_buff_q0;
reg   [10:0] conv2_buff_address1;
reg    conv2_buff_ce1;
wire   [31:0] conv2_buff_q1;
reg   [8:0] conv_out2_address0;
reg    conv_out2_ce0;
reg    conv_out2_we0;
wire   [31:0] conv_out2_q0;
reg    FM_DDR_BUFF1_blk_n_AW;
wire    ap_CS_fsm_state62;
wire   [0:0] tmp_7_fu_1176_p2;
reg    FM_DDR_BUFF1_blk_n_W;
reg    ap_enable_reg_pp3_iter2;
wire    ap_block_pp3_stage0;
reg   [0:0] exitcond13_reg_1815;
reg   [0:0] exitcond13_reg_1815_pp3_iter1_reg;
reg    FM_DDR_BUFF1_blk_n_B;
wire    ap_CS_fsm_state94;
reg    FM_DDR_BUFF2_blk_n_AR;
wire    ap_CS_fsm_state11;
reg    FM_DDR_BUFF2_blk_n_R;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond11_reg_1485;
reg    WEIGHT_blk_n_AR;
wire    ap_CS_fsm_state21;
reg    WEIGHT_blk_n_R;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] exitcond12_reg_1505;
reg    BIAS_blk_n_AR;
reg    BIAS_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond10_reg_1471;
reg   [4:0] indvar_reg_385;
reg   [4:0] indvar_reg_385_pp0_iter1_reg;
wire    ap_block_state8_pp0_stage0_iter0;
reg    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_state10_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [10:0] indvar1_reg_397;
reg   [10:0] indvar1_reg_397_pp1_iter1_reg;
wire    ap_block_state18_pp1_stage0_iter0;
reg    ap_block_state19_pp1_stage0_iter1;
wire    ap_block_state20_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg   [11:0] indvar4_reg_409;
reg   [11:0] indvar4_reg_409_pp2_iter1_reg;
wire    ap_block_state28_pp2_stage0_iter0;
reg    ap_block_state29_pp2_stage0_iter1;
wire    ap_block_state30_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
reg   [8:0] indvar6_reg_556;
wire   [31:0] grp_fu_571_p2;
reg   [31:0] reg_581;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state85;
reg   [31:0] reg_587;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state76;
wire   [31:0] grp_fu_567_p2;
reg   [31:0] reg_594;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state81;
reg    ap_sig_ioackin_m_axi_BIAS_ARREADY;
wire   [0:0] exitcond10_fu_609_p2;
reg   [0:0] exitcond10_reg_1471_pp0_iter1_reg;
wire   [4:0] indvar_next_fu_615_p2;
reg   [4:0] indvar_next_reg_1475;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] BIAS_addr_read_reg_1480;
wire   [0:0] exitcond11_fu_626_p2;
reg   [0:0] exitcond11_reg_1485_pp1_iter1_reg;
wire   [10:0] indvar_next1_fu_632_p2;
reg   [10:0] indvar_next1_reg_1489;
reg    ap_enable_reg_pp1_iter0;
reg   [31:0] FM_DDR_BUFF2_read_reg_1494;
reg    ap_sig_ioackin_m_axi_WEIGHT_ARREADY;
wire   [0:0] exitcond12_fu_650_p2;
reg   [0:0] exitcond12_reg_1505_pp2_iter1_reg;
wire   [11:0] indvar_next2_fu_656_p2;
reg   [11:0] indvar_next2_reg_1509;
reg    ap_enable_reg_pp2_iter0;
reg   [31:0] WEIGHT_addr_read_reg_1514;
wire   [3:0] kr_cast_fu_667_p1;
reg   [3:0] kr_cast_reg_1519;
wire    ap_CS_fsm_state32;
wire   [2:0] kr_1_fu_677_p2;
reg   [2:0] kr_1_reg_1527;
wire   [63:0] tmp_3_fu_683_p1;
reg   [63:0] tmp_3_reg_1532;
wire   [0:0] exitcond9_fu_671_p2;
wire   [3:0] kc_cast_fu_687_p1;
reg   [3:0] kc_cast_reg_1537;
wire    ap_CS_fsm_state33;
wire   [2:0] kc_1_fu_697_p2;
reg   [2:0] kc_1_reg_1545;
wire   [12:0] tmp_6_cast_fu_703_p1;
reg   [12:0] tmp_6_cast_reg_1550;
wire   [0:0] exitcond8_fu_691_p2;
wire   [3:0] r_3_fu_713_p2;
reg   [3:0] r_3_reg_1558;
wire    ap_CS_fsm_state34;
wire   [8:0] tmp_12_cast_fu_724_p1;
reg   [8:0] tmp_12_cast_reg_1563;
wire   [0:0] exitcond7_fu_707_p2;
wire   [8:0] tmp_13_cast_fu_728_p1;
reg   [8:0] tmp_13_cast_reg_1568;
wire   [3:0] c_3_fu_738_p2;
reg   [3:0] c_3_reg_1576;
wire    ap_CS_fsm_state35;
wire   [11:0] tmp_26_cast_fu_749_p1;
reg   [11:0] tmp_26_cast_reg_1581;
wire   [0:0] exitcond6_fu_732_p2;
wire   [11:0] tmp_27_cast_fu_753_p1;
reg   [11:0] tmp_27_cast_reg_1586;
wire   [4:0] chl_out_1_fu_763_p2;
reg   [4:0] chl_out_1_reg_1594;
wire    ap_CS_fsm_state36;
wire  signed [9:0] tmp_71_cast_fu_799_p1;
reg  signed [9:0] tmp_71_cast_reg_1599;
wire   [0:0] exitcond5_fu_757_p2;
reg   [10:0] conv2_buff_addr_5_reg_1604;
wire   [2:0] chl_in_1_fu_856_p2;
reg   [2:0] chl_in_1_reg_1612;
wire    ap_CS_fsm_state37;
wire   [12:0] tmp_60_fu_898_p1;
reg   [12:0] tmp_60_reg_1617;
wire   [0:0] exitcond4_fu_850_p2;
wire   [10:0] tmp_61_fu_902_p1;
reg   [10:0] tmp_61_reg_1622;
wire   [11:0] tmp_71_fu_975_p2;
reg   [11:0] tmp_71_reg_1627;
wire    ap_CS_fsm_state38;
reg   [31:0] conv_out1_load_reg_1642;
wire    ap_CS_fsm_state39;
reg   [31:0] W_CONV2_load_reg_1647;
wire   [3:0] r_1_fu_1012_p2;
reg   [3:0] r_1_reg_1655;
wire    ap_CS_fsm_state50;
wire   [8:0] tmp_4_cast_fu_1018_p1;
reg   [8:0] tmp_4_cast_reg_1660;
wire   [0:0] exitcond3_fu_1006_p2;
wire   [3:0] c_1_fu_1028_p2;
reg   [3:0] c_1_reg_1668;
wire    ap_CS_fsm_state51;
wire   [11:0] tmp_10_cast_fu_1034_p1;
reg   [11:0] tmp_10_cast_reg_1673;
wire   [0:0] exitcond2_fu_1022_p2;
wire   [4:0] chl_1_fu_1044_p2;
reg   [4:0] chl_1_reg_1681;
wire    ap_CS_fsm_state52;
reg   [10:0] conv2_buff_addr_reg_1686;
wire   [0:0] exitcond1_fu_1038_p2;
wire    ap_CS_fsm_state53;
reg   [31:0] B_CONV2_load_reg_1696;
wire   [31:0] tmp_22_fu_1168_p3;
reg   [31:0] tmp_22_reg_1701;
wire    ap_CS_fsm_state60;
reg    ap_sig_ioackin_m_axi_FM_DDR_BUFF1_AWREADY;
reg    ap_block_state62_io;
wire   [8:0] tmp_8_cast_fu_1182_p1;
reg   [8:0] tmp_8_cast_reg_1710;
wire   [8:0] tmp_cast_fu_1192_p1;
reg   [8:0] tmp_cast_reg_1715;
wire   [7:0] tmp_5_cast_fu_1206_p1;
reg   [7:0] tmp_5_cast_reg_1720;
wire   [11:0] tmp_15_cast_fu_1216_p1;
reg   [11:0] tmp_15_cast_reg_1728;
wire    ap_CS_fsm_state63;
wire   [0:0] tmp_2_fu_1210_p2;
wire   [11:0] tmp_17_cast_fu_1226_p1;
reg   [11:0] tmp_17_cast_reg_1734;
wire   [9:0] tmp_19_cast_fu_1240_p1;
reg   [9:0] tmp_19_cast_reg_1740;
wire   [3:0] r_2_fu_1244_p2;
wire   [4:0] chl_2_fu_1256_p2;
reg   [4:0] chl_2_reg_1753;
wire    ap_CS_fsm_state64;
wire   [8:0] tmp_27_fu_1296_p2;
reg   [8:0] tmp_27_reg_1758;
wire   [0:0] exitcond_fu_1250_p2;
wire   [8:0] tmp_38_fu_1301_p2;
reg   [8:0] tmp_38_reg_1764;
wire   [9:0] tmp_47_fu_1347_p2;
reg   [9:0] tmp_47_reg_1770;
wire   [3:0] c_2_fu_1352_p2;
wire    ap_CS_fsm_state65;
wire   [11:0] tmp_41_fu_1426_p2;
reg   [11:0] tmp_41_reg_1790;
wire   [11:0] tmp_42_fu_1431_p2;
reg   [11:0] tmp_42_reg_1795;
reg   [31:0] conv2_buff_load_2_reg_1800;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state75;
wire   [0:0] exitcond13_fu_1448_p2;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state87_pp3_stage0_iter0;
wire    ap_block_state88_pp3_stage0_iter1;
wire    ap_block_state89_pp3_stage0_iter2;
reg    ap_sig_ioackin_m_axi_FM_DDR_BUFF1_WREADY;
reg    ap_block_state89_io;
reg    ap_block_pp3_stage0_11001;
wire   [8:0] indvar_next3_fu_1454_p2;
reg    ap_enable_reg_pp3_iter0;
reg   [31:0] conv_out2_load_reg_1829;
reg    ap_enable_reg_pp3_iter1;
wire    ap_CS_fsm_state7;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state8;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state17;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state18;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state27;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state28;
reg    ap_enable_reg_pp2_iter2;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state87;
reg   [4:0] ap_phi_mux_indvar_phi_fu_389_p4;
reg   [10:0] ap_phi_mux_indvar1_phi_fu_401_p4;
reg   [11:0] ap_phi_mux_indvar4_phi_fu_413_p4;
reg   [2:0] kr_reg_421;
wire    ap_CS_fsm_state31;
reg   [2:0] kc_reg_432;
reg   [3:0] r_reg_443;
reg   [3:0] c_reg_454;
reg   [4:0] chl_out_reg_465;
reg   [2:0] chl_in_reg_476;
wire    ap_CS_fsm_state49;
reg   [3:0] r1_reg_487;
reg   [3:0] c2_reg_498;
reg   [4:0] chl_reg_509;
wire    ap_CS_fsm_state61;
reg   [3:0] r3_reg_521;
reg   [3:0] c4_reg_533;
reg   [4:0] chl5_reg_545;
wire    ap_CS_fsm_state86;
wire   [63:0] indvar2_fu_621_p1;
wire   [63:0] indvar3_fu_638_p1;
wire   [63:0] tmp_1_fu_662_p1;
wire   [63:0] tmp_79_cast_fu_845_p1;
wire   [63:0] tmp_86_cast_fu_997_p1;
wire   [63:0] tmp_94_cast_fu_1002_p1;
wire   [63:0] tmp_42_cast_fu_1116_p1;
wire   [63:0] tmp_6_fu_1121_p1;
wire   [63:0] tmp_55_cast_fu_1387_p1;
wire   [63:0] tmp_56_cast_fu_1397_p1;
wire   [63:0] tmp_61_cast_fu_1436_p1;
wire   [63:0] tmp_62_cast_fu_1440_p1;
wire   [63:0] tmp_68_cast_fu_1444_p1;
wire   [63:0] indvar7_fu_1460_p1;
reg    ap_reg_ioackin_m_axi_BIAS_ARREADY;
reg    ap_reg_ioackin_m_axi_FM_DDR_BUFF2_ARREADY;
reg    ap_sig_ioackin_m_axi_FM_DDR_BUFF2_ARREADY;
reg    ap_reg_ioackin_m_axi_WEIGHT_ARREADY;
reg    ap_reg_ioackin_m_axi_FM_DDR_BUFF1_AWREADY;
reg    ap_reg_ioackin_m_axi_FM_DDR_BUFF1_WREADY;
wire    ap_block_pp3_stage0_01001;
wire    ap_CS_fsm_state42;
reg   [31:0] grp_fu_567_p0;
reg   [31:0] grp_fu_567_p1;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state77;
reg   [31:0] grp_fu_571_p0;
reg   [31:0] grp_fu_571_p1;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state82;
wire   [3:0] tmp_s_fu_719_p2;
wire   [3:0] tmp_23_fu_744_p2;
wire   [7:0] tmp_48_fu_769_p3;
wire   [5:0] tmp_49_fu_781_p3;
wire   [8:0] p_shl4_cast_fu_777_p1;
wire   [8:0] p_shl5_cast_fu_789_p1;
wire   [8:0] tmp_50_fu_793_p2;
wire   [8:0] tmp_51_fu_803_p2;
wire   [8:0] tmp_52_fu_809_p2;
wire   [9:0] tmp_53_fu_822_p3;
wire   [11:0] p_shl_cast_fu_814_p3;
wire   [11:0] p_shl1_cast_fu_830_p1;
wire   [11:0] tmp_54_fu_834_p2;
wire   [11:0] tmp_55_fu_840_p2;
wire   [9:0] tmp_35_cast_fu_862_p1;
wire  signed [9:0] tmp_56_fu_866_p2;
wire   [11:0] tmp_57_fu_875_p3;
wire  signed [63:0] tmp_80_cast_fu_871_p1;
wire  signed [63:0] p_shl_fu_883_p1;
wire   [63:0] tmp_58_fu_887_p2;
wire   [63:0] tmp_59_fu_893_p2;
wire   [6:0] tmp_64_fu_906_p3;
wire   [3:0] tmp_65_fu_918_p3;
wire   [7:0] p_shl8_cast_fu_914_p1;
wire   [7:0] p_shl9_cast_fu_926_p1;
wire   [7:0] tmp_66_fu_930_p2;
wire  signed [8:0] tmp_89_cast_fu_936_p1;
wire   [8:0] tmp_67_fu_940_p2;
wire   [7:0] tmp_68_fu_945_p1;
wire   [9:0] tmp_69_fu_957_p3;
wire   [11:0] p_shl6_cast_fu_949_p3;
wire  signed [11:0] p_shl7_cast_fu_965_p1;
wire   [11:0] tmp_70_fu_969_p2;
wire   [12:0] p_shl10_cast_fu_980_p3;
wire   [12:0] tmp_62_fu_987_p2;
wire   [12:0] tmp_63_fu_992_p2;
wire   [7:0] tmp_8_fu_1050_p3;
wire   [5:0] tmp_10_fu_1062_p3;
wire   [8:0] p_shl15_cast_fu_1070_p1;
wire   [8:0] p_shl14_cast_fu_1058_p1;
wire   [8:0] tmp_11_fu_1074_p2;
wire   [8:0] tmp_12_fu_1080_p2;
wire   [9:0] tmp_13_fu_1093_p3;
wire   [11:0] p_shl13_cast_fu_1101_p1;
wire   [11:0] p_shl12_cast_fu_1085_p3;
wire   [11:0] tmp_14_fu_1105_p2;
wire   [11:0] tmp_15_fu_1111_p2;
wire   [31:0] tmp_23_to_int_fu_1126_p1;
wire   [7:0] tmp_17_fu_1130_p4;
wire   [22:0] tmp_18_fu_1140_p1;
wire   [0:0] notrhs_fu_1150_p2;
wire   [0:0] notlhs_fu_1144_p2;
wire   [0:0] tmp_19_fu_1156_p2;
wire   [0:0] tmp_20_fu_576_p2;
wire   [0:0] tmp_21_fu_1162_p2;
wire   [3:0] tmp_9_fu_1186_p2;
wire   [2:0] tmp_fu_1196_p4;
wire   [3:0] tmp_4_fu_1220_p2;
wire   [2:0] tmp_5_fu_1230_p4;
wire   [7:0] tmp_24_fu_1266_p3;
wire   [5:0] tmp_25_fu_1278_p3;
wire   [8:0] p_shl22_cast_fu_1274_p1;
wire   [8:0] p_shl23_cast_fu_1286_p1;
wire   [8:0] tmp_26_fu_1290_p2;
wire   [6:0] tmp_43_fu_1306_p3;
wire   [7:0] p_shl17_cast_fu_1314_p1;
wire   [7:0] tmp_29_cast_fu_1262_p1;
wire   [7:0] tmp_44_fu_1318_p2;
wire   [7:0] tmp_45_fu_1324_p2;
wire   [9:0] p_shl16_cast_fu_1333_p3;
wire   [9:0] tmp_65_cast_fu_1329_p1;
wire   [9:0] tmp_46_fu_1341_p2;
wire   [9:0] tmp_28_fu_1365_p3;
wire   [11:0] p_shl20_cast_fu_1358_p3;
wire   [11:0] p_shl21_cast_fu_1372_p1;
wire   [11:0] tmp_29_fu_1376_p2;
wire   [11:0] tmp_34_fu_1382_p2;
wire   [11:0] tmp_35_fu_1392_p2;
wire   [9:0] tmp_39_fu_1409_p3;
wire   [11:0] p_shl18_cast_fu_1402_p3;
wire   [11:0] p_shl19_cast_fu_1416_p1;
wire   [11:0] tmp_40_fu_1420_p2;
reg   [85:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;

// power-on initialization
initial begin
#0 ap_CS_fsm = 86'd1;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_reg_ioackin_m_axi_BIAS_ARREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_FM_DDR_BUFF2_ARREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_WEIGHT_ARREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_FM_DDR_BUFF1_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_FM_DDR_BUFF1_WREADY = 1'b0;
end

conv2_B_CONV2 #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
B_CONV2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_CONV2_address0),
    .ce0(B_CONV2_ce0),
    .we0(B_CONV2_we0),
    .d0(BIAS_addr_read_reg_1480),
    .q0(B_CONV2_q0)
);

conv2_W_CONV2 #(
    .DataWidth( 32 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
W_CONV2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(W_CONV2_address0),
    .ce0(W_CONV2_ce0),
    .we0(W_CONV2_we0),
    .d0(WEIGHT_addr_read_reg_1514),
    .q0(W_CONV2_q0)
);

conv2_conv2_buff #(
    .DataWidth( 32 ),
    .AddressRange( 1600 ),
    .AddressWidth( 11 ))
conv2_buff_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv2_buff_address0),
    .ce0(conv2_buff_ce0),
    .we0(conv2_buff_we0),
    .d0(conv2_buff_d0),
    .q0(conv2_buff_q0),
    .address1(conv2_buff_address1),
    .ce1(conv2_buff_ce1),
    .q1(conv2_buff_q1)
);

conv2_conv_out2 #(
    .DataWidth( 32 ),
    .AddressRange( 400 ),
    .AddressWidth( 9 ))
conv_out2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_out2_address0),
    .ce0(conv_out2_ce0),
    .we0(conv_out2_we0),
    .d0(reg_581),
    .q0(conv_out2_q0)
);

conv_top_fadd_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_top_fadd_32nbkb_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_567_p0),
    .din1(grp_fu_567_p1),
    .ce(1'b1),
    .dout(grp_fu_567_p2)
);

conv_top_fmul_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_top_fmul_32ncud_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_571_p0),
    .din1(grp_fu_571_p1),
    .ce(1'b1),
    .dout(grp_fu_571_p2)
);

conv_top_fcmp_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_top_fcmp_32ndEe_U20(
    .din0(reg_594),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_20_fu_576_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state8)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state18) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state18)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state18);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state28) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state28)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state28);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state87) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state62_io) & (1'b1 == ap_CS_fsm_state62) & (tmp_7_fu_1176_p2 == 1'd0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state87)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state87);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if (((1'b0 == ap_block_state62_io) & (1'b1 == ap_CS_fsm_state62) & (tmp_7_fu_1176_p2 == 1'd0))) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_BIAS_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if (~((ap_start == 1'b0) | (ap_sig_ioackin_m_axi_BIAS_ARREADY == 1'b0))) begin
                ap_reg_ioackin_m_axi_BIAS_ARREADY <= 1'b0;
            end else if (((ap_start == 1'b1) & (m_axi_BIAS_ARREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_BIAS_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_FM_DDR_BUFF1_AWREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state62) & (tmp_7_fu_1176_p2 == 1'd0))) begin
            if ((1'b0 == ap_block_state62_io)) begin
                ap_reg_ioackin_m_axi_FM_DDR_BUFF1_AWREADY <= 1'b0;
            end else if ((m_axi_FM_DDR_BUFF1_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_FM_DDR_BUFF1_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_FM_DDR_BUFF1_WREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp3_iter2 == 1'b1) & (exitcond13_reg_1815_pp3_iter1_reg == 1'd0))) begin
            if ((1'b0 == ap_block_pp3_stage0_11001)) begin
                ap_reg_ioackin_m_axi_FM_DDR_BUFF1_WREADY <= 1'b0;
            end else if (((m_axi_FM_DDR_BUFF1_WREADY == 1'b1) & (1'b0 == ap_block_pp3_stage0_01001))) begin
                ap_reg_ioackin_m_axi_FM_DDR_BUFF1_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_FM_DDR_BUFF2_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            if ((ap_sig_ioackin_m_axi_FM_DDR_BUFF2_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_FM_DDR_BUFF2_ARREADY <= 1'b0;
            end else if ((m_axi_FM_DDR_BUFF2_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_FM_DDR_BUFF2_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_WEIGHT_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state21)) begin
            if ((ap_sig_ioackin_m_axi_WEIGHT_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_WEIGHT_ARREADY <= 1'b0;
            end else if ((m_axi_WEIGHT_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_WEIGHT_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1038_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state52))) begin
        c2_reg_498 <= c_1_reg_1668;
    end else if (((1'b1 == ap_CS_fsm_state50) & (exitcond3_fu_1006_p2 == 1'd0))) begin
        c2_reg_498 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state62_io) & (tmp_7_fu_1176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state62))) begin
        c4_reg_533 <= 4'd0;
    end else if (((exitcond_fu_1250_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state64))) begin
        c4_reg_533 <= c_2_fu_1352_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_757_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        c_reg_454 <= c_3_reg_1576;
    end else if (((1'b1 == ap_CS_fsm_state34) & (exitcond7_fu_707_p2 == 1'd0))) begin
        c_reg_454 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_1210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state63))) begin
        chl5_reg_545 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        chl5_reg_545 <= chl_2_reg_1753;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) & (exitcond5_fu_757_p2 == 1'd0))) begin
        chl_in_reg_476 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        chl_in_reg_476 <= chl_in_1_reg_1612;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        chl_out_reg_465 <= chl_out_1_reg_1594;
    end else if (((1'b1 == ap_CS_fsm_state35) & (exitcond6_fu_732_p2 == 1'd0))) begin
        chl_out_reg_465 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) & (exitcond2_fu_1022_p2 == 1'd0))) begin
        chl_reg_509 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        chl_reg_509 <= chl_1_reg_1681;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        indvar1_reg_397 <= 11'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond11_reg_1485 == 1'd0))) begin
        indvar1_reg_397 <= indvar_next1_reg_1489;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond12_reg_1505 == 1'd0))) begin
        indvar4_reg_409 <= indvar_next2_reg_1509;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        indvar4_reg_409 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state62_io) & (1'b1 == ap_CS_fsm_state62) & (tmp_7_fu_1176_p2 == 1'd0))) begin
        indvar6_reg_556 <= 9'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond13_fu_1448_p2 == 1'd0))) begin
        indvar6_reg_556 <= indvar_next3_fu_1454_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond10_reg_1471 == 1'd0))) begin
        indvar_reg_385 <= indvar_next_reg_1475;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_reg_385 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_707_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
        kc_reg_432 <= kc_1_reg_1545;
    end else if (((1'b1 == ap_CS_fsm_state32) & (exitcond9_fu_671_p2 == 1'd0))) begin
        kc_reg_432 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        kr_reg_421 <= 3'd0;
    end else if (((exitcond8_fu_691_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
        kr_reg_421 <= kr_1_reg_1527;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond9_fu_671_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
        r1_reg_487 <= 4'd0;
    end else if (((exitcond2_fu_1022_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
        r1_reg_487 <= r_1_reg_1655;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_1006_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50))) begin
        r3_reg_521 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state63) & (tmp_2_fu_1210_p2 == 1'd0))) begin
        r3_reg_521 <= r_2_fu_1244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_732_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
        r_reg_443 <= r_3_reg_1558;
    end else if (((1'b1 == ap_CS_fsm_state33) & (exitcond8_fu_691_p2 == 1'd0))) begin
        r_reg_443 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state71))) begin
        reg_587 <= conv2_buff_q1;
    end else if (((1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state43))) begin
        reg_587 <= conv2_buff_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond10_reg_1471 == 1'd0))) begin
        BIAS_addr_read_reg_1480 <= m_axi_BIAS_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        B_CONV2_load_reg_1696 <= B_CONV2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond11_reg_1485 == 1'd0))) begin
        FM_DDR_BUFF2_read_reg_1494 <= m_axi_FM_DDR_BUFF2_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond12_reg_1505 == 1'd0))) begin
        WEIGHT_addr_read_reg_1514 <= m_axi_WEIGHT_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        W_CONV2_load_reg_1647 <= W_CONV2_q0;
        conv_out1_load_reg_1642 <= conv_out1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        c_1_reg_1668 <= c_1_fu_1028_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        c_3_reg_1576 <= c_3_fu_738_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        chl_1_reg_1681 <= chl_1_fu_1044_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        chl_2_reg_1753 <= chl_2_fu_1256_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        chl_in_1_reg_1612 <= chl_in_1_fu_856_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        chl_out_1_reg_1594 <= chl_out_1_fu_763_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) & (exitcond5_fu_757_p2 == 1'd0))) begin
        conv2_buff_addr_5_reg_1604 <= tmp_79_cast_fu_845_p1;
        tmp_71_cast_reg_1599[9 : 1] <= tmp_71_cast_fu_799_p1[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state52) & (exitcond1_fu_1038_p2 == 1'd0))) begin
        conv2_buff_addr_reg_1686 <= tmp_42_cast_fu_1116_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        conv2_buff_load_2_reg_1800 <= conv2_buff_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond13_reg_1815 == 1'd0))) begin
        conv_out2_load_reg_1829 <= conv_out2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond10_reg_1471 <= exitcond10_fu_609_p2;
        exitcond10_reg_1471_pp0_iter1_reg <= exitcond10_reg_1471;
        indvar_reg_385_pp0_iter1_reg <= indvar_reg_385;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond11_reg_1485 <= exitcond11_fu_626_p2;
        exitcond11_reg_1485_pp1_iter1_reg <= exitcond11_reg_1485;
        indvar1_reg_397_pp1_iter1_reg <= indvar1_reg_397;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        exitcond12_reg_1505 <= exitcond12_fu_650_p2;
        exitcond12_reg_1505_pp2_iter1_reg <= exitcond12_reg_1505;
        indvar4_reg_409_pp2_iter1_reg <= indvar4_reg_409;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        exitcond13_reg_1815 <= exitcond13_fu_1448_p2;
        exitcond13_reg_1815_pp3_iter1_reg <= exitcond13_reg_1815;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_next1_reg_1489 <= indvar_next1_fu_632_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        indvar_next2_reg_1509 <= indvar_next2_fu_656_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_next_reg_1475 <= indvar_next_fu_615_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        kc_1_reg_1545 <= kc_1_fu_697_p2;
        kc_cast_reg_1537[2 : 0] <= kc_cast_fu_687_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        kr_1_reg_1527 <= kr_1_fu_677_p2;
        kr_cast_reg_1519[2 : 0] <= kr_cast_fu_667_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        r_1_reg_1655 <= r_1_fu_1012_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        r_3_reg_1558 <= r_3_fu_713_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state43))) begin
        reg_581 <= grp_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state71))) begin
        reg_594 <= grp_fu_567_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) & (exitcond2_fu_1022_p2 == 1'd0))) begin
        tmp_10_cast_reg_1673[3 : 0] <= tmp_10_cast_fu_1034_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) & (exitcond7_fu_707_p2 == 1'd0))) begin
        tmp_12_cast_reg_1563[3 : 0] <= tmp_12_cast_fu_724_p1[3 : 0];
        tmp_13_cast_reg_1568[3 : 0] <= tmp_13_cast_fu_728_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_1210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state63))) begin
        tmp_15_cast_reg_1728[3 : 0] <= tmp_15_cast_fu_1216_p1[3 : 0];
        tmp_17_cast_reg_1734[3 : 1] <= tmp_17_cast_fu_1226_p1[3 : 1];
        tmp_19_cast_reg_1740[2 : 0] <= tmp_19_cast_fu_1240_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        tmp_22_reg_1701 <= tmp_22_fu_1168_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) & (exitcond6_fu_732_p2 == 1'd0))) begin
        tmp_26_cast_reg_1581[3 : 0] <= tmp_26_cast_fu_749_p1[3 : 0];
        tmp_27_cast_reg_1586[3 : 0] <= tmp_27_cast_fu_753_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state64) & (exitcond_fu_1250_p2 == 1'd0))) begin
        tmp_27_reg_1758 <= tmp_27_fu_1296_p2;
        tmp_38_reg_1764[8 : 1] <= tmp_38_fu_1301_p2[8 : 1];
        tmp_47_reg_1770 <= tmp_47_fu_1347_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) & (exitcond9_fu_671_p2 == 1'd0))) begin
        tmp_3_reg_1532[2 : 0] <= tmp_3_fu_683_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        tmp_41_reg_1790 <= tmp_41_fu_1426_p2;
        tmp_42_reg_1795[11 : 1] <= tmp_42_fu_1431_p2[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state50) & (exitcond3_fu_1006_p2 == 1'd0))) begin
        tmp_4_cast_reg_1660[3 : 0] <= tmp_4_cast_fu_1018_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state62_io) & (tmp_7_fu_1176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state62))) begin
        tmp_5_cast_reg_1720[2 : 0] <= tmp_5_cast_fu_1206_p1[2 : 0];
        tmp_8_cast_reg_1710[3 : 0] <= tmp_8_cast_fu_1182_p1[3 : 0];
        tmp_cast_reg_1715[3 : 1] <= tmp_cast_fu_1192_p1[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) & (exitcond4_fu_850_p2 == 1'd0))) begin
        tmp_60_reg_1617 <= tmp_60_fu_898_p1;
        tmp_61_reg_1622 <= tmp_61_fu_902_p1;
        tmp_71_reg_1627 <= tmp_71_fu_975_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (exitcond8_fu_691_p2 == 1'd0))) begin
        tmp_6_cast_reg_1550[2 : 0] <= tmp_6_cast_fu_703_p1[2 : 0];
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        BIAS_blk_n_AR = m_axi_BIAS_ARREADY;
    end else begin
        BIAS_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond10_reg_1471 == 1'd0))) begin
        BIAS_blk_n_R = m_axi_BIAS_RVALID;
    end else begin
        BIAS_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        B_CONV2_address0 = tmp_6_fu_1121_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        B_CONV2_address0 = indvar2_fu_621_p1;
    end else begin
        B_CONV2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state53) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        B_CONV2_ce0 = 1'b1;
    end else begin
        B_CONV2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond10_reg_1471_pp0_iter1_reg == 1'd0))) begin
        B_CONV2_we0 = 1'b1;
    end else begin
        B_CONV2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state62) & (tmp_7_fu_1176_p2 == 1'd0))) begin
        FM_DDR_BUFF1_blk_n_AW = m_axi_FM_DDR_BUFF1_AWREADY;
    end else begin
        FM_DDR_BUFF1_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        FM_DDR_BUFF1_blk_n_B = m_axi_FM_DDR_BUFF1_BVALID;
    end else begin
        FM_DDR_BUFF1_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (exitcond13_reg_1815_pp3_iter1_reg == 1'd0))) begin
        FM_DDR_BUFF1_blk_n_W = m_axi_FM_DDR_BUFF1_WREADY;
    end else begin
        FM_DDR_BUFF1_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        FM_DDR_BUFF2_blk_n_AR = m_axi_FM_DDR_BUFF2_ARREADY;
    end else begin
        FM_DDR_BUFF2_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond11_reg_1485 == 1'd0))) begin
        FM_DDR_BUFF2_blk_n_R = m_axi_FM_DDR_BUFF2_RVALID;
    end else begin
        FM_DDR_BUFF2_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        WEIGHT_blk_n_AR = m_axi_WEIGHT_ARREADY;
    end else begin
        WEIGHT_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond12_reg_1505 == 1'd0))) begin
        WEIGHT_blk_n_R = m_axi_WEIGHT_RVALID;
    end else begin
        WEIGHT_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        W_CONV2_address0 = tmp_86_cast_fu_997_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        W_CONV2_address0 = tmp_1_fu_662_p1;
    end else begin
        W_CONV2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
        W_CONV2_ce0 = 1'b1;
    end else begin
        W_CONV2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1) & (exitcond12_reg_1505_pp2_iter1_reg == 1'd0))) begin
        W_CONV2_we0 = 1'b1;
    end else begin
        W_CONV2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond10_fu_609_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond11_fu_626_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state18 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state18 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond12_fu_650_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state28 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state28 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond13_fu_1448_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state87 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state87 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state94) & (m_axi_FM_DDR_BUFF1_BVALID == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond11_reg_1485 == 1'd0))) begin
        ap_phi_mux_indvar1_phi_fu_401_p4 = indvar_next1_reg_1489;
    end else begin
        ap_phi_mux_indvar1_phi_fu_401_p4 = indvar1_reg_397;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond12_reg_1505 == 1'd0))) begin
        ap_phi_mux_indvar4_phi_fu_413_p4 = indvar_next2_reg_1509;
    end else begin
        ap_phi_mux_indvar4_phi_fu_413_p4 = indvar4_reg_409;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond10_reg_1471 == 1'd0))) begin
        ap_phi_mux_indvar_phi_fu_389_p4 = indvar_next_reg_1475;
    end else begin
        ap_phi_mux_indvar_phi_fu_389_p4 = indvar_reg_385;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state94) & (m_axi_FM_DDR_BUFF1_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_BIAS_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_BIAS_ARREADY = m_axi_BIAS_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_BIAS_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_FM_DDR_BUFF1_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_FM_DDR_BUFF1_AWREADY = m_axi_FM_DDR_BUFF1_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_FM_DDR_BUFF1_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_FM_DDR_BUFF1_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_FM_DDR_BUFF1_WREADY = m_axi_FM_DDR_BUFF1_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_FM_DDR_BUFF1_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_FM_DDR_BUFF2_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_FM_DDR_BUFF2_ARREADY = m_axi_FM_DDR_BUFF2_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_FM_DDR_BUFF2_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_WEIGHT_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_WEIGHT_ARREADY = m_axi_WEIGHT_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_WEIGHT_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        conv2_buff_address0 = tmp_55_cast_fu_1387_p1;
    end else if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state53))) begin
        conv2_buff_address0 = conv2_buff_addr_reg_1686;
    end else if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state42))) begin
        conv2_buff_address0 = conv2_buff_addr_5_reg_1604;
    end else begin
        conv2_buff_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        conv2_buff_address1 = tmp_62_cast_fu_1440_p1;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        conv2_buff_address1 = tmp_61_cast_fu_1436_p1;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        conv2_buff_address1 = tmp_56_cast_fu_1397_p1;
    end else begin
        conv2_buff_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state42))) begin
        conv2_buff_ce0 = 1'b1;
    end else begin
        conv2_buff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state65))) begin
        conv2_buff_ce1 = 1'b1;
    end else begin
        conv2_buff_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        conv2_buff_d0 = tmp_22_reg_1701;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        conv2_buff_d0 = reg_594;
    end else begin
        conv2_buff_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state49))) begin
        conv2_buff_we0 = 1'b1;
    end else begin
        conv2_buff_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        conv_out1_address0 = tmp_94_cast_fu_1002_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        conv_out1_address0 = indvar3_fu_638_p1;
    end else begin
        conv_out1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        conv_out1_ce0 = 1'b1;
    end else begin
        conv_out1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (exitcond11_reg_1485_pp1_iter1_reg == 1'd0))) begin
        conv_out1_we0 = 1'b1;
    end else begin
        conv_out1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        conv_out2_address0 = indvar7_fu_1460_p1;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        conv_out2_address0 = tmp_68_cast_fu_1444_p1;
    end else begin
        conv_out2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        conv_out2_ce0 = 1'b1;
    end else begin
        conv_out2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        conv_out2_we0 = 1'b1;
    end else begin
        conv_out2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state72))) begin
        grp_fu_567_p0 = reg_594;
    end else if (((1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state44))) begin
        grp_fu_567_p0 = reg_587;
    end else begin
        grp_fu_567_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state72))) begin
        grp_fu_567_p1 = reg_587;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        grp_fu_567_p1 = conv2_buff_load_2_reg_1800;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_567_p1 = B_CONV2_load_reg_1696;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_567_p1 = reg_581;
    end else begin
        grp_fu_567_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        grp_fu_571_p0 = reg_594;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_571_p0 = conv_out1_load_reg_1642;
    end else begin
        grp_fu_571_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        grp_fu_571_p1 = 32'd1048576000;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_571_p1 = W_CONV2_load_reg_1647;
    end else begin
        grp_fu_571_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (ap_reg_ioackin_m_axi_BIAS_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_BIAS_ARVALID = 1'b1;
    end else begin
        m_axi_BIAS_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond10_reg_1471 == 1'd0))) begin
        m_axi_BIAS_RREADY = 1'b1;
    end else begin
        m_axi_BIAS_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_FM_DDR_BUFF1_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state62) & (tmp_7_fu_1176_p2 == 1'd0))) begin
        m_axi_FM_DDR_BUFF1_AWVALID = 1'b1;
    end else begin
        m_axi_FM_DDR_BUFF1_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state94) & (m_axi_FM_DDR_BUFF1_BVALID == 1'b1))) begin
        m_axi_FM_DDR_BUFF1_BREADY = 1'b1;
    end else begin
        m_axi_FM_DDR_BUFF1_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_FM_DDR_BUFF1_WREADY == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (exitcond13_reg_1815_pp3_iter1_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_01001))) begin
        m_axi_FM_DDR_BUFF1_WVALID = 1'b1;
    end else begin
        m_axi_FM_DDR_BUFF1_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_FM_DDR_BUFF2_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state11))) begin
        m_axi_FM_DDR_BUFF2_ARVALID = 1'b1;
    end else begin
        m_axi_FM_DDR_BUFF2_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond11_reg_1485 == 1'd0))) begin
        m_axi_FM_DDR_BUFF2_RREADY = 1'b1;
    end else begin
        m_axi_FM_DDR_BUFF2_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_WEIGHT_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state21))) begin
        m_axi_WEIGHT_ARVALID = 1'b1;
    end else begin
        m_axi_WEIGHT_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond12_reg_1505 == 1'd0))) begin
        m_axi_WEIGHT_RREADY = 1'b1;
    end else begin
        m_axi_WEIGHT_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_sig_ioackin_m_axi_BIAS_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond10_fu_609_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond10_fu_609_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (ap_sig_ioackin_m_axi_FM_DDR_BUFF2_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond11_fu_626_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond11_fu_626_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((ap_sig_ioackin_m_axi_WEIGHT_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (exitcond12_fu_650_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (exitcond12_fu_650_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if (((exitcond9_fu_671_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((exitcond8_fu_691_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((exitcond7_fu_707_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((exitcond6_fu_732_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((exitcond5_fu_757_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((exitcond4_fu_850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state50 : begin
            if (((exitcond3_fu_1006_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((exitcond2_fu_1022_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state52 : begin
            if (((exitcond1_fu_1038_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state62 : begin
            if (((1'b0 == ap_block_state62_io) & (1'b1 == ap_CS_fsm_state62) & (tmp_7_fu_1176_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_state62_io) & (tmp_7_fu_1176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state62))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state63 : begin
            if (((1'b1 == ap_CS_fsm_state63) & (tmp_2_fu_1210_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state64 : begin
            if (((exitcond_fu_1250_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state64))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (exitcond13_fu_1448_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (exitcond13_fu_1448_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            if (((1'b1 == ap_CS_fsm_state94) & (m_axi_FM_DDR_BUFF1_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd85];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_BIAS_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond10_reg_1471 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_BIAS_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond10_reg_1471 == 1'd0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((m_axi_FM_DDR_BUFF2_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (exitcond11_reg_1485 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((m_axi_FM_DDR_BUFF2_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (exitcond11_reg_1485 == 1'd0));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((m_axi_WEIGHT_RVALID == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (exitcond12_reg_1505 == 1'd0));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((m_axi_WEIGHT_RVALID == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (exitcond12_reg_1505 == 1'd0));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((1'b1 == ap_block_state89_io) & (ap_enable_reg_pp3_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((1'b1 == ap_block_state89_io) & (ap_enable_reg_pp3_iter2 == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_pp1_stage0_iter1 = ((m_axi_FM_DDR_BUFF2_RVALID == 1'b0) & (exitcond11_reg_1485 == 1'd0));
end

assign ap_block_state20_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state29_pp2_stage0_iter1 = ((m_axi_WEIGHT_RVALID == 1'b0) & (exitcond12_reg_1505 == 1'd0));
end

assign ap_block_state30_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state62_io = ((ap_sig_ioackin_m_axi_FM_DDR_BUFF1_AWREADY == 1'b0) & (tmp_7_fu_1176_p2 == 1'd0));
end

assign ap_block_state87_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state89_io = ((ap_sig_ioackin_m_axi_FM_DDR_BUFF1_WREADY == 1'b0) & (exitcond13_reg_1815_pp3_iter1_reg == 1'd0));
end

assign ap_block_state89_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter1 = ((m_axi_BIAS_RVALID == 1'b0) & (exitcond10_reg_1471 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign c_1_fu_1028_p2 = (c2_reg_498 + 4'd1);

assign c_2_fu_1352_p2 = (c4_reg_533 + 4'd2);

assign c_3_fu_738_p2 = (c_reg_454 + 4'd1);

assign chl_1_fu_1044_p2 = (chl_reg_509 + 5'd1);

assign chl_2_fu_1256_p2 = (chl5_reg_545 + 5'd1);

assign chl_in_1_fu_856_p2 = (chl_in_reg_476 + 3'd1);

assign chl_out_1_fu_763_p2 = (chl_out_reg_465 + 5'd1);

assign conv_out1_d0 = FM_DDR_BUFF2_read_reg_1494;

assign exitcond10_fu_609_p2 = ((ap_phi_mux_indvar_phi_fu_389_p4 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond11_fu_626_p2 = ((ap_phi_mux_indvar1_phi_fu_401_p4 == 11'd1176) ? 1'b1 : 1'b0);

assign exitcond12_fu_650_p2 = ((ap_phi_mux_indvar4_phi_fu_413_p4 == 12'd2400) ? 1'b1 : 1'b0);

assign exitcond13_fu_1448_p2 = ((indvar6_reg_556 == 9'd400) ? 1'b1 : 1'b0);

assign exitcond1_fu_1038_p2 = ((chl_reg_509 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond2_fu_1022_p2 = ((c2_reg_498 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond3_fu_1006_p2 = ((r1_reg_487 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond4_fu_850_p2 = ((chl_in_reg_476 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond5_fu_757_p2 = ((chl_out_reg_465 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond6_fu_732_p2 = ((c_reg_454 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond7_fu_707_p2 = ((r_reg_443 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond8_fu_691_p2 = ((kc_reg_432 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond9_fu_671_p2 = ((kr_reg_421 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond_fu_1250_p2 = ((chl5_reg_545 == 5'd16) ? 1'b1 : 1'b0);

assign indvar2_fu_621_p1 = indvar_reg_385_pp0_iter1_reg;

assign indvar3_fu_638_p1 = indvar1_reg_397_pp1_iter1_reg;

assign indvar7_fu_1460_p1 = indvar6_reg_556;

assign indvar_next1_fu_632_p2 = (ap_phi_mux_indvar1_phi_fu_401_p4 + 11'd1);

assign indvar_next2_fu_656_p2 = (ap_phi_mux_indvar4_phi_fu_413_p4 + 12'd1);

assign indvar_next3_fu_1454_p2 = (indvar6_reg_556 + 9'd1);

assign indvar_next_fu_615_p2 = (ap_phi_mux_indvar_phi_fu_389_p4 + 5'd1);

assign kc_1_fu_697_p2 = (kc_reg_432 + 3'd1);

assign kc_cast_fu_687_p1 = kc_reg_432;

assign kr_1_fu_677_p2 = (kr_reg_421 + 3'd1);

assign kr_cast_fu_667_p1 = kr_reg_421;

assign m_axi_BIAS_ARADDR = 64'd6;

assign m_axi_BIAS_ARBURST = 2'd0;

assign m_axi_BIAS_ARCACHE = 4'd0;

assign m_axi_BIAS_ARID = 1'd0;

assign m_axi_BIAS_ARLEN = 32'd16;

assign m_axi_BIAS_ARLOCK = 2'd0;

assign m_axi_BIAS_ARPROT = 3'd0;

assign m_axi_BIAS_ARQOS = 4'd0;

assign m_axi_BIAS_ARREGION = 4'd0;

assign m_axi_BIAS_ARSIZE = 3'd0;

assign m_axi_BIAS_ARUSER = 1'd0;

assign m_axi_BIAS_AWADDR = 32'd0;

assign m_axi_BIAS_AWBURST = 2'd0;

assign m_axi_BIAS_AWCACHE = 4'd0;

assign m_axi_BIAS_AWID = 1'd0;

assign m_axi_BIAS_AWLEN = 32'd0;

assign m_axi_BIAS_AWLOCK = 2'd0;

assign m_axi_BIAS_AWPROT = 3'd0;

assign m_axi_BIAS_AWQOS = 4'd0;

assign m_axi_BIAS_AWREGION = 4'd0;

assign m_axi_BIAS_AWSIZE = 3'd0;

assign m_axi_BIAS_AWUSER = 1'd0;

assign m_axi_BIAS_AWVALID = 1'b0;

assign m_axi_BIAS_BREADY = 1'b0;

assign m_axi_BIAS_WDATA = 32'd0;

assign m_axi_BIAS_WID = 1'd0;

assign m_axi_BIAS_WLAST = 1'b0;

assign m_axi_BIAS_WSTRB = 4'd0;

assign m_axi_BIAS_WUSER = 1'd0;

assign m_axi_BIAS_WVALID = 1'b0;

assign m_axi_FM_DDR_BUFF1_ARADDR = 32'd0;

assign m_axi_FM_DDR_BUFF1_ARBURST = 2'd0;

assign m_axi_FM_DDR_BUFF1_ARCACHE = 4'd0;

assign m_axi_FM_DDR_BUFF1_ARID = 1'd0;

assign m_axi_FM_DDR_BUFF1_ARLEN = 32'd0;

assign m_axi_FM_DDR_BUFF1_ARLOCK = 2'd0;

assign m_axi_FM_DDR_BUFF1_ARPROT = 3'd0;

assign m_axi_FM_DDR_BUFF1_ARQOS = 4'd0;

assign m_axi_FM_DDR_BUFF1_ARREGION = 4'd0;

assign m_axi_FM_DDR_BUFF1_ARSIZE = 3'd0;

assign m_axi_FM_DDR_BUFF1_ARUSER = 1'd0;

assign m_axi_FM_DDR_BUFF1_ARVALID = 1'b0;

assign m_axi_FM_DDR_BUFF1_AWADDR = 32'd0;

assign m_axi_FM_DDR_BUFF1_AWBURST = 2'd0;

assign m_axi_FM_DDR_BUFF1_AWCACHE = 4'd0;

assign m_axi_FM_DDR_BUFF1_AWID = 1'd0;

assign m_axi_FM_DDR_BUFF1_AWLEN = 32'd400;

assign m_axi_FM_DDR_BUFF1_AWLOCK = 2'd0;

assign m_axi_FM_DDR_BUFF1_AWPROT = 3'd0;

assign m_axi_FM_DDR_BUFF1_AWQOS = 4'd0;

assign m_axi_FM_DDR_BUFF1_AWREGION = 4'd0;

assign m_axi_FM_DDR_BUFF1_AWSIZE = 3'd0;

assign m_axi_FM_DDR_BUFF1_AWUSER = 1'd0;

assign m_axi_FM_DDR_BUFF1_RREADY = 1'b0;

assign m_axi_FM_DDR_BUFF1_WDATA = conv_out2_load_reg_1829;

assign m_axi_FM_DDR_BUFF1_WID = 1'd0;

assign m_axi_FM_DDR_BUFF1_WLAST = 1'b0;

assign m_axi_FM_DDR_BUFF1_WSTRB = 4'd15;

assign m_axi_FM_DDR_BUFF1_WUSER = 1'd0;

assign m_axi_FM_DDR_BUFF2_ARADDR = 32'd0;

assign m_axi_FM_DDR_BUFF2_ARBURST = 2'd0;

assign m_axi_FM_DDR_BUFF2_ARCACHE = 4'd0;

assign m_axi_FM_DDR_BUFF2_ARID = 1'd0;

assign m_axi_FM_DDR_BUFF2_ARLEN = 32'd1176;

assign m_axi_FM_DDR_BUFF2_ARLOCK = 2'd0;

assign m_axi_FM_DDR_BUFF2_ARPROT = 3'd0;

assign m_axi_FM_DDR_BUFF2_ARQOS = 4'd0;

assign m_axi_FM_DDR_BUFF2_ARREGION = 4'd0;

assign m_axi_FM_DDR_BUFF2_ARSIZE = 3'd0;

assign m_axi_FM_DDR_BUFF2_ARUSER = 1'd0;

assign m_axi_FM_DDR_BUFF2_AWADDR = 32'd0;

assign m_axi_FM_DDR_BUFF2_AWBURST = 2'd0;

assign m_axi_FM_DDR_BUFF2_AWCACHE = 4'd0;

assign m_axi_FM_DDR_BUFF2_AWID = 1'd0;

assign m_axi_FM_DDR_BUFF2_AWLEN = 32'd0;

assign m_axi_FM_DDR_BUFF2_AWLOCK = 2'd0;

assign m_axi_FM_DDR_BUFF2_AWPROT = 3'd0;

assign m_axi_FM_DDR_BUFF2_AWQOS = 4'd0;

assign m_axi_FM_DDR_BUFF2_AWREGION = 4'd0;

assign m_axi_FM_DDR_BUFF2_AWSIZE = 3'd0;

assign m_axi_FM_DDR_BUFF2_AWUSER = 1'd0;

assign m_axi_FM_DDR_BUFF2_AWVALID = 1'b0;

assign m_axi_FM_DDR_BUFF2_BREADY = 1'b0;

assign m_axi_FM_DDR_BUFF2_WDATA = 32'd0;

assign m_axi_FM_DDR_BUFF2_WID = 1'd0;

assign m_axi_FM_DDR_BUFF2_WLAST = 1'b0;

assign m_axi_FM_DDR_BUFF2_WSTRB = 4'd0;

assign m_axi_FM_DDR_BUFF2_WUSER = 1'd0;

assign m_axi_FM_DDR_BUFF2_WVALID = 1'b0;

assign m_axi_WEIGHT_ARADDR = 64'd150;

assign m_axi_WEIGHT_ARBURST = 2'd0;

assign m_axi_WEIGHT_ARCACHE = 4'd0;

assign m_axi_WEIGHT_ARID = 1'd0;

assign m_axi_WEIGHT_ARLEN = 32'd2400;

assign m_axi_WEIGHT_ARLOCK = 2'd0;

assign m_axi_WEIGHT_ARPROT = 3'd0;

assign m_axi_WEIGHT_ARQOS = 4'd0;

assign m_axi_WEIGHT_ARREGION = 4'd0;

assign m_axi_WEIGHT_ARSIZE = 3'd0;

assign m_axi_WEIGHT_ARUSER = 1'd0;

assign m_axi_WEIGHT_AWADDR = 32'd0;

assign m_axi_WEIGHT_AWBURST = 2'd0;

assign m_axi_WEIGHT_AWCACHE = 4'd0;

assign m_axi_WEIGHT_AWID = 1'd0;

assign m_axi_WEIGHT_AWLEN = 32'd0;

assign m_axi_WEIGHT_AWLOCK = 2'd0;

assign m_axi_WEIGHT_AWPROT = 3'd0;

assign m_axi_WEIGHT_AWQOS = 4'd0;

assign m_axi_WEIGHT_AWREGION = 4'd0;

assign m_axi_WEIGHT_AWSIZE = 3'd0;

assign m_axi_WEIGHT_AWUSER = 1'd0;

assign m_axi_WEIGHT_AWVALID = 1'b0;

assign m_axi_WEIGHT_BREADY = 1'b0;

assign m_axi_WEIGHT_WDATA = 32'd0;

assign m_axi_WEIGHT_WID = 1'd0;

assign m_axi_WEIGHT_WLAST = 1'b0;

assign m_axi_WEIGHT_WSTRB = 4'd0;

assign m_axi_WEIGHT_WUSER = 1'd0;

assign m_axi_WEIGHT_WVALID = 1'b0;

assign notlhs_fu_1144_p2 = ((tmp_17_fu_1130_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_1150_p2 = ((tmp_18_fu_1140_p1 == 23'd0) ? 1'b1 : 1'b0);

assign p_shl10_cast_fu_980_p3 = {{tmp_61_reg_1622}, {2'd0}};

assign p_shl12_cast_fu_1085_p3 = {{tmp_12_fu_1080_p2}, {3'd0}};

assign p_shl13_cast_fu_1101_p1 = tmp_13_fu_1093_p3;

assign p_shl14_cast_fu_1058_p1 = tmp_8_fu_1050_p3;

assign p_shl15_cast_fu_1070_p1 = tmp_10_fu_1062_p3;

assign p_shl16_cast_fu_1333_p3 = {{tmp_45_fu_1324_p2}, {2'd0}};

assign p_shl17_cast_fu_1314_p1 = tmp_43_fu_1306_p3;

assign p_shl18_cast_fu_1402_p3 = {{tmp_38_reg_1764}, {3'd0}};

assign p_shl19_cast_fu_1416_p1 = tmp_39_fu_1409_p3;

assign p_shl1_cast_fu_830_p1 = tmp_53_fu_822_p3;

assign p_shl20_cast_fu_1358_p3 = {{tmp_27_reg_1758}, {3'd0}};

assign p_shl21_cast_fu_1372_p1 = tmp_28_fu_1365_p3;

assign p_shl22_cast_fu_1274_p1 = tmp_24_fu_1266_p3;

assign p_shl23_cast_fu_1286_p1 = tmp_25_fu_1278_p3;

assign p_shl4_cast_fu_777_p1 = tmp_48_fu_769_p3;

assign p_shl5_cast_fu_789_p1 = tmp_49_fu_781_p3;

assign p_shl6_cast_fu_949_p3 = {{tmp_68_fu_945_p1}, {4'd0}};

assign p_shl7_cast_fu_965_p1 = $signed(tmp_69_fu_957_p3);

assign p_shl8_cast_fu_914_p1 = tmp_64_fu_906_p3;

assign p_shl9_cast_fu_926_p1 = tmp_65_fu_918_p3;

assign p_shl_cast_fu_814_p3 = {{tmp_52_fu_809_p2}, {3'd0}};

assign p_shl_fu_883_p1 = $signed(tmp_57_fu_875_p3);

assign r_1_fu_1012_p2 = (r1_reg_487 + 4'd1);

assign r_2_fu_1244_p2 = (r3_reg_521 + 4'd2);

assign r_3_fu_713_p2 = (r_reg_443 + 4'd1);

assign tmp_10_cast_fu_1034_p1 = c2_reg_498;

assign tmp_10_fu_1062_p3 = {{chl_reg_509}, {1'd0}};

assign tmp_11_fu_1074_p2 = (p_shl15_cast_fu_1070_p1 + p_shl14_cast_fu_1058_p1);

assign tmp_12_cast_fu_724_p1 = tmp_s_fu_719_p2;

assign tmp_12_fu_1080_p2 = (tmp_11_fu_1074_p2 + tmp_4_cast_reg_1660);

assign tmp_13_cast_fu_728_p1 = r_reg_443;

assign tmp_13_fu_1093_p3 = {{tmp_12_fu_1080_p2}, {1'd0}};

assign tmp_14_fu_1105_p2 = (p_shl13_cast_fu_1101_p1 + p_shl12_cast_fu_1085_p3);

assign tmp_15_cast_fu_1216_p1 = c4_reg_533;

assign tmp_15_fu_1111_p2 = (tmp_14_fu_1105_p2 + tmp_10_cast_reg_1673);

assign tmp_17_cast_fu_1226_p1 = tmp_4_fu_1220_p2;

assign tmp_17_fu_1130_p4 = {{tmp_23_to_int_fu_1126_p1[30:23]}};

assign tmp_18_fu_1140_p1 = tmp_23_to_int_fu_1126_p1[22:0];

assign tmp_19_cast_fu_1240_p1 = tmp_5_fu_1230_p4;

assign tmp_19_fu_1156_p2 = (notrhs_fu_1150_p2 | notlhs_fu_1144_p2);

assign tmp_1_fu_662_p1 = indvar4_reg_409_pp2_iter1_reg;

assign tmp_21_fu_1162_p2 = (tmp_20_fu_576_p2 & tmp_19_fu_1156_p2);

assign tmp_22_fu_1168_p3 = ((tmp_21_fu_1162_p2[0:0] === 1'b1) ? reg_594 : 32'd0);

assign tmp_23_fu_744_p2 = (c_reg_454 + kc_cast_reg_1537);

assign tmp_23_to_int_fu_1126_p1 = reg_594;

assign tmp_24_fu_1266_p3 = {{chl5_reg_545}, {3'd0}};

assign tmp_25_fu_1278_p3 = {{chl5_reg_545}, {1'd0}};

assign tmp_26_cast_fu_749_p1 = tmp_23_fu_744_p2;

assign tmp_26_fu_1290_p2 = (p_shl22_cast_fu_1274_p1 + p_shl23_cast_fu_1286_p1);

assign tmp_27_cast_fu_753_p1 = c_reg_454;

assign tmp_27_fu_1296_p2 = (tmp_8_cast_reg_1710 + tmp_26_fu_1290_p2);

assign tmp_28_fu_1365_p3 = {{tmp_27_reg_1758}, {1'd0}};

assign tmp_29_cast_fu_1262_p1 = chl5_reg_545;

assign tmp_29_fu_1376_p2 = (p_shl20_cast_fu_1358_p3 + p_shl21_cast_fu_1372_p1);

assign tmp_2_fu_1210_p2 = ((c4_reg_533 < 4'd10) ? 1'b1 : 1'b0);

assign tmp_34_fu_1382_p2 = (tmp_15_cast_reg_1728 + tmp_29_fu_1376_p2);

assign tmp_35_cast_fu_862_p1 = chl_in_reg_476;

assign tmp_35_fu_1392_p2 = (tmp_17_cast_reg_1734 + tmp_29_fu_1376_p2);

assign tmp_38_fu_1301_p2 = (tmp_cast_reg_1715 + tmp_26_fu_1290_p2);

assign tmp_39_fu_1409_p3 = {{tmp_38_reg_1764}, {1'd0}};

assign tmp_3_fu_683_p1 = kr_reg_421;

assign tmp_40_fu_1420_p2 = (p_shl18_cast_fu_1402_p3 + p_shl19_cast_fu_1416_p1);

assign tmp_41_fu_1426_p2 = (tmp_15_cast_reg_1728 + tmp_40_fu_1420_p2);

assign tmp_42_cast_fu_1116_p1 = tmp_15_fu_1111_p2;

assign tmp_42_fu_1431_p2 = (tmp_17_cast_reg_1734 + tmp_40_fu_1420_p2);

assign tmp_43_fu_1306_p3 = {{chl5_reg_545}, {2'd0}};

assign tmp_44_fu_1318_p2 = (p_shl17_cast_fu_1314_p1 + tmp_29_cast_fu_1262_p1);

assign tmp_45_fu_1324_p2 = (tmp_5_cast_reg_1720 + tmp_44_fu_1318_p2);

assign tmp_46_fu_1341_p2 = (p_shl16_cast_fu_1333_p3 + tmp_65_cast_fu_1329_p1);

assign tmp_47_fu_1347_p2 = (tmp_19_cast_reg_1740 + tmp_46_fu_1341_p2);

assign tmp_48_fu_769_p3 = {{chl_out_reg_465}, {3'd0}};

assign tmp_49_fu_781_p3 = {{chl_out_reg_465}, {1'd0}};

assign tmp_4_cast_fu_1018_p1 = r1_reg_487;

assign tmp_4_fu_1220_p2 = (c4_reg_533 | 4'd1);

assign tmp_50_fu_793_p2 = (p_shl4_cast_fu_777_p1 - p_shl5_cast_fu_789_p1);

assign tmp_51_fu_803_p2 = (p_shl4_cast_fu_777_p1 + p_shl5_cast_fu_789_p1);

assign tmp_52_fu_809_p2 = (tmp_13_cast_reg_1568 + tmp_51_fu_803_p2);

assign tmp_53_fu_822_p3 = {{tmp_52_fu_809_p2}, {1'd0}};

assign tmp_54_fu_834_p2 = (p_shl_cast_fu_814_p3 + p_shl1_cast_fu_830_p1);

assign tmp_55_cast_fu_1387_p1 = tmp_34_fu_1382_p2;

assign tmp_55_fu_840_p2 = (tmp_27_cast_reg_1586 + tmp_54_fu_834_p2);

assign tmp_56_cast_fu_1397_p1 = tmp_35_fu_1392_p2;

assign tmp_56_fu_866_p2 = ($signed(tmp_71_cast_reg_1599) + $signed(tmp_35_cast_fu_862_p1));

assign tmp_57_fu_875_p3 = {{tmp_56_fu_866_p2}, {2'd0}};

assign tmp_58_fu_887_p2 = ($signed(tmp_80_cast_fu_871_p1) + $signed(p_shl_fu_883_p1));

assign tmp_59_fu_893_p2 = (tmp_58_fu_887_p2 + tmp_3_reg_1532);

assign tmp_5_cast_fu_1206_p1 = tmp_fu_1196_p4;

assign tmp_5_fu_1230_p4 = {{c4_reg_533[3:1]}};

assign tmp_60_fu_898_p1 = tmp_59_fu_893_p2[12:0];

assign tmp_61_cast_fu_1436_p1 = tmp_41_reg_1790;

assign tmp_61_fu_902_p1 = tmp_59_fu_893_p2[10:0];

assign tmp_62_cast_fu_1440_p1 = tmp_42_reg_1795;

assign tmp_62_fu_987_p2 = (tmp_60_reg_1617 + p_shl10_cast_fu_980_p3);

assign tmp_63_fu_992_p2 = (tmp_62_fu_987_p2 + tmp_6_cast_reg_1550);

assign tmp_64_fu_906_p3 = {{chl_in_reg_476}, {4'd0}};

assign tmp_65_cast_fu_1329_p1 = tmp_45_fu_1324_p2;

assign tmp_65_fu_918_p3 = {{chl_in_reg_476}, {1'd0}};

assign tmp_66_fu_930_p2 = (p_shl8_cast_fu_914_p1 - p_shl9_cast_fu_926_p1);

assign tmp_67_fu_940_p2 = ($signed(tmp_89_cast_fu_936_p1) + $signed(tmp_12_cast_reg_1563));

assign tmp_68_cast_fu_1444_p1 = tmp_47_reg_1770;

assign tmp_68_fu_945_p1 = tmp_67_fu_940_p2[7:0];

assign tmp_69_fu_957_p3 = {{tmp_67_fu_940_p2}, {1'd0}};

assign tmp_6_cast_fu_703_p1 = kc_reg_432;

assign tmp_6_fu_1121_p1 = chl_reg_509;

assign tmp_70_fu_969_p2 = ($signed(p_shl6_cast_fu_949_p3) - $signed(p_shl7_cast_fu_965_p1));

assign tmp_71_cast_fu_799_p1 = $signed(tmp_50_fu_793_p2);

assign tmp_71_fu_975_p2 = (tmp_70_fu_969_p2 + tmp_26_cast_reg_1581);

assign tmp_79_cast_fu_845_p1 = tmp_55_fu_840_p2;

assign tmp_7_fu_1176_p2 = ((r3_reg_521 < 4'd10) ? 1'b1 : 1'b0);

assign tmp_80_cast_fu_871_p1 = tmp_56_fu_866_p2;

assign tmp_86_cast_fu_997_p1 = tmp_63_fu_992_p2;

assign tmp_89_cast_fu_936_p1 = $signed(tmp_66_fu_930_p2);

assign tmp_8_cast_fu_1182_p1 = r3_reg_521;

assign tmp_8_fu_1050_p3 = {{chl_reg_509}, {3'd0}};

assign tmp_94_cast_fu_1002_p1 = tmp_71_reg_1627;

assign tmp_9_fu_1186_p2 = (r3_reg_521 | 4'd1);

assign tmp_cast_fu_1192_p1 = tmp_9_fu_1186_p2;

assign tmp_fu_1196_p4 = {{r3_reg_521[3:1]}};

assign tmp_s_fu_719_p2 = (r_reg_443 + kr_cast_reg_1519);

always @ (posedge ap_clk) begin
    kr_cast_reg_1519[3] <= 1'b0;
    tmp_3_reg_1532[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    kc_cast_reg_1537[3] <= 1'b0;
    tmp_6_cast_reg_1550[12:3] <= 10'b0000000000;
    tmp_12_cast_reg_1563[8:4] <= 5'b00000;
    tmp_13_cast_reg_1568[8:4] <= 5'b00000;
    tmp_26_cast_reg_1581[11:4] <= 8'b00000000;
    tmp_27_cast_reg_1586[11:4] <= 8'b00000000;
    tmp_71_cast_reg_1599[0] <= 1'b0;
    tmp_4_cast_reg_1660[8:4] <= 5'b00000;
    tmp_10_cast_reg_1673[11:4] <= 8'b00000000;
    tmp_8_cast_reg_1710[8:4] <= 5'b00000;
    tmp_cast_reg_1715[0] <= 1'b1;
    tmp_cast_reg_1715[8:4] <= 5'b00000;
    tmp_5_cast_reg_1720[7:3] <= 5'b00000;
    tmp_15_cast_reg_1728[11:4] <= 8'b00000000;
    tmp_17_cast_reg_1734[0] <= 1'b1;
    tmp_17_cast_reg_1734[11:4] <= 8'b00000000;
    tmp_19_cast_reg_1740[9:3] <= 7'b0000000;
    tmp_38_reg_1764[0] <= 1'b1;
    tmp_42_reg_1795[0] <= 1'b1;
end

endmodule //conv2
