// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_FM_DDR_BUFF1_AWVALID,
        m_axi_FM_DDR_BUFF1_AWREADY,
        m_axi_FM_DDR_BUFF1_AWADDR,
        m_axi_FM_DDR_BUFF1_AWID,
        m_axi_FM_DDR_BUFF1_AWLEN,
        m_axi_FM_DDR_BUFF1_AWSIZE,
        m_axi_FM_DDR_BUFF1_AWBURST,
        m_axi_FM_DDR_BUFF1_AWLOCK,
        m_axi_FM_DDR_BUFF1_AWCACHE,
        m_axi_FM_DDR_BUFF1_AWPROT,
        m_axi_FM_DDR_BUFF1_AWQOS,
        m_axi_FM_DDR_BUFF1_AWREGION,
        m_axi_FM_DDR_BUFF1_AWUSER,
        m_axi_FM_DDR_BUFF1_WVALID,
        m_axi_FM_DDR_BUFF1_WREADY,
        m_axi_FM_DDR_BUFF1_WDATA,
        m_axi_FM_DDR_BUFF1_WSTRB,
        m_axi_FM_DDR_BUFF1_WLAST,
        m_axi_FM_DDR_BUFF1_WID,
        m_axi_FM_DDR_BUFF1_WUSER,
        m_axi_FM_DDR_BUFF1_ARVALID,
        m_axi_FM_DDR_BUFF1_ARREADY,
        m_axi_FM_DDR_BUFF1_ARADDR,
        m_axi_FM_DDR_BUFF1_ARID,
        m_axi_FM_DDR_BUFF1_ARLEN,
        m_axi_FM_DDR_BUFF1_ARSIZE,
        m_axi_FM_DDR_BUFF1_ARBURST,
        m_axi_FM_DDR_BUFF1_ARLOCK,
        m_axi_FM_DDR_BUFF1_ARCACHE,
        m_axi_FM_DDR_BUFF1_ARPROT,
        m_axi_FM_DDR_BUFF1_ARQOS,
        m_axi_FM_DDR_BUFF1_ARREGION,
        m_axi_FM_DDR_BUFF1_ARUSER,
        m_axi_FM_DDR_BUFF1_RVALID,
        m_axi_FM_DDR_BUFF1_RREADY,
        m_axi_FM_DDR_BUFF1_RDATA,
        m_axi_FM_DDR_BUFF1_RLAST,
        m_axi_FM_DDR_BUFF1_RID,
        m_axi_FM_DDR_BUFF1_RUSER,
        m_axi_FM_DDR_BUFF1_RRESP,
        m_axi_FM_DDR_BUFF1_BVALID,
        m_axi_FM_DDR_BUFF1_BREADY,
        m_axi_FM_DDR_BUFF1_BRESP,
        m_axi_FM_DDR_BUFF1_BID,
        m_axi_FM_DDR_BUFF1_BUSER,
        m_axi_FM_DDR_BUFF2_AWVALID,
        m_axi_FM_DDR_BUFF2_AWREADY,
        m_axi_FM_DDR_BUFF2_AWADDR,
        m_axi_FM_DDR_BUFF2_AWID,
        m_axi_FM_DDR_BUFF2_AWLEN,
        m_axi_FM_DDR_BUFF2_AWSIZE,
        m_axi_FM_DDR_BUFF2_AWBURST,
        m_axi_FM_DDR_BUFF2_AWLOCK,
        m_axi_FM_DDR_BUFF2_AWCACHE,
        m_axi_FM_DDR_BUFF2_AWPROT,
        m_axi_FM_DDR_BUFF2_AWQOS,
        m_axi_FM_DDR_BUFF2_AWREGION,
        m_axi_FM_DDR_BUFF2_AWUSER,
        m_axi_FM_DDR_BUFF2_WVALID,
        m_axi_FM_DDR_BUFF2_WREADY,
        m_axi_FM_DDR_BUFF2_WDATA,
        m_axi_FM_DDR_BUFF2_WSTRB,
        m_axi_FM_DDR_BUFF2_WLAST,
        m_axi_FM_DDR_BUFF2_WID,
        m_axi_FM_DDR_BUFF2_WUSER,
        m_axi_FM_DDR_BUFF2_ARVALID,
        m_axi_FM_DDR_BUFF2_ARREADY,
        m_axi_FM_DDR_BUFF2_ARADDR,
        m_axi_FM_DDR_BUFF2_ARID,
        m_axi_FM_DDR_BUFF2_ARLEN,
        m_axi_FM_DDR_BUFF2_ARSIZE,
        m_axi_FM_DDR_BUFF2_ARBURST,
        m_axi_FM_DDR_BUFF2_ARLOCK,
        m_axi_FM_DDR_BUFF2_ARCACHE,
        m_axi_FM_DDR_BUFF2_ARPROT,
        m_axi_FM_DDR_BUFF2_ARQOS,
        m_axi_FM_DDR_BUFF2_ARREGION,
        m_axi_FM_DDR_BUFF2_ARUSER,
        m_axi_FM_DDR_BUFF2_RVALID,
        m_axi_FM_DDR_BUFF2_RREADY,
        m_axi_FM_DDR_BUFF2_RDATA,
        m_axi_FM_DDR_BUFF2_RLAST,
        m_axi_FM_DDR_BUFF2_RID,
        m_axi_FM_DDR_BUFF2_RUSER,
        m_axi_FM_DDR_BUFF2_RRESP,
        m_axi_FM_DDR_BUFF2_BVALID,
        m_axi_FM_DDR_BUFF2_BREADY,
        m_axi_FM_DDR_BUFF2_BRESP,
        m_axi_FM_DDR_BUFF2_BID,
        m_axi_FM_DDR_BUFF2_BUSER,
        m_axi_WEIGHT_AWVALID,
        m_axi_WEIGHT_AWREADY,
        m_axi_WEIGHT_AWADDR,
        m_axi_WEIGHT_AWID,
        m_axi_WEIGHT_AWLEN,
        m_axi_WEIGHT_AWSIZE,
        m_axi_WEIGHT_AWBURST,
        m_axi_WEIGHT_AWLOCK,
        m_axi_WEIGHT_AWCACHE,
        m_axi_WEIGHT_AWPROT,
        m_axi_WEIGHT_AWQOS,
        m_axi_WEIGHT_AWREGION,
        m_axi_WEIGHT_AWUSER,
        m_axi_WEIGHT_WVALID,
        m_axi_WEIGHT_WREADY,
        m_axi_WEIGHT_WDATA,
        m_axi_WEIGHT_WSTRB,
        m_axi_WEIGHT_WLAST,
        m_axi_WEIGHT_WID,
        m_axi_WEIGHT_WUSER,
        m_axi_WEIGHT_ARVALID,
        m_axi_WEIGHT_ARREADY,
        m_axi_WEIGHT_ARADDR,
        m_axi_WEIGHT_ARID,
        m_axi_WEIGHT_ARLEN,
        m_axi_WEIGHT_ARSIZE,
        m_axi_WEIGHT_ARBURST,
        m_axi_WEIGHT_ARLOCK,
        m_axi_WEIGHT_ARCACHE,
        m_axi_WEIGHT_ARPROT,
        m_axi_WEIGHT_ARQOS,
        m_axi_WEIGHT_ARREGION,
        m_axi_WEIGHT_ARUSER,
        m_axi_WEIGHT_RVALID,
        m_axi_WEIGHT_RREADY,
        m_axi_WEIGHT_RDATA,
        m_axi_WEIGHT_RLAST,
        m_axi_WEIGHT_RID,
        m_axi_WEIGHT_RUSER,
        m_axi_WEIGHT_RRESP,
        m_axi_WEIGHT_BVALID,
        m_axi_WEIGHT_BREADY,
        m_axi_WEIGHT_BRESP,
        m_axi_WEIGHT_BID,
        m_axi_WEIGHT_BUSER,
        m_axi_BIAS_AWVALID,
        m_axi_BIAS_AWREADY,
        m_axi_BIAS_AWADDR,
        m_axi_BIAS_AWID,
        m_axi_BIAS_AWLEN,
        m_axi_BIAS_AWSIZE,
        m_axi_BIAS_AWBURST,
        m_axi_BIAS_AWLOCK,
        m_axi_BIAS_AWCACHE,
        m_axi_BIAS_AWPROT,
        m_axi_BIAS_AWQOS,
        m_axi_BIAS_AWREGION,
        m_axi_BIAS_AWUSER,
        m_axi_BIAS_WVALID,
        m_axi_BIAS_WREADY,
        m_axi_BIAS_WDATA,
        m_axi_BIAS_WSTRB,
        m_axi_BIAS_WLAST,
        m_axi_BIAS_WID,
        m_axi_BIAS_WUSER,
        m_axi_BIAS_ARVALID,
        m_axi_BIAS_ARREADY,
        m_axi_BIAS_ARADDR,
        m_axi_BIAS_ARID,
        m_axi_BIAS_ARLEN,
        m_axi_BIAS_ARSIZE,
        m_axi_BIAS_ARBURST,
        m_axi_BIAS_ARLOCK,
        m_axi_BIAS_ARCACHE,
        m_axi_BIAS_ARPROT,
        m_axi_BIAS_ARQOS,
        m_axi_BIAS_ARREGION,
        m_axi_BIAS_ARUSER,
        m_axi_BIAS_RVALID,
        m_axi_BIAS_RREADY,
        m_axi_BIAS_RDATA,
        m_axi_BIAS_RLAST,
        m_axi_BIAS_RID,
        m_axi_BIAS_RUSER,
        m_axi_BIAS_RRESP,
        m_axi_BIAS_BVALID,
        m_axi_BIAS_BREADY,
        m_axi_BIAS_BRESP,
        m_axi_BIAS_BID,
        m_axi_BIAS_BUSER,
        conv_out1_address0,
        conv_out1_ce0,
        conv_out1_we0,
        conv_out1_d0,
        conv_out1_q0
);

parameter    ap_ST_fsm_state1 = 86'd1;
parameter    ap_ST_fsm_state2 = 86'd2;
parameter    ap_ST_fsm_state3 = 86'd4;
parameter    ap_ST_fsm_state4 = 86'd8;
parameter    ap_ST_fsm_state5 = 86'd16;
parameter    ap_ST_fsm_state6 = 86'd32;
parameter    ap_ST_fsm_state7 = 86'd64;
parameter    ap_ST_fsm_pp0_stage0 = 86'd128;
parameter    ap_ST_fsm_state11 = 86'd256;
parameter    ap_ST_fsm_state12 = 86'd512;
parameter    ap_ST_fsm_state13 = 86'd1024;
parameter    ap_ST_fsm_state14 = 86'd2048;
parameter    ap_ST_fsm_state15 = 86'd4096;
parameter    ap_ST_fsm_state16 = 86'd8192;
parameter    ap_ST_fsm_state17 = 86'd16384;
parameter    ap_ST_fsm_pp1_stage0 = 86'd32768;
parameter    ap_ST_fsm_state21 = 86'd65536;
parameter    ap_ST_fsm_state22 = 86'd131072;
parameter    ap_ST_fsm_state23 = 86'd262144;
parameter    ap_ST_fsm_state24 = 86'd524288;
parameter    ap_ST_fsm_state25 = 86'd1048576;
parameter    ap_ST_fsm_state26 = 86'd2097152;
parameter    ap_ST_fsm_state27 = 86'd4194304;
parameter    ap_ST_fsm_pp2_stage0 = 86'd8388608;
parameter    ap_ST_fsm_state38 = 86'd16777216;
parameter    ap_ST_fsm_state39 = 86'd33554432;
parameter    ap_ST_fsm_state40 = 86'd67108864;
parameter    ap_ST_fsm_state41 = 86'd134217728;
parameter    ap_ST_fsm_state42 = 86'd268435456;
parameter    ap_ST_fsm_state43 = 86'd536870912;
parameter    ap_ST_fsm_state44 = 86'd1073741824;
parameter    ap_ST_fsm_state45 = 86'd2147483648;
parameter    ap_ST_fsm_state46 = 86'd4294967296;
parameter    ap_ST_fsm_state47 = 86'd8589934592;
parameter    ap_ST_fsm_state48 = 86'd17179869184;
parameter    ap_ST_fsm_state49 = 86'd34359738368;
parameter    ap_ST_fsm_state50 = 86'd68719476736;
parameter    ap_ST_fsm_state51 = 86'd137438953472;
parameter    ap_ST_fsm_state52 = 86'd274877906944;
parameter    ap_ST_fsm_state53 = 86'd549755813888;
parameter    ap_ST_fsm_state54 = 86'd1099511627776;
parameter    ap_ST_fsm_state55 = 86'd2199023255552;
parameter    ap_ST_fsm_state56 = 86'd4398046511104;
parameter    ap_ST_fsm_state57 = 86'd8796093022208;
parameter    ap_ST_fsm_state58 = 86'd17592186044416;
parameter    ap_ST_fsm_state59 = 86'd35184372088832;
parameter    ap_ST_fsm_state60 = 86'd70368744177664;
parameter    ap_ST_fsm_state61 = 86'd140737488355328;
parameter    ap_ST_fsm_state62 = 86'd281474976710656;
parameter    ap_ST_fsm_state63 = 86'd562949953421312;
parameter    ap_ST_fsm_state64 = 86'd1125899906842624;
parameter    ap_ST_fsm_state65 = 86'd2251799813685248;
parameter    ap_ST_fsm_state66 = 86'd4503599627370496;
parameter    ap_ST_fsm_state67 = 86'd9007199254740992;
parameter    ap_ST_fsm_state68 = 86'd18014398509481984;
parameter    ap_ST_fsm_state69 = 86'd36028797018963968;
parameter    ap_ST_fsm_state70 = 86'd72057594037927936;
parameter    ap_ST_fsm_state71 = 86'd144115188075855872;
parameter    ap_ST_fsm_state72 = 86'd288230376151711744;
parameter    ap_ST_fsm_state73 = 86'd576460752303423488;
parameter    ap_ST_fsm_state74 = 86'd1152921504606846976;
parameter    ap_ST_fsm_state75 = 86'd2305843009213693952;
parameter    ap_ST_fsm_state76 = 86'd4611686018427387904;
parameter    ap_ST_fsm_state77 = 86'd9223372036854775808;
parameter    ap_ST_fsm_state78 = 86'd18446744073709551616;
parameter    ap_ST_fsm_state79 = 86'd36893488147419103232;
parameter    ap_ST_fsm_state80 = 86'd73786976294838206464;
parameter    ap_ST_fsm_state81 = 86'd147573952589676412928;
parameter    ap_ST_fsm_state82 = 86'd295147905179352825856;
parameter    ap_ST_fsm_state83 = 86'd590295810358705651712;
parameter    ap_ST_fsm_state84 = 86'd1180591620717411303424;
parameter    ap_ST_fsm_state85 = 86'd2361183241434822606848;
parameter    ap_ST_fsm_state86 = 86'd4722366482869645213696;
parameter    ap_ST_fsm_state87 = 86'd9444732965739290427392;
parameter    ap_ST_fsm_state88 = 86'd18889465931478580854784;
parameter    ap_ST_fsm_state89 = 86'd37778931862957161709568;
parameter    ap_ST_fsm_state90 = 86'd75557863725914323419136;
parameter    ap_ST_fsm_state91 = 86'd151115727451828646838272;
parameter    ap_ST_fsm_state92 = 86'd302231454903657293676544;
parameter    ap_ST_fsm_state93 = 86'd604462909807314587353088;
parameter    ap_ST_fsm_pp3_stage0 = 86'd1208925819614629174706176;
parameter    ap_ST_fsm_state97 = 86'd2417851639229258349412352;
parameter    ap_ST_fsm_state98 = 86'd4835703278458516698824704;
parameter    ap_ST_fsm_state99 = 86'd9671406556917033397649408;
parameter    ap_ST_fsm_state100 = 86'd19342813113834066795298816;
parameter    ap_ST_fsm_state101 = 86'd38685626227668133590597632;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_FM_DDR_BUFF1_AWVALID;
input   m_axi_FM_DDR_BUFF1_AWREADY;
output  [31:0] m_axi_FM_DDR_BUFF1_AWADDR;
output  [0:0] m_axi_FM_DDR_BUFF1_AWID;
output  [31:0] m_axi_FM_DDR_BUFF1_AWLEN;
output  [2:0] m_axi_FM_DDR_BUFF1_AWSIZE;
output  [1:0] m_axi_FM_DDR_BUFF1_AWBURST;
output  [1:0] m_axi_FM_DDR_BUFF1_AWLOCK;
output  [3:0] m_axi_FM_DDR_BUFF1_AWCACHE;
output  [2:0] m_axi_FM_DDR_BUFF1_AWPROT;
output  [3:0] m_axi_FM_DDR_BUFF1_AWQOS;
output  [3:0] m_axi_FM_DDR_BUFF1_AWREGION;
output  [0:0] m_axi_FM_DDR_BUFF1_AWUSER;
output   m_axi_FM_DDR_BUFF1_WVALID;
input   m_axi_FM_DDR_BUFF1_WREADY;
output  [31:0] m_axi_FM_DDR_BUFF1_WDATA;
output  [3:0] m_axi_FM_DDR_BUFF1_WSTRB;
output   m_axi_FM_DDR_BUFF1_WLAST;
output  [0:0] m_axi_FM_DDR_BUFF1_WID;
output  [0:0] m_axi_FM_DDR_BUFF1_WUSER;
output   m_axi_FM_DDR_BUFF1_ARVALID;
input   m_axi_FM_DDR_BUFF1_ARREADY;
output  [31:0] m_axi_FM_DDR_BUFF1_ARADDR;
output  [0:0] m_axi_FM_DDR_BUFF1_ARID;
output  [31:0] m_axi_FM_DDR_BUFF1_ARLEN;
output  [2:0] m_axi_FM_DDR_BUFF1_ARSIZE;
output  [1:0] m_axi_FM_DDR_BUFF1_ARBURST;
output  [1:0] m_axi_FM_DDR_BUFF1_ARLOCK;
output  [3:0] m_axi_FM_DDR_BUFF1_ARCACHE;
output  [2:0] m_axi_FM_DDR_BUFF1_ARPROT;
output  [3:0] m_axi_FM_DDR_BUFF1_ARQOS;
output  [3:0] m_axi_FM_DDR_BUFF1_ARREGION;
output  [0:0] m_axi_FM_DDR_BUFF1_ARUSER;
input   m_axi_FM_DDR_BUFF1_RVALID;
output   m_axi_FM_DDR_BUFF1_RREADY;
input  [31:0] m_axi_FM_DDR_BUFF1_RDATA;
input   m_axi_FM_DDR_BUFF1_RLAST;
input  [0:0] m_axi_FM_DDR_BUFF1_RID;
input  [0:0] m_axi_FM_DDR_BUFF1_RUSER;
input  [1:0] m_axi_FM_DDR_BUFF1_RRESP;
input   m_axi_FM_DDR_BUFF1_BVALID;
output   m_axi_FM_DDR_BUFF1_BREADY;
input  [1:0] m_axi_FM_DDR_BUFF1_BRESP;
input  [0:0] m_axi_FM_DDR_BUFF1_BID;
input  [0:0] m_axi_FM_DDR_BUFF1_BUSER;
output   m_axi_FM_DDR_BUFF2_AWVALID;
input   m_axi_FM_DDR_BUFF2_AWREADY;
output  [31:0] m_axi_FM_DDR_BUFF2_AWADDR;
output  [0:0] m_axi_FM_DDR_BUFF2_AWID;
output  [31:0] m_axi_FM_DDR_BUFF2_AWLEN;
output  [2:0] m_axi_FM_DDR_BUFF2_AWSIZE;
output  [1:0] m_axi_FM_DDR_BUFF2_AWBURST;
output  [1:0] m_axi_FM_DDR_BUFF2_AWLOCK;
output  [3:0] m_axi_FM_DDR_BUFF2_AWCACHE;
output  [2:0] m_axi_FM_DDR_BUFF2_AWPROT;
output  [3:0] m_axi_FM_DDR_BUFF2_AWQOS;
output  [3:0] m_axi_FM_DDR_BUFF2_AWREGION;
output  [0:0] m_axi_FM_DDR_BUFF2_AWUSER;
output   m_axi_FM_DDR_BUFF2_WVALID;
input   m_axi_FM_DDR_BUFF2_WREADY;
output  [31:0] m_axi_FM_DDR_BUFF2_WDATA;
output  [3:0] m_axi_FM_DDR_BUFF2_WSTRB;
output   m_axi_FM_DDR_BUFF2_WLAST;
output  [0:0] m_axi_FM_DDR_BUFF2_WID;
output  [0:0] m_axi_FM_DDR_BUFF2_WUSER;
output   m_axi_FM_DDR_BUFF2_ARVALID;
input   m_axi_FM_DDR_BUFF2_ARREADY;
output  [31:0] m_axi_FM_DDR_BUFF2_ARADDR;
output  [0:0] m_axi_FM_DDR_BUFF2_ARID;
output  [31:0] m_axi_FM_DDR_BUFF2_ARLEN;
output  [2:0] m_axi_FM_DDR_BUFF2_ARSIZE;
output  [1:0] m_axi_FM_DDR_BUFF2_ARBURST;
output  [1:0] m_axi_FM_DDR_BUFF2_ARLOCK;
output  [3:0] m_axi_FM_DDR_BUFF2_ARCACHE;
output  [2:0] m_axi_FM_DDR_BUFF2_ARPROT;
output  [3:0] m_axi_FM_DDR_BUFF2_ARQOS;
output  [3:0] m_axi_FM_DDR_BUFF2_ARREGION;
output  [0:0] m_axi_FM_DDR_BUFF2_ARUSER;
input   m_axi_FM_DDR_BUFF2_RVALID;
output   m_axi_FM_DDR_BUFF2_RREADY;
input  [31:0] m_axi_FM_DDR_BUFF2_RDATA;
input   m_axi_FM_DDR_BUFF2_RLAST;
input  [0:0] m_axi_FM_DDR_BUFF2_RID;
input  [0:0] m_axi_FM_DDR_BUFF2_RUSER;
input  [1:0] m_axi_FM_DDR_BUFF2_RRESP;
input   m_axi_FM_DDR_BUFF2_BVALID;
output   m_axi_FM_DDR_BUFF2_BREADY;
input  [1:0] m_axi_FM_DDR_BUFF2_BRESP;
input  [0:0] m_axi_FM_DDR_BUFF2_BID;
input  [0:0] m_axi_FM_DDR_BUFF2_BUSER;
output   m_axi_WEIGHT_AWVALID;
input   m_axi_WEIGHT_AWREADY;
output  [31:0] m_axi_WEIGHT_AWADDR;
output  [0:0] m_axi_WEIGHT_AWID;
output  [31:0] m_axi_WEIGHT_AWLEN;
output  [2:0] m_axi_WEIGHT_AWSIZE;
output  [1:0] m_axi_WEIGHT_AWBURST;
output  [1:0] m_axi_WEIGHT_AWLOCK;
output  [3:0] m_axi_WEIGHT_AWCACHE;
output  [2:0] m_axi_WEIGHT_AWPROT;
output  [3:0] m_axi_WEIGHT_AWQOS;
output  [3:0] m_axi_WEIGHT_AWREGION;
output  [0:0] m_axi_WEIGHT_AWUSER;
output   m_axi_WEIGHT_WVALID;
input   m_axi_WEIGHT_WREADY;
output  [31:0] m_axi_WEIGHT_WDATA;
output  [3:0] m_axi_WEIGHT_WSTRB;
output   m_axi_WEIGHT_WLAST;
output  [0:0] m_axi_WEIGHT_WID;
output  [0:0] m_axi_WEIGHT_WUSER;
output   m_axi_WEIGHT_ARVALID;
input   m_axi_WEIGHT_ARREADY;
output  [31:0] m_axi_WEIGHT_ARADDR;
output  [0:0] m_axi_WEIGHT_ARID;
output  [31:0] m_axi_WEIGHT_ARLEN;
output  [2:0] m_axi_WEIGHT_ARSIZE;
output  [1:0] m_axi_WEIGHT_ARBURST;
output  [1:0] m_axi_WEIGHT_ARLOCK;
output  [3:0] m_axi_WEIGHT_ARCACHE;
output  [2:0] m_axi_WEIGHT_ARPROT;
output  [3:0] m_axi_WEIGHT_ARQOS;
output  [3:0] m_axi_WEIGHT_ARREGION;
output  [0:0] m_axi_WEIGHT_ARUSER;
input   m_axi_WEIGHT_RVALID;
output   m_axi_WEIGHT_RREADY;
input  [31:0] m_axi_WEIGHT_RDATA;
input   m_axi_WEIGHT_RLAST;
input  [0:0] m_axi_WEIGHT_RID;
input  [0:0] m_axi_WEIGHT_RUSER;
input  [1:0] m_axi_WEIGHT_RRESP;
input   m_axi_WEIGHT_BVALID;
output   m_axi_WEIGHT_BREADY;
input  [1:0] m_axi_WEIGHT_BRESP;
input  [0:0] m_axi_WEIGHT_BID;
input  [0:0] m_axi_WEIGHT_BUSER;
output   m_axi_BIAS_AWVALID;
input   m_axi_BIAS_AWREADY;
output  [31:0] m_axi_BIAS_AWADDR;
output  [0:0] m_axi_BIAS_AWID;
output  [31:0] m_axi_BIAS_AWLEN;
output  [2:0] m_axi_BIAS_AWSIZE;
output  [1:0] m_axi_BIAS_AWBURST;
output  [1:0] m_axi_BIAS_AWLOCK;
output  [3:0] m_axi_BIAS_AWCACHE;
output  [2:0] m_axi_BIAS_AWPROT;
output  [3:0] m_axi_BIAS_AWQOS;
output  [3:0] m_axi_BIAS_AWREGION;
output  [0:0] m_axi_BIAS_AWUSER;
output   m_axi_BIAS_WVALID;
input   m_axi_BIAS_WREADY;
output  [31:0] m_axi_BIAS_WDATA;
output  [3:0] m_axi_BIAS_WSTRB;
output   m_axi_BIAS_WLAST;
output  [0:0] m_axi_BIAS_WID;
output  [0:0] m_axi_BIAS_WUSER;
output   m_axi_BIAS_ARVALID;
input   m_axi_BIAS_ARREADY;
output  [31:0] m_axi_BIAS_ARADDR;
output  [0:0] m_axi_BIAS_ARID;
output  [31:0] m_axi_BIAS_ARLEN;
output  [2:0] m_axi_BIAS_ARSIZE;
output  [1:0] m_axi_BIAS_ARBURST;
output  [1:0] m_axi_BIAS_ARLOCK;
output  [3:0] m_axi_BIAS_ARCACHE;
output  [2:0] m_axi_BIAS_ARPROT;
output  [3:0] m_axi_BIAS_ARQOS;
output  [3:0] m_axi_BIAS_ARREGION;
output  [0:0] m_axi_BIAS_ARUSER;
input   m_axi_BIAS_RVALID;
output   m_axi_BIAS_RREADY;
input  [31:0] m_axi_BIAS_RDATA;
input   m_axi_BIAS_RLAST;
input  [0:0] m_axi_BIAS_RID;
input  [0:0] m_axi_BIAS_RUSER;
input  [1:0] m_axi_BIAS_RRESP;
input   m_axi_BIAS_BVALID;
output   m_axi_BIAS_BREADY;
input  [1:0] m_axi_BIAS_BRESP;
input  [0:0] m_axi_BIAS_BID;
input  [0:0] m_axi_BIAS_BUSER;
output  [10:0] conv_out1_address0;
output   conv_out1_ce0;
output   conv_out1_we0;
output  [31:0] conv_out1_d0;
input  [31:0] conv_out1_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_FM_DDR_BUFF1_ARVALID;
reg m_axi_FM_DDR_BUFF1_RREADY;
reg m_axi_FM_DDR_BUFF2_AWVALID;
reg m_axi_FM_DDR_BUFF2_WVALID;
reg m_axi_FM_DDR_BUFF2_BREADY;
reg m_axi_WEIGHT_ARVALID;
reg m_axi_WEIGHT_RREADY;
reg m_axi_BIAS_ARVALID;
reg m_axi_BIAS_RREADY;
reg[10:0] conv_out1_address0;
reg conv_out1_ce0;
reg conv_out1_we0;

(* fsm_encoding = "none" *) reg   [85:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] B_CONV1_address0;
reg    B_CONV1_ce0;
reg    B_CONV1_we0;
wire   [31:0] B_CONV1_q0;
reg   [9:0] pic_in_address0;
reg    pic_in_ce0;
reg    pic_in_we0;
wire   [31:0] pic_in_q0;
reg   [7:0] W_CONV1_address0;
reg    W_CONV1_ce0;
reg    W_CONV1_we0;
wire   [31:0] W_CONV1_q0;
reg   [12:0] conv1_buff_address0;
reg    conv1_buff_ce0;
reg    conv1_buff_we0;
reg   [31:0] conv1_buff_d0;
wire   [31:0] conv1_buff_q0;
reg   [12:0] conv1_buff_address1;
reg    conv1_buff_ce1;
wire   [31:0] conv1_buff_q1;
reg    FM_DDR_BUFF1_blk_n_AR;
wire    ap_CS_fsm_state11;
reg    FM_DDR_BUFF1_blk_n_R;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond14_reg_1595;
reg    FM_DDR_BUFF2_blk_n_AW;
wire    ap_CS_fsm_state69;
wire   [0:0] tmp_38_fu_1256_p2;
reg    FM_DDR_BUFF2_blk_n_W;
reg    ap_enable_reg_pp3_iter2;
wire    ap_block_pp3_stage0;
reg   [0:0] exitcond16_reg_1923;
reg   [0:0] exitcond16_reg_1923_pp3_iter1_reg;
reg    FM_DDR_BUFF2_blk_n_B;
wire    ap_CS_fsm_state101;
reg    WEIGHT_blk_n_AR;
wire    ap_CS_fsm_state21;
reg    WEIGHT_blk_n_R;
reg    ap_enable_reg_pp2_iter8;
wire    ap_block_pp2_stage0;
reg   [0:0] exitcond15_reg_1609;
reg   [0:0] exitcond15_reg_1609_pp2_iter7_reg;
reg    BIAS_blk_n_AR;
reg    BIAS_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond9_reg_1581;
reg   [2:0] indvar_reg_409;
reg   [2:0] indvar_reg_409_pp0_iter1_reg;
wire    ap_block_state8_pp0_stage0_iter0;
reg    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_state10_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [10:0] indvar8_reg_421;
reg   [10:0] indvar8_reg_421_pp1_iter1_reg;
wire    ap_block_state18_pp1_stage0_iter0;
reg    ap_block_state19_pp1_stage0_iter1;
wire    ap_block_state20_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg   [7:0] indvar2_reg_433;
reg   [15:0] phi_mul_reg_444;
reg   [7:0] phi_urem_reg_455;
reg   [10:0] indvar4_reg_591;
wire   [31:0] grp_fu_606_p2;
reg   [31:0] reg_616;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state92;
reg   [31:0] reg_622;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state83;
wire   [31:0] grp_fu_602_p2;
reg   [31:0] reg_629;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state88;
wire   [0:0] exitcond9_fu_637_p2;
reg   [0:0] exitcond9_reg_1581_pp0_iter1_reg;
wire   [2:0] indvar_next_fu_643_p2;
reg   [2:0] indvar_next_reg_1585;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] BIAS_read_reg_1590;
wire   [0:0] exitcond14_fu_654_p2;
reg   [0:0] exitcond14_reg_1595_pp1_iter1_reg;
wire   [10:0] indvar_next4_fu_660_p2;
reg   [10:0] indvar_next4_reg_1599;
reg    ap_enable_reg_pp1_iter0;
reg   [31:0] FM_DDR_BUFF1_read_reg_1604;
wire   [0:0] exitcond15_fu_671_p2;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state28_pp2_stage0_iter0;
wire    ap_block_state29_pp2_stage0_iter1;
wire    ap_block_state30_pp2_stage0_iter2;
wire    ap_block_state31_pp2_stage0_iter3;
wire    ap_block_state32_pp2_stage0_iter4;
wire    ap_block_state33_pp2_stage0_iter5;
wire    ap_block_state34_pp2_stage0_iter6;
wire    ap_block_state35_pp2_stage0_iter7;
reg    ap_block_state36_pp2_stage0_iter8;
wire    ap_block_state37_pp2_stage0_iter9;
reg    ap_block_pp2_stage0_11001;
reg   [0:0] exitcond15_reg_1609_pp2_iter1_reg;
reg   [0:0] exitcond15_reg_1609_pp2_iter2_reg;
reg   [0:0] exitcond15_reg_1609_pp2_iter3_reg;
reg   [0:0] exitcond15_reg_1609_pp2_iter4_reg;
reg   [0:0] exitcond15_reg_1609_pp2_iter5_reg;
reg   [0:0] exitcond15_reg_1609_pp2_iter6_reg;
reg   [0:0] exitcond15_reg_1609_pp2_iter8_reg;
wire   [7:0] indvar_next5_fu_677_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [7:0] idx_urem_fu_695_p3;
wire   [15:0] next_mul_fu_703_p2;
reg   [2:0] tmp_70_reg_1628;
reg   [2:0] tmp_70_reg_1628_pp2_iter1_reg;
reg   [2:0] tmp_70_reg_1628_pp2_iter2_reg;
reg   [2:0] tmp_70_reg_1628_pp2_iter3_reg;
reg   [2:0] tmp_70_reg_1628_pp2_iter4_reg;
reg   [2:0] tmp_70_reg_1628_pp2_iter5_reg;
reg   [2:0] tmp_70_reg_1628_pp2_iter6_reg;
reg   [2:0] tmp_70_reg_1628_pp2_iter7_reg;
wire   [4:0] tmp_57_fu_735_p3;
reg   [3:0] tmp_79_reg_1639;
reg   [3:0] tmp_79_reg_1639_pp2_iter1_reg;
reg   [3:0] tmp_79_reg_1639_pp2_iter2_reg;
reg   [3:0] tmp_79_reg_1639_pp2_iter3_reg;
reg   [3:0] tmp_79_reg_1639_pp2_iter4_reg;
reg   [3:0] tmp_79_reg_1639_pp2_iter5_reg;
reg   [3:0] tmp_79_reg_1639_pp2_iter6_reg;
reg   [3:0] tmp_79_reg_1639_pp2_iter7_reg;
reg   [31:0] WEIGHT_read_reg_1644;
wire   [8:0] tmp_84_fu_828_p2;
reg   [8:0] tmp_84_reg_1649;
wire   [4:0] kr_cast_fu_838_p1;
reg   [4:0] kr_cast_reg_1654;
wire    ap_CS_fsm_state39;
wire   [2:0] kr_2_fu_848_p2;
reg   [2:0] kr_2_reg_1662;
wire   [5:0] tmp_cast_fu_854_p1;
reg   [5:0] tmp_cast_reg_1667;
wire   [0:0] exitcond8_fu_842_p2;
wire   [4:0] kc_cast_fu_858_p1;
reg   [4:0] kc_cast_reg_1672;
wire    ap_CS_fsm_state40;
wire   [2:0] kc_2_fu_868_p2;
reg   [2:0] kc_2_reg_1680;
wire   [8:0] tmp_41_cast_fu_874_p1;
reg   [8:0] tmp_41_cast_reg_1685;
wire   [0:0] exitcond7_fu_862_p2;
wire   [4:0] r_6_fu_884_p2;
reg   [4:0] r_6_reg_1693;
wire    ap_CS_fsm_state41;
wire   [4:0] tmp_50_fu_890_p2;
reg   [4:0] tmp_50_reg_1698;
wire   [0:0] exitcond6_fu_878_p2;
wire   [9:0] tmp_52_cast_fu_895_p1;
reg   [9:0] tmp_52_cast_reg_1703;
wire   [4:0] c_6_fu_905_p2;
reg   [4:0] c_6_reg_1711;
wire    ap_CS_fsm_state42;
wire   [0:0] exitcond5_fu_899_p2;
wire   [13:0] tmp_64_cast_fu_928_p1;
reg   [13:0] tmp_64_cast_reg_1721;
wire    ap_CS_fsm_state43;
reg   [31:0] pic_in_load_reg_1726;
wire   [2:0] chl_out_3_fu_938_p2;
reg   [2:0] chl_out_3_reg_1734;
wire    ap_CS_fsm_state44;
wire   [5:0] tmp_124_fu_976_p2;
reg   [5:0] tmp_124_reg_1739;
wire   [0:0] exitcond4_fu_932_p2;
reg   [12:0] conv1_buff_addr_5_reg_1745;
wire    ap_CS_fsm_state45;
reg   [31:0] W_CONV1_load_reg_1755;
wire    ap_CS_fsm_state46;
wire   [4:0] r_4_fu_1084_p2;
reg   [4:0] r_4_reg_1763;
wire    ap_CS_fsm_state57;
wire   [9:0] tmp_39_cast_fu_1090_p1;
reg   [9:0] tmp_39_cast_reg_1768;
wire   [0:0] exitcond3_fu_1078_p2;
wire   [4:0] c_4_fu_1100_p2;
reg   [4:0] c_4_reg_1776;
wire    ap_CS_fsm_state58;
wire   [13:0] tmp_46_cast_fu_1106_p1;
reg   [13:0] tmp_46_cast_reg_1781;
wire   [0:0] exitcond2_fu_1094_p2;
wire   [2:0] chl_out_fu_1116_p2;
reg   [2:0] chl_out_reg_1789;
wire    ap_CS_fsm_state59;
reg   [12:0] conv1_buff_addr_reg_1794;
wire   [0:0] exitcond1_fu_1110_p2;
wire    ap_CS_fsm_state60;
reg   [31:0] B_CONV1_load_reg_1804;
wire   [31:0] tmp_58_fu_1248_p3;
reg   [31:0] tmp_58_reg_1809;
wire    ap_CS_fsm_state67;
reg    ap_sig_ioackin_m_axi_FM_DDR_BUFF2_AWREADY;
reg    ap_block_state69_io;
wire   [9:0] tmp_40_cast_fu_1262_p1;
reg   [9:0] tmp_40_cast_reg_1818;
wire   [9:0] tmp_43_cast_fu_1272_p1;
reg   [9:0] tmp_43_cast_reg_1823;
wire   [8:0] tmp_44_cast_fu_1286_p1;
reg   [8:0] tmp_44_cast_reg_1828;
wire   [13:0] tmp_47_cast_fu_1296_p1;
reg   [13:0] tmp_47_cast_reg_1836;
wire    ap_CS_fsm_state70;
wire   [0:0] tmp_45_fu_1290_p2;
wire   [13:0] tmp_49_cast_fu_1306_p1;
reg   [13:0] tmp_49_cast_reg_1842;
wire   [11:0] tmp_53_cast_fu_1320_p1;
reg   [11:0] tmp_53_cast_reg_1848;
wire   [4:0] r_5_fu_1324_p2;
wire   [2:0] chl_out_2_fu_1336_p2;
reg   [2:0] chl_out_2_reg_1861;
wire    ap_CS_fsm_state71;
wire   [13:0] tmp_104_fu_1405_p2;
reg   [13:0] tmp_104_reg_1866;
wire   [0:0] exitcond_fu_1330_p2;
wire   [13:0] tmp_110_fu_1440_p2;
reg   [13:0] tmp_110_reg_1872;
wire   [11:0] tmp_120_fu_1515_p2;
reg   [11:0] tmp_120_reg_1878;
wire   [4:0] c_5_fu_1520_p2;
wire    ap_CS_fsm_state72;
wire   [13:0] tmp_111_fu_1544_p2;
reg   [13:0] tmp_111_reg_1898;
wire   [13:0] tmp_112_fu_1548_p2;
reg   [13:0] tmp_112_reg_1903;
reg   [31:0] conv1_buff_load_2_reg_1908;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state82;
wire   [0:0] exitcond16_fu_1564_p2;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state94_pp3_stage0_iter0;
wire    ap_block_state95_pp3_stage0_iter1;
wire    ap_block_state96_pp3_stage0_iter2;
reg    ap_sig_ioackin_m_axi_FM_DDR_BUFF2_WREADY;
reg    ap_block_state96_io;
reg    ap_block_pp3_stage0_11001;
wire   [10:0] indvar_next6_fu_1570_p2;
reg    ap_enable_reg_pp3_iter0;
reg   [31:0] conv_out1_load_reg_1937;
reg    ap_enable_reg_pp3_iter1;
wire    ap_CS_fsm_state7;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state8;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state17;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state18;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state27;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state28;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter9;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state94;
reg   [2:0] ap_phi_mux_indvar_phi_fu_413_p4;
reg   [10:0] ap_phi_mux_indvar8_phi_fu_425_p4;
reg   [2:0] kr_reg_466;
wire    ap_CS_fsm_state38;
reg   [2:0] kc_reg_477;
reg   [4:0] r_reg_488;
reg   [4:0] c_reg_499;
reg   [2:0] chl_out2_reg_511;
wire    ap_CS_fsm_state56;
reg   [4:0] r1_reg_522;
reg   [4:0] c2_reg_533;
reg   [2:0] chl_out3_reg_544;
wire    ap_CS_fsm_state68;
reg   [4:0] r4_reg_556;
reg   [4:0] c5_reg_568;
reg   [2:0] chl_out6_reg_580;
wire    ap_CS_fsm_state93;
wire   [63:0] indvar9_fu_649_p1;
wire   [63:0] indvar1_fu_666_p1;
wire   [63:0] tmp_103_cast_fu_834_p1;
wire   [63:0] tmp_97_fu_923_p1;
wire   [63:0] tmp_152_cast_fu_1043_p1;
wire   [63:0] tmp_144_cast_fu_1073_p1;
wire   [63:0] tmp_112_cast_fu_1196_p1;
wire   [63:0] tmp_54_fu_1201_p1;
wire   [63:0] tmp_122_cast_fu_1530_p1;
wire   [63:0] tmp_123_cast_fu_1539_p1;
wire   [63:0] tmp_128_cast_fu_1552_p1;
wire   [63:0] tmp_129_cast_fu_1556_p1;
wire   [63:0] tmp_137_cast_fu_1560_p1;
wire   [63:0] indvar5_fu_1576_p1;
reg    ap_reg_ioackin_m_axi_BIAS_ARREADY;
reg    ap_sig_ioackin_m_axi_BIAS_ARREADY;
reg    ap_reg_ioackin_m_axi_FM_DDR_BUFF1_ARREADY;
reg    ap_sig_ioackin_m_axi_FM_DDR_BUFF1_ARREADY;
reg    ap_reg_ioackin_m_axi_WEIGHT_ARREADY;
reg    ap_sig_ioackin_m_axi_WEIGHT_ARREADY;
reg    ap_reg_ioackin_m_axi_FM_DDR_BUFF2_AWREADY;
reg    ap_reg_ioackin_m_axi_FM_DDR_BUFF2_WREADY;
wire    ap_block_pp3_stage0_01001;
wire    ap_CS_fsm_state49;
reg   [31:0] grp_fu_602_p0;
reg   [31:0] grp_fu_602_p1;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state84;
reg   [31:0] grp_fu_606_p0;
reg   [31:0] grp_fu_606_p1;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state89;
wire   [7:0] next_urem_fu_683_p2;
wire   [0:0] tmp_fu_689_p2;
wire   [4:0] tmp_72_fu_719_p1;
wire   [0:0] tmp_74_fu_723_p2;
wire   [4:0] tmp_78_fu_729_p2;
wire   [4:0] mul_fu_747_p1;
wire   [11:0] mul_fu_747_p2;
wire   [3:0] grp_fu_763_p1;
wire   [4:0] tmp_71_fu_772_p3;
wire   [10:0] tmp_51_cast_fu_769_p1;
wire   [10:0] p_shl1_cast_fu_779_p1;
wire  signed [4:0] div7_fu_789_p1;
wire   [10:0] tmp_s_fu_783_p2;
wire   [10:0] tmp_59_cast_fu_792_p1;
wire   [10:0] tmp_80_fu_796_p2;
wire   [6:0] tmp_82_fu_806_p1;
wire   [8:0] tmp_81_fu_802_p1;
wire   [8:0] p_shl_cast_fu_810_p3;
wire   [4:0] grp_fu_763_p2;
wire   [8:0] tmp_83_fu_818_p2;
wire   [8:0] tmp_70_cast_fu_824_p1;
wire   [4:0] tmp_62_fu_911_p2;
wire   [9:0] tmp_96_fu_916_p3;
wire   [4:0] tmp_121_fu_948_p3;
wire   [5:0] tmp_67_cast_fu_944_p1;
wire   [5:0] p_shl10_cast1_fu_956_p1;
wire   [5:0] tmp_122_fu_964_p2;
wire   [5:0] tmp_123_fu_970_p2;
wire   [7:0] tmp_128_fu_981_p3;
wire   [8:0] p_shl7_cast_fu_989_p1;
wire   [8:0] p_shl10_cast_fu_960_p1;
wire   [8:0] tmp_129_fu_993_p2;
wire  signed [9:0] tmp_147_cast_fu_999_p1;
wire   [9:0] tmp_130_fu_1003_p2;
wire   [8:0] tmp_131_fu_1008_p1;
wire   [11:0] tmp_132_fu_1020_p3;
wire   [13:0] p_shl5_cast_fu_1012_p3;
wire  signed [13:0] p_shl6_cast_fu_1028_p1;
wire   [13:0] tmp_133_fu_1032_p2;
wire   [13:0] tmp_134_fu_1038_p2;
wire   [7:0] tmp_125_fu_1051_p3;
wire   [8:0] tmp_141_cast_fu_1048_p1;
wire   [8:0] p_shl9_cast_fu_1058_p1;
wire   [8:0] tmp_126_fu_1062_p2;
wire   [8:0] tmp_127_fu_1068_p2;
wire   [7:0] tmp_87_fu_1122_p3;
wire   [4:0] tmp_88_fu_1134_p3;
wire   [8:0] p_shl13_cast_fu_1130_p1;
wire   [8:0] p_shl14_cast_fu_1142_p1;
wire   [8:0] tmp_89_fu_1146_p2;
wire  signed [9:0] tmp_107_cast_fu_1152_p1;
wire   [9:0] tmp_90_fu_1156_p2;
wire   [8:0] tmp_91_fu_1161_p1;
wire   [11:0] tmp_92_fu_1173_p3;
wire   [13:0] p_shl11_cast_fu_1165_p3;
wire  signed [13:0] p_shl12_cast_fu_1181_p1;
wire   [13:0] tmp_93_fu_1185_p2;
wire   [13:0] tmp_94_fu_1191_p2;
wire   [31:0] tmp_55_to_int_fu_1206_p1;
wire   [7:0] tmp_73_fu_1210_p4;
wire   [22:0] tmp_95_fu_1220_p1;
wire   [0:0] notrhs_fu_1230_p2;
wire   [0:0] notlhs_fu_1224_p2;
wire   [0:0] tmp_75_fu_1236_p2;
wire   [0:0] tmp_76_fu_611_p2;
wire   [0:0] tmp_77_fu_1242_p2;
wire   [4:0] tmp_42_fu_1266_p2;
wire   [3:0] tmp_85_fu_1276_p4;
wire   [4:0] tmp_48_fu_1300_p2;
wire   [3:0] tmp_86_fu_1310_p4;
wire   [7:0] tmp_98_fu_1342_p3;
wire   [4:0] tmp_99_fu_1354_p3;
wire   [8:0] p_shl23_cast_fu_1350_p1;
wire   [8:0] p_shl24_cast_fu_1362_p1;
wire   [8:0] tmp_100_fu_1366_p2;
wire  signed [9:0] tmp_117_cast_fu_1372_p1;
wire   [9:0] tmp_101_fu_1376_p2;
wire   [8:0] tmp_102_fu_1381_p1;
wire   [11:0] tmp_103_fu_1393_p3;
wire   [13:0] p_shl21_cast_fu_1385_p3;
wire  signed [13:0] p_shl22_cast_fu_1401_p1;
wire   [9:0] tmp_107_fu_1411_p2;
wire   [8:0] tmp_108_fu_1416_p1;
wire   [11:0] tmp_109_fu_1428_p3;
wire   [13:0] p_shl19_cast_fu_1420_p3;
wire  signed [13:0] p_shl20_cast_fu_1436_p1;
wire   [6:0] tmp_113_fu_1446_p3;
wire   [3:0] tmp_114_fu_1458_p3;
wire   [7:0] p_shl17_cast_fu_1454_p1;
wire   [7:0] p_shl18_cast_fu_1466_p1;
wire   [7:0] tmp_115_fu_1470_p2;
wire  signed [8:0] tmp_132_cast_fu_1476_p1;
wire   [8:0] tmp_116_fu_1480_p2;
wire   [7:0] tmp_117_fu_1485_p1;
wire   [9:0] tmp_118_fu_1497_p3;
wire   [11:0] p_shl15_cast_fu_1489_p3;
wire  signed [11:0] p_shl16_cast_fu_1505_p1;
wire   [11:0] tmp_119_fu_1509_p2;
wire   [13:0] tmp_105_fu_1526_p2;
wire   [13:0] tmp_106_fu_1535_p2;
reg    grp_fu_763_ce;
reg   [85:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire   [11:0] mul_fu_747_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 86'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_reg_ioackin_m_axi_BIAS_ARREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_FM_DDR_BUFF1_ARREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_WEIGHT_ARREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_FM_DDR_BUFF2_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_FM_DDR_BUFF2_WREADY = 1'b0;
end

conv1_B_CONV1 #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
B_CONV1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_CONV1_address0),
    .ce0(B_CONV1_ce0),
    .we0(B_CONV1_we0),
    .d0(BIAS_read_reg_1590),
    .q0(B_CONV1_q0)
);

conv1_pic_in #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
pic_in_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pic_in_address0),
    .ce0(pic_in_ce0),
    .we0(pic_in_we0),
    .d0(FM_DDR_BUFF1_read_reg_1604),
    .q0(pic_in_q0)
);

conv1_W_CONV1 #(
    .DataWidth( 32 ),
    .AddressRange( 150 ),
    .AddressWidth( 8 ))
W_CONV1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(W_CONV1_address0),
    .ce0(W_CONV1_ce0),
    .we0(W_CONV1_we0),
    .d0(WEIGHT_read_reg_1644),
    .q0(W_CONV1_q0)
);

conv1_conv1_buff #(
    .DataWidth( 32 ),
    .AddressRange( 4704 ),
    .AddressWidth( 13 ))
conv1_buff_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv1_buff_address0),
    .ce0(conv1_buff_ce0),
    .we0(conv1_buff_we0),
    .d0(conv1_buff_d0),
    .q0(conv1_buff_q0),
    .address1(conv1_buff_address1),
    .ce1(conv1_buff_ce1),
    .q1(conv1_buff_q1)
);

conv_top_fadd_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_top_fadd_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_602_p0),
    .din1(grp_fu_602_p1),
    .ce(1'b1),
    .dout(grp_fu_602_p2)
);

conv_top_fmul_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_top_fmul_32ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_606_p0),
    .din1(grp_fu_606_p1),
    .ce(1'b1),
    .dout(grp_fu_606_p2)
);

conv_top_fcmp_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_top_fcmp_32ndEe_U3(
    .din0(reg_629),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_76_fu_611_p2)
);

conv_top_urem_5nseOg #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 5 ))
conv_top_urem_5nseOg_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_57_fu_735_p3),
    .din1(grp_fu_763_p1),
    .ce(grp_fu_763_ce),
    .dout(grp_fu_763_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state8)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state18) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state18)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state18);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state28) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state28)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state28);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            ap_enable_reg_pp2_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state94) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state69_io) & (1'b1 == ap_CS_fsm_state69) & (tmp_38_fu_1256_p2 == 1'd0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state94)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state94);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if (((1'b0 == ap_block_state69_io) & (1'b1 == ap_CS_fsm_state69) & (tmp_38_fu_1256_p2 == 1'd0))) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_BIAS_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if (~((ap_start == 1'b0) | (ap_sig_ioackin_m_axi_BIAS_ARREADY == 1'b0))) begin
                ap_reg_ioackin_m_axi_BIAS_ARREADY <= 1'b0;
            end else if (((ap_start == 1'b1) & (m_axi_BIAS_ARREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_BIAS_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_FM_DDR_BUFF1_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            if ((ap_sig_ioackin_m_axi_FM_DDR_BUFF1_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_FM_DDR_BUFF1_ARREADY <= 1'b0;
            end else if ((m_axi_FM_DDR_BUFF1_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_FM_DDR_BUFF1_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_FM_DDR_BUFF2_AWREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state69) & (tmp_38_fu_1256_p2 == 1'd0))) begin
            if ((1'b0 == ap_block_state69_io)) begin
                ap_reg_ioackin_m_axi_FM_DDR_BUFF2_AWREADY <= 1'b0;
            end else if ((m_axi_FM_DDR_BUFF2_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_FM_DDR_BUFF2_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_FM_DDR_BUFF2_WREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp3_iter2 == 1'b1) & (exitcond16_reg_1923_pp3_iter1_reg == 1'd0))) begin
            if ((1'b0 == ap_block_pp3_stage0_11001)) begin
                ap_reg_ioackin_m_axi_FM_DDR_BUFF2_WREADY <= 1'b0;
            end else if (((m_axi_FM_DDR_BUFF2_WREADY == 1'b1) & (1'b0 == ap_block_pp3_stage0_01001))) begin
                ap_reg_ioackin_m_axi_FM_DDR_BUFF2_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_WEIGHT_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state21)) begin
            if ((ap_sig_ioackin_m_axi_WEIGHT_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_WEIGHT_ARREADY <= 1'b0;
            end else if ((m_axi_WEIGHT_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_WEIGHT_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1110_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59))) begin
        c2_reg_533 <= c_4_reg_1776;
    end else if (((1'b1 == ap_CS_fsm_state57) & (exitcond3_fu_1078_p2 == 1'd0))) begin
        c2_reg_533 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state69_io) & (tmp_38_fu_1256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state69))) begin
        c5_reg_568 <= 5'd0;
    end else if (((exitcond_fu_1330_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
        c5_reg_568 <= c_5_fu_1520_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_932_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
        c_reg_499 <= c_6_reg_1711;
    end else if (((1'b1 == ap_CS_fsm_state41) & (exitcond6_fu_878_p2 == 1'd0))) begin
        c_reg_499 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        chl_out2_reg_511 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        chl_out2_reg_511 <= chl_out_3_reg_1734;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state58) & (exitcond2_fu_1094_p2 == 1'd0))) begin
        chl_out3_reg_544 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        chl_out3_reg_544 <= chl_out_reg_1789;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_45_fu_1290_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state70))) begin
        chl_out6_reg_580 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        chl_out6_reg_580 <= chl_out_2_reg_1861;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        indvar2_reg_433 <= 8'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond15_fu_671_p2 == 1'd0))) begin
        indvar2_reg_433 <= indvar_next5_fu_677_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state69_io) & (1'b1 == ap_CS_fsm_state69) & (tmp_38_fu_1256_p2 == 1'd0))) begin
        indvar4_reg_591 <= 11'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond16_fu_1564_p2 == 1'd0))) begin
        indvar4_reg_591 <= indvar_next6_fu_1570_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        indvar8_reg_421 <= 11'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond14_reg_1595 == 1'd0))) begin
        indvar8_reg_421 <= indvar_next4_reg_1599;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond9_reg_1581 == 1'd0))) begin
        indvar_reg_409 <= indvar_next_reg_1585;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_reg_409 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_878_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
        kc_reg_477 <= kc_2_reg_1680;
    end else if (((1'b1 == ap_CS_fsm_state39) & (exitcond8_fu_842_p2 == 1'd0))) begin
        kc_reg_477 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        kr_reg_466 <= 3'd0;
    end else if (((exitcond7_fu_862_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40))) begin
        kr_reg_466 <= kr_2_reg_1662;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        phi_mul_reg_444 <= 16'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond15_fu_671_p2 == 1'd0))) begin
        phi_mul_reg_444 <= next_mul_fu_703_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        phi_urem_reg_455 <= 8'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond15_fu_671_p2 == 1'd0))) begin
        phi_urem_reg_455 <= idx_urem_fu_695_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_842_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
        r1_reg_522 <= 5'd0;
    end else if (((exitcond2_fu_1094_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
        r1_reg_522 <= r_4_reg_1763;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_1078_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state57))) begin
        r4_reg_556 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state70) & (tmp_45_fu_1290_p2 == 1'd0))) begin
        r4_reg_556 <= r_5_fu_1324_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_899_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
        r_reg_488 <= r_6_reg_1693;
    end else if (((1'b1 == ap_CS_fsm_state40) & (exitcond7_fu_862_p2 == 1'd0))) begin
        r_reg_488 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state78))) begin
        reg_622 <= conv1_buff_q1;
    end else if (((1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state50))) begin
        reg_622 <= conv1_buff_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond9_reg_1581 == 1'd0))) begin
        BIAS_read_reg_1590 <= m_axi_BIAS_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        B_CONV1_load_reg_1804 <= B_CONV1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond14_reg_1595 == 1'd0))) begin
        FM_DDR_BUFF1_read_reg_1604 <= m_axi_FM_DDR_BUFF1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond15_reg_1609_pp2_iter7_reg == 1'd0))) begin
        WEIGHT_read_reg_1644 <= m_axi_WEIGHT_RDATA;
        tmp_84_reg_1649 <= tmp_84_fu_828_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        W_CONV1_load_reg_1755 <= W_CONV1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        c_4_reg_1776 <= c_4_fu_1100_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        c_6_reg_1711 <= c_6_fu_905_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        chl_out_2_reg_1861 <= chl_out_2_fu_1336_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        chl_out_3_reg_1734 <= chl_out_3_fu_938_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        chl_out_reg_1789 <= chl_out_fu_1116_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & (exitcond4_fu_932_p2 == 1'd0))) begin
        conv1_buff_addr_5_reg_1745 <= tmp_152_cast_fu_1043_p1;
        tmp_124_reg_1739 <= tmp_124_fu_976_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state59) & (exitcond1_fu_1110_p2 == 1'd0))) begin
        conv1_buff_addr_reg_1794 <= tmp_112_cast_fu_1196_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        conv1_buff_load_2_reg_1908 <= conv1_buff_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond16_reg_1923 == 1'd0))) begin
        conv_out1_load_reg_1937 <= conv_out1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond14_reg_1595 <= exitcond14_fu_654_p2;
        exitcond14_reg_1595_pp1_iter1_reg <= exitcond14_reg_1595;
        indvar8_reg_421_pp1_iter1_reg <= indvar8_reg_421;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        exitcond15_reg_1609 <= exitcond15_fu_671_p2;
        exitcond15_reg_1609_pp2_iter1_reg <= exitcond15_reg_1609;
        tmp_70_reg_1628_pp2_iter1_reg <= tmp_70_reg_1628;
        tmp_79_reg_1639_pp2_iter1_reg <= tmp_79_reg_1639;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        exitcond15_reg_1609_pp2_iter2_reg <= exitcond15_reg_1609_pp2_iter1_reg;
        exitcond15_reg_1609_pp2_iter3_reg <= exitcond15_reg_1609_pp2_iter2_reg;
        exitcond15_reg_1609_pp2_iter4_reg <= exitcond15_reg_1609_pp2_iter3_reg;
        exitcond15_reg_1609_pp2_iter5_reg <= exitcond15_reg_1609_pp2_iter4_reg;
        exitcond15_reg_1609_pp2_iter6_reg <= exitcond15_reg_1609_pp2_iter5_reg;
        exitcond15_reg_1609_pp2_iter7_reg <= exitcond15_reg_1609_pp2_iter6_reg;
        exitcond15_reg_1609_pp2_iter8_reg <= exitcond15_reg_1609_pp2_iter7_reg;
        tmp_70_reg_1628_pp2_iter2_reg <= tmp_70_reg_1628_pp2_iter1_reg;
        tmp_70_reg_1628_pp2_iter3_reg <= tmp_70_reg_1628_pp2_iter2_reg;
        tmp_70_reg_1628_pp2_iter4_reg <= tmp_70_reg_1628_pp2_iter3_reg;
        tmp_70_reg_1628_pp2_iter5_reg <= tmp_70_reg_1628_pp2_iter4_reg;
        tmp_70_reg_1628_pp2_iter6_reg <= tmp_70_reg_1628_pp2_iter5_reg;
        tmp_70_reg_1628_pp2_iter7_reg <= tmp_70_reg_1628_pp2_iter6_reg;
        tmp_79_reg_1639_pp2_iter2_reg <= tmp_79_reg_1639_pp2_iter1_reg;
        tmp_79_reg_1639_pp2_iter3_reg <= tmp_79_reg_1639_pp2_iter2_reg;
        tmp_79_reg_1639_pp2_iter4_reg <= tmp_79_reg_1639_pp2_iter3_reg;
        tmp_79_reg_1639_pp2_iter5_reg <= tmp_79_reg_1639_pp2_iter4_reg;
        tmp_79_reg_1639_pp2_iter6_reg <= tmp_79_reg_1639_pp2_iter5_reg;
        tmp_79_reg_1639_pp2_iter7_reg <= tmp_79_reg_1639_pp2_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        exitcond16_reg_1923 <= exitcond16_fu_1564_p2;
        exitcond16_reg_1923_pp3_iter1_reg <= exitcond16_reg_1923;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond9_reg_1581 <= exitcond9_fu_637_p2;
        exitcond9_reg_1581_pp0_iter1_reg <= exitcond9_reg_1581;
        indvar_reg_409_pp0_iter1_reg <= indvar_reg_409;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_next4_reg_1599 <= indvar_next4_fu_660_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_next_reg_1585 <= indvar_next_fu_643_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        kc_2_reg_1680 <= kc_2_fu_868_p2;
        kc_cast_reg_1672[2 : 0] <= kc_cast_fu_858_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        kr_2_reg_1662 <= kr_2_fu_848_p2;
        kr_cast_reg_1654[2 : 0] <= kr_cast_fu_838_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        pic_in_load_reg_1726 <= pic_in_q0;
        tmp_64_cast_reg_1721[4 : 0] <= tmp_64_cast_fu_928_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        r_4_reg_1763 <= r_4_fu_1084_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        r_6_reg_1693 <= r_6_fu_884_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state50))) begin
        reg_616 <= grp_fu_606_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state78))) begin
        reg_629 <= grp_fu_602_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state71) & (exitcond_fu_1330_p2 == 1'd0))) begin
        tmp_104_reg_1866[13 : 2] <= tmp_104_fu_1405_p2[13 : 2];
        tmp_110_reg_1872[13 : 3] <= tmp_110_fu_1440_p2[13 : 3];
        tmp_120_reg_1878 <= tmp_120_fu_1515_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        tmp_111_reg_1898 <= tmp_111_fu_1544_p2;
        tmp_112_reg_1903[13 : 1] <= tmp_112_fu_1548_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state57) & (exitcond3_fu_1078_p2 == 1'd0))) begin
        tmp_39_cast_reg_1768[4 : 0] <= tmp_39_cast_fu_1090_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state69_io) & (tmp_38_fu_1256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state69))) begin
        tmp_40_cast_reg_1818[4 : 0] <= tmp_40_cast_fu_1262_p1[4 : 0];
        tmp_43_cast_reg_1823[4 : 1] <= tmp_43_cast_fu_1272_p1[4 : 1];
        tmp_44_cast_reg_1828[3 : 0] <= tmp_44_cast_fu_1286_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) & (exitcond7_fu_862_p2 == 1'd0))) begin
        tmp_41_cast_reg_1685[2 : 0] <= tmp_41_cast_fu_874_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state58) & (exitcond2_fu_1094_p2 == 1'd0))) begin
        tmp_46_cast_reg_1781[4 : 0] <= tmp_46_cast_fu_1106_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_45_fu_1290_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state70))) begin
        tmp_47_cast_reg_1836[4 : 0] <= tmp_47_cast_fu_1296_p1[4 : 0];
        tmp_49_cast_reg_1842[4 : 1] <= tmp_49_cast_fu_1306_p1[4 : 1];
        tmp_53_cast_reg_1848[3 : 0] <= tmp_53_cast_fu_1320_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) & (exitcond6_fu_878_p2 == 1'd0))) begin
        tmp_50_reg_1698 <= tmp_50_fu_890_p2;
        tmp_52_cast_reg_1703[4 : 0] <= tmp_52_cast_fu_895_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        tmp_58_reg_1809 <= tmp_58_fu_1248_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond15_fu_671_p2 == 1'd0))) begin
        tmp_70_reg_1628 <= {{phi_mul_reg_444[15:13]}};
        tmp_79_reg_1639 <= {{mul_fu_747_p2[11:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state39) & (exitcond8_fu_842_p2 == 1'd0))) begin
        tmp_cast_reg_1667[2 : 0] <= tmp_cast_fu_854_p1[2 : 0];
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        BIAS_blk_n_AR = m_axi_BIAS_ARREADY;
    end else begin
        BIAS_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond9_reg_1581 == 1'd0))) begin
        BIAS_blk_n_R = m_axi_BIAS_RVALID;
    end else begin
        BIAS_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        B_CONV1_address0 = tmp_54_fu_1201_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        B_CONV1_address0 = indvar9_fu_649_p1;
    end else begin
        B_CONV1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        B_CONV1_ce0 = 1'b1;
    end else begin
        B_CONV1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond9_reg_1581_pp0_iter1_reg == 1'd0))) begin
        B_CONV1_we0 = 1'b1;
    end else begin
        B_CONV1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        FM_DDR_BUFF1_blk_n_AR = m_axi_FM_DDR_BUFF1_ARREADY;
    end else begin
        FM_DDR_BUFF1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond14_reg_1595 == 1'd0))) begin
        FM_DDR_BUFF1_blk_n_R = m_axi_FM_DDR_BUFF1_RVALID;
    end else begin
        FM_DDR_BUFF1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) & (tmp_38_fu_1256_p2 == 1'd0))) begin
        FM_DDR_BUFF2_blk_n_AW = m_axi_FM_DDR_BUFF2_AWREADY;
    end else begin
        FM_DDR_BUFF2_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        FM_DDR_BUFF2_blk_n_B = m_axi_FM_DDR_BUFF2_BVALID;
    end else begin
        FM_DDR_BUFF2_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (exitcond16_reg_1923_pp3_iter1_reg == 1'd0))) begin
        FM_DDR_BUFF2_blk_n_W = m_axi_FM_DDR_BUFF2_WREADY;
    end else begin
        FM_DDR_BUFF2_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        WEIGHT_blk_n_AR = m_axi_WEIGHT_ARREADY;
    end else begin
        WEIGHT_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter8 == 1'b1) & (exitcond15_reg_1609_pp2_iter7_reg == 1'd0))) begin
        WEIGHT_blk_n_R = m_axi_WEIGHT_RVALID;
    end else begin
        WEIGHT_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        W_CONV1_address0 = tmp_144_cast_fu_1073_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter9 == 1'b1))) begin
        W_CONV1_address0 = tmp_103_cast_fu_834_p1;
    end else begin
        W_CONV1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter9 == 1'b1)))) begin
        W_CONV1_ce0 = 1'b1;
    end else begin
        W_CONV1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter9 == 1'b1) & (exitcond15_reg_1609_pp2_iter8_reg == 1'd0))) begin
        W_CONV1_we0 = 1'b1;
    end else begin
        W_CONV1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond9_fu_637_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond14_fu_654_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state18 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state18 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond15_fu_671_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state28 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state28 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond16_fu_1564_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state94 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state94 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((m_axi_FM_DDR_BUFF2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state101)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond14_reg_1595 == 1'd0))) begin
        ap_phi_mux_indvar8_phi_fu_425_p4 = indvar_next4_reg_1599;
    end else begin
        ap_phi_mux_indvar8_phi_fu_425_p4 = indvar8_reg_421;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond9_reg_1581 == 1'd0))) begin
        ap_phi_mux_indvar_phi_fu_413_p4 = indvar_next_reg_1585;
    end else begin
        ap_phi_mux_indvar_phi_fu_413_p4 = indvar_reg_409;
    end
end

always @ (*) begin
    if (((m_axi_FM_DDR_BUFF2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state101))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_BIAS_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_BIAS_ARREADY = m_axi_BIAS_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_BIAS_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_FM_DDR_BUFF1_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_FM_DDR_BUFF1_ARREADY = m_axi_FM_DDR_BUFF1_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_FM_DDR_BUFF1_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_FM_DDR_BUFF2_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_FM_DDR_BUFF2_AWREADY = m_axi_FM_DDR_BUFF2_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_FM_DDR_BUFF2_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_FM_DDR_BUFF2_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_FM_DDR_BUFF2_WREADY = m_axi_FM_DDR_BUFF2_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_FM_DDR_BUFF2_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_WEIGHT_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_WEIGHT_ARREADY = m_axi_WEIGHT_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_WEIGHT_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        conv1_buff_address0 = tmp_122_cast_fu_1530_p1;
    end else if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state68))) begin
        conv1_buff_address0 = conv1_buff_addr_reg_1794;
    end else if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state56))) begin
        conv1_buff_address0 = conv1_buff_addr_5_reg_1745;
    end else begin
        conv1_buff_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        conv1_buff_address1 = tmp_129_cast_fu_1556_p1;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        conv1_buff_address1 = tmp_128_cast_fu_1552_p1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        conv1_buff_address1 = tmp_123_cast_fu_1539_p1;
    end else begin
        conv1_buff_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state56))) begin
        conv1_buff_ce0 = 1'b1;
    end else begin
        conv1_buff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state72))) begin
        conv1_buff_ce1 = 1'b1;
    end else begin
        conv1_buff_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        conv1_buff_d0 = tmp_58_reg_1809;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        conv1_buff_d0 = reg_629;
    end else begin
        conv1_buff_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state56))) begin
        conv1_buff_we0 = 1'b1;
    end else begin
        conv1_buff_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        conv_out1_address0 = indvar5_fu_1576_p1;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        conv_out1_address0 = tmp_137_cast_fu_1560_p1;
    end else begin
        conv_out1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state93) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        conv_out1_ce0 = 1'b1;
    end else begin
        conv_out1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        conv_out1_we0 = 1'b1;
    end else begin
        conv_out1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state79))) begin
        grp_fu_602_p0 = reg_629;
    end else if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state51))) begin
        grp_fu_602_p0 = reg_622;
    end else begin
        grp_fu_602_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state79))) begin
        grp_fu_602_p1 = reg_622;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_602_p1 = conv1_buff_load_2_reg_1908;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        grp_fu_602_p1 = B_CONV1_load_reg_1804;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        grp_fu_602_p1 = reg_616;
    end else begin
        grp_fu_602_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        grp_fu_606_p0 = reg_629;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_606_p0 = pic_in_load_reg_1726;
    end else begin
        grp_fu_606_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        grp_fu_606_p1 = 32'd1048576000;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_606_p1 = W_CONV1_load_reg_1755;
    end else begin
        grp_fu_606_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_fu_763_ce = 1'b1;
    end else begin
        grp_fu_763_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (ap_reg_ioackin_m_axi_BIAS_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_BIAS_ARVALID = 1'b1;
    end else begin
        m_axi_BIAS_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond9_reg_1581 == 1'd0))) begin
        m_axi_BIAS_RREADY = 1'b1;
    end else begin
        m_axi_BIAS_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_FM_DDR_BUFF1_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state11))) begin
        m_axi_FM_DDR_BUFF1_ARVALID = 1'b1;
    end else begin
        m_axi_FM_DDR_BUFF1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond14_reg_1595 == 1'd0))) begin
        m_axi_FM_DDR_BUFF1_RREADY = 1'b1;
    end else begin
        m_axi_FM_DDR_BUFF1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_FM_DDR_BUFF2_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state69) & (tmp_38_fu_1256_p2 == 1'd0))) begin
        m_axi_FM_DDR_BUFF2_AWVALID = 1'b1;
    end else begin
        m_axi_FM_DDR_BUFF2_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_FM_DDR_BUFF2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state101))) begin
        m_axi_FM_DDR_BUFF2_BREADY = 1'b1;
    end else begin
        m_axi_FM_DDR_BUFF2_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_FM_DDR_BUFF2_WREADY == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (exitcond16_reg_1923_pp3_iter1_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_01001))) begin
        m_axi_FM_DDR_BUFF2_WVALID = 1'b1;
    end else begin
        m_axi_FM_DDR_BUFF2_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_WEIGHT_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state21))) begin
        m_axi_WEIGHT_ARVALID = 1'b1;
    end else begin
        m_axi_WEIGHT_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter8 == 1'b1) & (exitcond15_reg_1609_pp2_iter7_reg == 1'd0))) begin
        m_axi_WEIGHT_RREADY = 1'b1;
    end else begin
        m_axi_WEIGHT_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        pic_in_address0 = tmp_97_fu_923_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        pic_in_address0 = indvar1_fu_666_p1;
    end else begin
        pic_in_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        pic_in_ce0 = 1'b1;
    end else begin
        pic_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (exitcond14_reg_1595_pp1_iter1_reg == 1'd0))) begin
        pic_in_we0 = 1'b1;
    end else begin
        pic_in_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_sig_ioackin_m_axi_BIAS_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond9_fu_637_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond9_fu_637_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (ap_sig_ioackin_m_axi_FM_DDR_BUFF1_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond14_fu_654_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond14_fu_654_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (ap_sig_ioackin_m_axi_WEIGHT_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (exitcond15_fu_671_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (exitcond15_fu_671_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((exitcond8_fu_842_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((exitcond7_fu_862_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((exitcond6_fu_878_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((exitcond5_fu_899_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if (((exitcond4_fu_932_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state57 : begin
            if (((exitcond3_fu_1078_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state58 : begin
            if (((exitcond2_fu_1094_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((exitcond1_fu_1110_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state69 : begin
            if (((1'b0 == ap_block_state69_io) & (1'b1 == ap_CS_fsm_state69) & (tmp_38_fu_1256_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_state69_io) & (tmp_38_fu_1256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state69))) begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end
        end
        ap_ST_fsm_state70 : begin
            if (((1'b1 == ap_CS_fsm_state70) & (tmp_45_fu_1290_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        ap_ST_fsm_state71 : begin
            if (((exitcond_fu_1330_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (exitcond16_fu_1564_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (exitcond16_fu_1564_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            if (((m_axi_FM_DDR_BUFF2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state101))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd79];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_BIAS_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond9_reg_1581 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_BIAS_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond9_reg_1581 == 1'd0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((m_axi_FM_DDR_BUFF1_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (exitcond14_reg_1595 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((m_axi_FM_DDR_BUFF1_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (exitcond14_reg_1595 == 1'd0));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((m_axi_WEIGHT_RVALID == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b1) & (exitcond15_reg_1609_pp2_iter7_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((m_axi_WEIGHT_RVALID == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b1) & (exitcond15_reg_1609_pp2_iter7_reg == 1'd0));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((1'b1 == ap_block_state96_io) & (ap_enable_reg_pp3_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((1'b1 == ap_block_state96_io) & (ap_enable_reg_pp3_iter2 == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_pp1_stage0_iter1 = ((m_axi_FM_DDR_BUFF1_RVALID == 1'b0) & (exitcond14_reg_1595 == 1'd0));
end

assign ap_block_state20_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state36_pp2_stage0_iter8 = ((m_axi_WEIGHT_RVALID == 1'b0) & (exitcond15_reg_1609_pp2_iter7_reg == 1'd0));
end

assign ap_block_state37_pp2_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state69_io = ((ap_sig_ioackin_m_axi_FM_DDR_BUFF2_AWREADY == 1'b0) & (tmp_38_fu_1256_p2 == 1'd0));
end

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state94_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state95_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state96_io = ((ap_sig_ioackin_m_axi_FM_DDR_BUFF2_WREADY == 1'b0) & (exitcond16_reg_1923_pp3_iter1_reg == 1'd0));
end

assign ap_block_state96_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter1 = ((m_axi_BIAS_RVALID == 1'b0) & (exitcond9_reg_1581 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign c_4_fu_1100_p2 = (c2_reg_533 + 5'd1);

assign c_5_fu_1520_p2 = (c5_reg_568 + 5'd2);

assign c_6_fu_905_p2 = (c_reg_499 + 5'd1);

assign chl_out_2_fu_1336_p2 = (chl_out6_reg_580 + 3'd1);

assign chl_out_3_fu_938_p2 = (chl_out2_reg_511 + 3'd1);

assign chl_out_fu_1116_p2 = (chl_out3_reg_544 + 3'd1);

assign conv_out1_d0 = reg_616;

assign div7_fu_789_p1 = $signed(tmp_79_reg_1639_pp2_iter7_reg);

assign exitcond14_fu_654_p2 = ((ap_phi_mux_indvar8_phi_fu_425_p4 == 11'd1024) ? 1'b1 : 1'b0);

assign exitcond15_fu_671_p2 = ((indvar2_reg_433 == 8'd150) ? 1'b1 : 1'b0);

assign exitcond16_fu_1564_p2 = ((indvar4_reg_591 == 11'd1176) ? 1'b1 : 1'b0);

assign exitcond1_fu_1110_p2 = ((chl_out3_reg_544 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond2_fu_1094_p2 = ((c2_reg_533 == 5'd28) ? 1'b1 : 1'b0);

assign exitcond3_fu_1078_p2 = ((r1_reg_522 == 5'd28) ? 1'b1 : 1'b0);

assign exitcond4_fu_932_p2 = ((chl_out2_reg_511 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond5_fu_899_p2 = ((c_reg_499 == 5'd28) ? 1'b1 : 1'b0);

assign exitcond6_fu_878_p2 = ((r_reg_488 == 5'd28) ? 1'b1 : 1'b0);

assign exitcond7_fu_862_p2 = ((kc_reg_477 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond8_fu_842_p2 = ((kr_reg_466 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond9_fu_637_p2 = ((ap_phi_mux_indvar_phi_fu_413_p4 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond_fu_1330_p2 = ((chl_out6_reg_580 == 3'd6) ? 1'b1 : 1'b0);

assign grp_fu_763_p1 = 5'd5;

assign idx_urem_fu_695_p3 = ((tmp_fu_689_p2[0:0] === 1'b1) ? next_urem_fu_683_p2 : 8'd0);

assign indvar1_fu_666_p1 = indvar8_reg_421_pp1_iter1_reg;

assign indvar5_fu_1576_p1 = indvar4_reg_591;

assign indvar9_fu_649_p1 = indvar_reg_409_pp0_iter1_reg;

assign indvar_next4_fu_660_p2 = (ap_phi_mux_indvar8_phi_fu_425_p4 + 11'd1);

assign indvar_next5_fu_677_p2 = (indvar2_reg_433 + 8'd1);

assign indvar_next6_fu_1570_p2 = (indvar4_reg_591 + 11'd1);

assign indvar_next_fu_643_p2 = (ap_phi_mux_indvar_phi_fu_413_p4 + 3'd1);

assign kc_2_fu_868_p2 = (kc_reg_477 + 3'd1);

assign kc_cast_fu_858_p1 = kc_reg_477;

assign kr_2_fu_848_p2 = (kr_reg_466 + 3'd1);

assign kr_cast_fu_838_p1 = kr_reg_466;

assign m_axi_BIAS_ARADDR = 32'd0;

assign m_axi_BIAS_ARBURST = 2'd0;

assign m_axi_BIAS_ARCACHE = 4'd0;

assign m_axi_BIAS_ARID = 1'd0;

assign m_axi_BIAS_ARLEN = 32'd6;

assign m_axi_BIAS_ARLOCK = 2'd0;

assign m_axi_BIAS_ARPROT = 3'd0;

assign m_axi_BIAS_ARQOS = 4'd0;

assign m_axi_BIAS_ARREGION = 4'd0;

assign m_axi_BIAS_ARSIZE = 3'd0;

assign m_axi_BIAS_ARUSER = 1'd0;

assign m_axi_BIAS_AWADDR = 32'd0;

assign m_axi_BIAS_AWBURST = 2'd0;

assign m_axi_BIAS_AWCACHE = 4'd0;

assign m_axi_BIAS_AWID = 1'd0;

assign m_axi_BIAS_AWLEN = 32'd0;

assign m_axi_BIAS_AWLOCK = 2'd0;

assign m_axi_BIAS_AWPROT = 3'd0;

assign m_axi_BIAS_AWQOS = 4'd0;

assign m_axi_BIAS_AWREGION = 4'd0;

assign m_axi_BIAS_AWSIZE = 3'd0;

assign m_axi_BIAS_AWUSER = 1'd0;

assign m_axi_BIAS_AWVALID = 1'b0;

assign m_axi_BIAS_BREADY = 1'b0;

assign m_axi_BIAS_WDATA = 32'd0;

assign m_axi_BIAS_WID = 1'd0;

assign m_axi_BIAS_WLAST = 1'b0;

assign m_axi_BIAS_WSTRB = 4'd0;

assign m_axi_BIAS_WUSER = 1'd0;

assign m_axi_BIAS_WVALID = 1'b0;

assign m_axi_FM_DDR_BUFF1_ARADDR = 32'd0;

assign m_axi_FM_DDR_BUFF1_ARBURST = 2'd0;

assign m_axi_FM_DDR_BUFF1_ARCACHE = 4'd0;

assign m_axi_FM_DDR_BUFF1_ARID = 1'd0;

assign m_axi_FM_DDR_BUFF1_ARLEN = 32'd1024;

assign m_axi_FM_DDR_BUFF1_ARLOCK = 2'd0;

assign m_axi_FM_DDR_BUFF1_ARPROT = 3'd0;

assign m_axi_FM_DDR_BUFF1_ARQOS = 4'd0;

assign m_axi_FM_DDR_BUFF1_ARREGION = 4'd0;

assign m_axi_FM_DDR_BUFF1_ARSIZE = 3'd0;

assign m_axi_FM_DDR_BUFF1_ARUSER = 1'd0;

assign m_axi_FM_DDR_BUFF1_AWADDR = 32'd0;

assign m_axi_FM_DDR_BUFF1_AWBURST = 2'd0;

assign m_axi_FM_DDR_BUFF1_AWCACHE = 4'd0;

assign m_axi_FM_DDR_BUFF1_AWID = 1'd0;

assign m_axi_FM_DDR_BUFF1_AWLEN = 32'd0;

assign m_axi_FM_DDR_BUFF1_AWLOCK = 2'd0;

assign m_axi_FM_DDR_BUFF1_AWPROT = 3'd0;

assign m_axi_FM_DDR_BUFF1_AWQOS = 4'd0;

assign m_axi_FM_DDR_BUFF1_AWREGION = 4'd0;

assign m_axi_FM_DDR_BUFF1_AWSIZE = 3'd0;

assign m_axi_FM_DDR_BUFF1_AWUSER = 1'd0;

assign m_axi_FM_DDR_BUFF1_AWVALID = 1'b0;

assign m_axi_FM_DDR_BUFF1_BREADY = 1'b0;

assign m_axi_FM_DDR_BUFF1_WDATA = 32'd0;

assign m_axi_FM_DDR_BUFF1_WID = 1'd0;

assign m_axi_FM_DDR_BUFF1_WLAST = 1'b0;

assign m_axi_FM_DDR_BUFF1_WSTRB = 4'd0;

assign m_axi_FM_DDR_BUFF1_WUSER = 1'd0;

assign m_axi_FM_DDR_BUFF1_WVALID = 1'b0;

assign m_axi_FM_DDR_BUFF2_ARADDR = 32'd0;

assign m_axi_FM_DDR_BUFF2_ARBURST = 2'd0;

assign m_axi_FM_DDR_BUFF2_ARCACHE = 4'd0;

assign m_axi_FM_DDR_BUFF2_ARID = 1'd0;

assign m_axi_FM_DDR_BUFF2_ARLEN = 32'd0;

assign m_axi_FM_DDR_BUFF2_ARLOCK = 2'd0;

assign m_axi_FM_DDR_BUFF2_ARPROT = 3'd0;

assign m_axi_FM_DDR_BUFF2_ARQOS = 4'd0;

assign m_axi_FM_DDR_BUFF2_ARREGION = 4'd0;

assign m_axi_FM_DDR_BUFF2_ARSIZE = 3'd0;

assign m_axi_FM_DDR_BUFF2_ARUSER = 1'd0;

assign m_axi_FM_DDR_BUFF2_ARVALID = 1'b0;

assign m_axi_FM_DDR_BUFF2_AWADDR = 32'd0;

assign m_axi_FM_DDR_BUFF2_AWBURST = 2'd0;

assign m_axi_FM_DDR_BUFF2_AWCACHE = 4'd0;

assign m_axi_FM_DDR_BUFF2_AWID = 1'd0;

assign m_axi_FM_DDR_BUFF2_AWLEN = 32'd1176;

assign m_axi_FM_DDR_BUFF2_AWLOCK = 2'd0;

assign m_axi_FM_DDR_BUFF2_AWPROT = 3'd0;

assign m_axi_FM_DDR_BUFF2_AWQOS = 4'd0;

assign m_axi_FM_DDR_BUFF2_AWREGION = 4'd0;

assign m_axi_FM_DDR_BUFF2_AWSIZE = 3'd0;

assign m_axi_FM_DDR_BUFF2_AWUSER = 1'd0;

assign m_axi_FM_DDR_BUFF2_RREADY = 1'b0;

assign m_axi_FM_DDR_BUFF2_WDATA = conv_out1_load_reg_1937;

assign m_axi_FM_DDR_BUFF2_WID = 1'd0;

assign m_axi_FM_DDR_BUFF2_WLAST = 1'b0;

assign m_axi_FM_DDR_BUFF2_WSTRB = 4'd15;

assign m_axi_FM_DDR_BUFF2_WUSER = 1'd0;

assign m_axi_WEIGHT_ARADDR = 32'd0;

assign m_axi_WEIGHT_ARBURST = 2'd0;

assign m_axi_WEIGHT_ARCACHE = 4'd0;

assign m_axi_WEIGHT_ARID = 1'd0;

assign m_axi_WEIGHT_ARLEN = 32'd150;

assign m_axi_WEIGHT_ARLOCK = 2'd0;

assign m_axi_WEIGHT_ARPROT = 3'd0;

assign m_axi_WEIGHT_ARQOS = 4'd0;

assign m_axi_WEIGHT_ARREGION = 4'd0;

assign m_axi_WEIGHT_ARSIZE = 3'd0;

assign m_axi_WEIGHT_ARUSER = 1'd0;

assign m_axi_WEIGHT_AWADDR = 32'd0;

assign m_axi_WEIGHT_AWBURST = 2'd0;

assign m_axi_WEIGHT_AWCACHE = 4'd0;

assign m_axi_WEIGHT_AWID = 1'd0;

assign m_axi_WEIGHT_AWLEN = 32'd0;

assign m_axi_WEIGHT_AWLOCK = 2'd0;

assign m_axi_WEIGHT_AWPROT = 3'd0;

assign m_axi_WEIGHT_AWQOS = 4'd0;

assign m_axi_WEIGHT_AWREGION = 4'd0;

assign m_axi_WEIGHT_AWSIZE = 3'd0;

assign m_axi_WEIGHT_AWUSER = 1'd0;

assign m_axi_WEIGHT_AWVALID = 1'b0;

assign m_axi_WEIGHT_BREADY = 1'b0;

assign m_axi_WEIGHT_WDATA = 32'd0;

assign m_axi_WEIGHT_WID = 1'd0;

assign m_axi_WEIGHT_WLAST = 1'b0;

assign m_axi_WEIGHT_WSTRB = 4'd0;

assign m_axi_WEIGHT_WUSER = 1'd0;

assign m_axi_WEIGHT_WVALID = 1'b0;

assign mul_fu_747_p1 = mul_fu_747_p10;

assign mul_fu_747_p10 = tmp_57_fu_735_p3;

assign mul_fu_747_p2 = (12'd52 * mul_fu_747_p1);

assign next_mul_fu_703_p2 = (16'd328 + phi_mul_reg_444);

assign next_urem_fu_683_p2 = (8'd1 + phi_urem_reg_455);

assign notlhs_fu_1224_p2 = ((tmp_73_fu_1210_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_1230_p2 = ((tmp_95_fu_1220_p1 == 23'd0) ? 1'b1 : 1'b0);

assign p_shl10_cast1_fu_956_p1 = tmp_121_fu_948_p3;

assign p_shl10_cast_fu_960_p1 = tmp_121_fu_948_p3;

assign p_shl11_cast_fu_1165_p3 = {{tmp_91_fu_1161_p1}, {5'd0}};

assign p_shl12_cast_fu_1181_p1 = $signed(tmp_92_fu_1173_p3);

assign p_shl13_cast_fu_1130_p1 = tmp_87_fu_1122_p3;

assign p_shl14_cast_fu_1142_p1 = tmp_88_fu_1134_p3;

assign p_shl15_cast_fu_1489_p3 = {{tmp_117_fu_1485_p1}, {4'd0}};

assign p_shl16_cast_fu_1505_p1 = $signed(tmp_118_fu_1497_p3);

assign p_shl17_cast_fu_1454_p1 = tmp_113_fu_1446_p3;

assign p_shl18_cast_fu_1466_p1 = tmp_114_fu_1458_p3;

assign p_shl19_cast_fu_1420_p3 = {{tmp_108_fu_1416_p1}, {5'd0}};

assign p_shl1_cast_fu_779_p1 = tmp_71_fu_772_p3;

assign p_shl20_cast_fu_1436_p1 = $signed(tmp_109_fu_1428_p3);

assign p_shl21_cast_fu_1385_p3 = {{tmp_102_fu_1381_p1}, {5'd0}};

assign p_shl22_cast_fu_1401_p1 = $signed(tmp_103_fu_1393_p3);

assign p_shl23_cast_fu_1350_p1 = tmp_98_fu_1342_p3;

assign p_shl24_cast_fu_1362_p1 = tmp_99_fu_1354_p3;

assign p_shl5_cast_fu_1012_p3 = {{tmp_131_fu_1008_p1}, {5'd0}};

assign p_shl6_cast_fu_1028_p1 = $signed(tmp_132_fu_1020_p3);

assign p_shl7_cast_fu_989_p1 = tmp_128_fu_981_p3;

assign p_shl9_cast_fu_1058_p1 = tmp_125_fu_1051_p3;

assign p_shl_cast_fu_810_p3 = {{tmp_82_fu_806_p1}, {2'd0}};

assign r_4_fu_1084_p2 = (r1_reg_522 + 5'd1);

assign r_5_fu_1324_p2 = (r4_reg_556 + 5'd2);

assign r_6_fu_884_p2 = (r_reg_488 + 5'd1);

assign tmp_100_fu_1366_p2 = (p_shl23_cast_fu_1350_p1 - p_shl24_cast_fu_1362_p1);

assign tmp_101_fu_1376_p2 = ($signed(tmp_117_cast_fu_1372_p1) + $signed(tmp_40_cast_reg_1818));

assign tmp_102_fu_1381_p1 = tmp_101_fu_1376_p2[8:0];

assign tmp_103_cast_fu_834_p1 = tmp_84_reg_1649;

assign tmp_103_fu_1393_p3 = {{tmp_101_fu_1376_p2}, {2'd0}};

assign tmp_104_fu_1405_p2 = ($signed(p_shl21_cast_fu_1385_p3) - $signed(p_shl22_cast_fu_1401_p1));

assign tmp_105_fu_1526_p2 = (tmp_104_reg_1866 + tmp_47_cast_reg_1836);

assign tmp_106_fu_1535_p2 = (tmp_104_reg_1866 + tmp_49_cast_reg_1842);

assign tmp_107_cast_fu_1152_p1 = $signed(tmp_89_fu_1146_p2);

assign tmp_107_fu_1411_p2 = ($signed(tmp_117_cast_fu_1372_p1) + $signed(tmp_43_cast_reg_1823));

assign tmp_108_fu_1416_p1 = tmp_107_fu_1411_p2[8:0];

assign tmp_109_fu_1428_p3 = {{tmp_107_fu_1411_p2}, {2'd0}};

assign tmp_110_fu_1440_p2 = ($signed(p_shl19_cast_fu_1420_p3) - $signed(p_shl20_cast_fu_1436_p1));

assign tmp_111_fu_1544_p2 = (tmp_110_reg_1872 + tmp_47_cast_reg_1836);

assign tmp_112_cast_fu_1196_p1 = tmp_94_fu_1191_p2;

assign tmp_112_fu_1548_p2 = (tmp_110_reg_1872 + tmp_49_cast_reg_1842);

assign tmp_113_fu_1446_p3 = {{chl_out6_reg_580}, {4'd0}};

assign tmp_114_fu_1458_p3 = {{chl_out6_reg_580}, {1'd0}};

assign tmp_115_fu_1470_p2 = (p_shl17_cast_fu_1454_p1 - p_shl18_cast_fu_1466_p1);

assign tmp_116_fu_1480_p2 = ($signed(tmp_132_cast_fu_1476_p1) + $signed(tmp_44_cast_reg_1828));

assign tmp_117_cast_fu_1372_p1 = $signed(tmp_100_fu_1366_p2);

assign tmp_117_fu_1485_p1 = tmp_116_fu_1480_p2[7:0];

assign tmp_118_fu_1497_p3 = {{tmp_116_fu_1480_p2}, {1'd0}};

assign tmp_119_fu_1509_p2 = ($signed(p_shl15_cast_fu_1489_p3) - $signed(p_shl16_cast_fu_1505_p1));

assign tmp_120_fu_1515_p2 = (tmp_119_fu_1509_p2 + tmp_53_cast_reg_1848);

assign tmp_121_fu_948_p3 = {{chl_out2_reg_511}, {2'd0}};

assign tmp_122_cast_fu_1530_p1 = tmp_105_fu_1526_p2;

assign tmp_122_fu_964_p2 = (tmp_67_cast_fu_944_p1 + p_shl10_cast1_fu_956_p1);

assign tmp_123_cast_fu_1539_p1 = tmp_106_fu_1535_p2;

assign tmp_123_fu_970_p2 = (6'd5 + tmp_122_fu_964_p2);

assign tmp_124_fu_976_p2 = (tmp_123_fu_970_p2 + tmp_cast_reg_1667);

assign tmp_125_fu_1051_p3 = {{tmp_124_reg_1739}, {2'd0}};

assign tmp_126_fu_1062_p2 = (tmp_141_cast_fu_1048_p1 + p_shl9_cast_fu_1058_p1);

assign tmp_127_fu_1068_p2 = (tmp_126_fu_1062_p2 + tmp_41_cast_reg_1685);

assign tmp_128_cast_fu_1552_p1 = tmp_111_reg_1898;

assign tmp_128_fu_981_p3 = {{chl_out2_reg_511}, {5'd0}};

assign tmp_129_cast_fu_1556_p1 = tmp_112_reg_1903;

assign tmp_129_fu_993_p2 = (p_shl7_cast_fu_989_p1 - p_shl10_cast_fu_960_p1);

assign tmp_130_fu_1003_p2 = ($signed(tmp_147_cast_fu_999_p1) + $signed(tmp_52_cast_reg_1703));

assign tmp_131_fu_1008_p1 = tmp_130_fu_1003_p2[8:0];

assign tmp_132_cast_fu_1476_p1 = $signed(tmp_115_fu_1470_p2);

assign tmp_132_fu_1020_p3 = {{tmp_130_fu_1003_p2}, {2'd0}};

assign tmp_133_fu_1032_p2 = ($signed(p_shl5_cast_fu_1012_p3) - $signed(p_shl6_cast_fu_1028_p1));

assign tmp_134_fu_1038_p2 = (tmp_133_fu_1032_p2 + tmp_64_cast_reg_1721);

assign tmp_137_cast_fu_1560_p1 = tmp_120_reg_1878;

assign tmp_141_cast_fu_1048_p1 = tmp_124_reg_1739;

assign tmp_144_cast_fu_1073_p1 = tmp_127_fu_1068_p2;

assign tmp_147_cast_fu_999_p1 = $signed(tmp_129_fu_993_p2);

assign tmp_152_cast_fu_1043_p1 = tmp_134_fu_1038_p2;

assign tmp_38_fu_1256_p2 = ((r4_reg_556 < 5'd28) ? 1'b1 : 1'b0);

assign tmp_39_cast_fu_1090_p1 = r1_reg_522;

assign tmp_40_cast_fu_1262_p1 = r4_reg_556;

assign tmp_41_cast_fu_874_p1 = kc_reg_477;

assign tmp_42_fu_1266_p2 = (r4_reg_556 | 5'd1);

assign tmp_43_cast_fu_1272_p1 = tmp_42_fu_1266_p2;

assign tmp_44_cast_fu_1286_p1 = tmp_85_fu_1276_p4;

assign tmp_45_fu_1290_p2 = ((c5_reg_568 < 5'd28) ? 1'b1 : 1'b0);

assign tmp_46_cast_fu_1106_p1 = c2_reg_533;

assign tmp_47_cast_fu_1296_p1 = c5_reg_568;

assign tmp_48_fu_1300_p2 = (c5_reg_568 | 5'd1);

assign tmp_49_cast_fu_1306_p1 = tmp_48_fu_1300_p2;

assign tmp_50_fu_890_p2 = (kr_cast_reg_1654 + r_reg_488);

assign tmp_51_cast_fu_769_p1 = tmp_70_reg_1628_pp2_iter7_reg;

assign tmp_52_cast_fu_895_p1 = r_reg_488;

assign tmp_53_cast_fu_1320_p1 = tmp_86_fu_1310_p4;

assign tmp_54_fu_1201_p1 = chl_out3_reg_544;

assign tmp_55_to_int_fu_1206_p1 = reg_629;

assign tmp_57_fu_735_p3 = ((tmp_74_fu_723_p2[0:0] === 1'b1) ? tmp_72_fu_719_p1 : tmp_78_fu_729_p2);

assign tmp_58_fu_1248_p3 = ((tmp_77_fu_1242_p2[0:0] === 1'b1) ? reg_629 : 32'd0);

assign tmp_59_cast_fu_792_p1 = $unsigned(div7_fu_789_p1);

assign tmp_62_fu_911_p2 = (c_reg_499 + kc_cast_reg_1672);

assign tmp_64_cast_fu_928_p1 = c_reg_499;

assign tmp_67_cast_fu_944_p1 = chl_out2_reg_511;

assign tmp_70_cast_fu_824_p1 = grp_fu_763_p2;

assign tmp_71_fu_772_p3 = {{tmp_70_reg_1628_pp2_iter7_reg}, {2'd0}};

assign tmp_72_fu_719_p1 = phi_urem_reg_455[4:0];

assign tmp_73_fu_1210_p4 = {{tmp_55_to_int_fu_1206_p1[30:23]}};

assign tmp_74_fu_723_p2 = ((tmp_72_fu_719_p1 < 5'd25) ? 1'b1 : 1'b0);

assign tmp_75_fu_1236_p2 = (notrhs_fu_1230_p2 | notlhs_fu_1224_p2);

assign tmp_77_fu_1242_p2 = (tmp_76_fu_611_p2 & tmp_75_fu_1236_p2);

assign tmp_78_fu_729_p2 = (5'd7 + tmp_72_fu_719_p1);

assign tmp_80_fu_796_p2 = (tmp_s_fu_783_p2 + tmp_59_cast_fu_792_p1);

assign tmp_81_fu_802_p1 = tmp_80_fu_796_p2[8:0];

assign tmp_82_fu_806_p1 = tmp_80_fu_796_p2[6:0];

assign tmp_83_fu_818_p2 = (tmp_81_fu_802_p1 + p_shl_cast_fu_810_p3);

assign tmp_84_fu_828_p2 = (tmp_83_fu_818_p2 + tmp_70_cast_fu_824_p1);

assign tmp_85_fu_1276_p4 = {{r4_reg_556[4:1]}};

assign tmp_86_fu_1310_p4 = {{c5_reg_568[4:1]}};

assign tmp_87_fu_1122_p3 = {{chl_out3_reg_544}, {5'd0}};

assign tmp_88_fu_1134_p3 = {{chl_out3_reg_544}, {2'd0}};

assign tmp_89_fu_1146_p2 = (p_shl13_cast_fu_1130_p1 - p_shl14_cast_fu_1142_p1);

assign tmp_90_fu_1156_p2 = ($signed(tmp_107_cast_fu_1152_p1) + $signed(tmp_39_cast_reg_1768));

assign tmp_91_fu_1161_p1 = tmp_90_fu_1156_p2[8:0];

assign tmp_92_fu_1173_p3 = {{tmp_90_fu_1156_p2}, {2'd0}};

assign tmp_93_fu_1185_p2 = ($signed(p_shl11_cast_fu_1165_p3) - $signed(p_shl12_cast_fu_1181_p1));

assign tmp_94_fu_1191_p2 = (tmp_93_fu_1185_p2 + tmp_46_cast_reg_1781);

assign tmp_95_fu_1220_p1 = tmp_55_to_int_fu_1206_p1[22:0];

assign tmp_96_fu_916_p3 = {{tmp_50_reg_1698}, {tmp_62_fu_911_p2}};

assign tmp_97_fu_923_p1 = tmp_96_fu_916_p3;

assign tmp_98_fu_1342_p3 = {{chl_out6_reg_580}, {5'd0}};

assign tmp_99_fu_1354_p3 = {{chl_out6_reg_580}, {2'd0}};

assign tmp_cast_fu_854_p1 = kr_reg_466;

assign tmp_fu_689_p2 = ((next_urem_fu_683_p2 < 8'd25) ? 1'b1 : 1'b0);

assign tmp_s_fu_783_p2 = (tmp_51_cast_fu_769_p1 + p_shl1_cast_fu_779_p1);

always @ (posedge ap_clk) begin
    kr_cast_reg_1654[4:3] <= 2'b00;
    tmp_cast_reg_1667[5:3] <= 3'b000;
    kc_cast_reg_1672[4:3] <= 2'b00;
    tmp_41_cast_reg_1685[8:3] <= 6'b000000;
    tmp_52_cast_reg_1703[9:5] <= 5'b00000;
    tmp_64_cast_reg_1721[13:5] <= 9'b000000000;
    tmp_39_cast_reg_1768[9:5] <= 5'b00000;
    tmp_46_cast_reg_1781[13:5] <= 9'b000000000;
    tmp_40_cast_reg_1818[9:5] <= 5'b00000;
    tmp_43_cast_reg_1823[0] <= 1'b1;
    tmp_43_cast_reg_1823[9:5] <= 5'b00000;
    tmp_44_cast_reg_1828[8:4] <= 5'b00000;
    tmp_47_cast_reg_1836[13:5] <= 9'b000000000;
    tmp_49_cast_reg_1842[0] <= 1'b1;
    tmp_49_cast_reg_1842[13:5] <= 9'b000000000;
    tmp_53_cast_reg_1848[11:4] <= 8'b00000000;
    tmp_104_reg_1866[1:0] <= 2'b00;
    tmp_110_reg_1872[2:0] <= 3'b100;
    tmp_112_reg_1903[0] <= 1'b1;
end

endmodule //conv1
